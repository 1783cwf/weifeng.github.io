<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Camunda</title>
      <link href="posts/34119.html"/>
      <url>posts/34119.html</url>
      
        <content type="html"><![CDATA[<p>原文地址： <a href="https://docs.camunda.org/get-started/quick-start/">https://docs.camunda.org/get-started/quick-start/</a></p><h2 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0. 介绍"></a>0. 介绍</h2><p>本教程将指导您使用 Camunda BPM 平台建模并实现您的第一个工作流程，其中将使用 JAVA 或 NodeJS 作为外部客户端，以及使用 DMN 分离流程与决策，让我们开始吧！</p><p>首先使用 git 克隆示例代码</p><pre><code>git clone https://github.com/camunda/camunda-get-started-quickstart.git# 如果github速度缓慢，也可以选择使用我的gitee镜像git clone https://gitee.com/zoollcar/camunda-get-started-quickstart.git</code></pre><p>在教程开始之前，首先将代码签出到 Start 标签</p><p>在教程过程中可以随时通过 Start 标签恢复到初试状态，或使用 Step-X（X 表示步骤）标签，恢复到任意一步骤的状态</p><pre><code>git checkout -f Step-X（将X替换为步骤数字1~6）</code></pre><p>教程将分为六个步骤</p><ol><li>下载和安装</li></ol><blockquote><p>在计算机上安装 Camunda BPM 平台和 Camunda Modeler。</p></blockquote><ol><li>编辑流程</li></ol><blockquote><p>了解处理 Camunda Modeler 的基础知识，了解如何对完全可执行的流程进行建模和配置，以及如何集成自己的业务逻辑。</p></blockquote><ol><li>部署流程</li></ol><blockquote><p>将流程部署到 Camunda 并启动您的第一个流程实例。</p></blockquote><ol><li>人工任务</li></ol><blockquote><p>了解将人工任务集成到流程中的基础知识，以及如何使用 Camunda 构建表单。</p></blockquote><ol><li>动态性</li></ol><blockquote><p>了解如何通过向流程添加网关来使流程更具动态性。</p></blockquote><ol><li>决策自动化</li></ol><blockquote><p>了解如何在流程中集成 DMN 决策表。</p></blockquote><h2 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1. 下载和安装"></a>1. 下载和安装</h2><p>首先，您需要安装 Camunda BPM 平台和 Camunda Modeler。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>确保你具有 JAVA1.8 以上的 JRE 或 JDK，并可以在命令行使用</p><p>在命令行中运行以下命令，检查你的 java 版本</p><p>可以在 <a href="https://docs.camunda.org/manual/latest/introduction/supported-environments/#java-runtime">Camunda’s support list</a> 里找到 Camunda 支持的所有 JAVA 版本</p><h3 id="Camunda-Platform-（Camunda-BPM-平台）"><a href="#Camunda-Platform-（Camunda-BPM-平台）" class="headerlink" title="Camunda Platform （Camunda BPM 平台）"></a>Camunda Platform （Camunda BPM 平台）</h3><p>首先我们需要下载 Camunda Platform</p><p>打开下载地址 <a href="https://camunda.com/download/">https://camunda.com/download/</a></p><p><img src="http://img.shaochenfeng.com/20210525080017.png" alt="image"></p><p>下载 ZIP 压缩包，并解压到任意位置</p><p><img src="http://img.shaochenfeng.com/20210525080143.png" alt="image"></p><p>windows 运行<code>start.bat</code>linux 运行`start.sh，脚本会启动服务</p><p>在浏览器中打开 <a href="http://localhost:8080/">http://localhost:8080/</a> 就可以看到欢迎页面了</p><p><img src="http://img.shaochenfeng.com/20210525081135.png" alt="image"></p><h3 id="Camunda-Modeler（用于编辑流程图及其他模型）"><a href="#Camunda-Modeler（用于编辑流程图及其他模型）" class="headerlink" title="Camunda Modeler（用于编辑流程图及其他模型）"></a>Camunda Modeler（用于编辑流程图及其他模型）</h3><p>打开下载地址 <a href="https://camunda.com/download/modeler/">https://camunda.com/download/modeler/</a></p><p><img src="http://img.shaochenfeng.com/20210525080718.png" alt="image"></p><p>下载对应系统的版本，并解压到任意位置</p><p><img src="http://img.shaochenfeng.com/20210525080810.png" alt="image"></p><p>执行 <code>camunda-modeler.exe</code> (Windows), <code>camunda-modeler.app</code> (Mac), or <code>camunda-modeler.sh</code> (Linux)，即可启动<code>Camunda Modeler</code></p><p><img src="http://img.shaochenfeng.com/20210525080941.png" alt="image"></p><h2 id="2-编辑流程"><a href="#2-编辑流程" class="headerlink" title="2. 编辑流程"></a>2. 编辑流程</h2><p>本章中，我们将会使用 Camunda Modeler 创建第一个 BPMN 2.0 流程，并执行一些自动任务</p><p>首先，打开 Camunda Modeler</p><h3 id="新建-BPMN-流程"><a href="#新建-BPMN-流程" class="headerlink" title="新建 BPMN 流程"></a>新建 BPMN 流程</h3><p>点击 <em>File &gt; New File &gt; BPMN Diagram</em> ，创建一个新的流程设计文件</p><p><img src="http://img.shaochenfeng.com/20210525082359.png" alt="image"></p><h3 id="编辑一个简单的流程"><a href="#编辑一个简单的流程" class="headerlink" title="编辑一个简单的流程"></a>编辑一个简单的流程</h3><p><img src="http://img.shaochenfeng.com/20210526060459.png" alt="image"></p><ol><li>双击 <em>开始</em> 节点编辑标签，输入 “付款请求”</li></ol><blockquote><p>标签可以换行，需要使用 Shift + 回车</p></blockquote><ol><li>点击右面显示的方框，添加一个新的活动</li></ol><p>可以看到一个新的活动显示到画布上，双击将它命名为 “刷卡付款”</p><ol><li>点击<em>取信用卡</em>节点右面的扳手可以修改活动类型，这里我们修改为<em>Service Task</em>（服务类型）</li></ol><p><img src="http://img.shaochenfeng.com/20210526063519.png" alt="image"></p><ol><li>新增一个<em>结束</em>节点，并命名为 “收到付款”</li></ol><p><img src="http://img.shaochenfeng.com/20210526063435.png" alt="image"></p><h3 id="配置-“刷卡付款”-节点"><a href="#配置-“刷卡付款”-节点" class="headerlink" title="配置 “刷卡付款” 节点"></a>配置 “刷卡付款” 节点</h3><p>服务类型有很多执行的方法，这次我们使用 “external（外部）” 任务模式</p><ol><li>点击 “取信用卡” 节点，在右侧的面板中修改 Implementation（实现）为 <code>External</code> ，修改 Topic 为 <code>charge-card</code></li></ol><p><img src="http://img.shaochenfeng.com/20210526063609.png" alt="image"></p><h3 id="配置流程参数"><a href="#配置流程参数" class="headerlink" title="配置流程参数"></a>配置流程参数</h3><ol><li>点击画布的空白处，右侧的面板会显示当前流程本身的参数</li></ol><p>这里我们修改 id 为<em>payment-retrieval</em>，id 是区分流程的标识</p><p>然后修改 Name 为 “付款流程”</p><p>最后确保 <em>Executable</em> 是勾选的，只有<em>Executable</em>被勾选，流程才能执行</p><p><img src="http://img.shaochenfeng.com/20210526063821.png" alt="image"></p><ol><li>点击 <em>File &gt; Save File As..</em> 或者直接点击工具栏中的保存按钮，将流程保存到你喜欢的位置，命名为 <code>payment.bpmn</code></li></ol><blockquote><p>到此第一部分结束，如果想直接获取到现在为止的进度，可以使用如下命令</p><p>git checkout -f Step-1</p></blockquote><h2 id="3-用-java-或-NodeJS-实现外部任务"><a href="#3-用-java-或-NodeJS-实现外部任务" class="headerlink" title="3. 用 java 或 NodeJS 实现外部任务"></a>3. 用 java 或 NodeJS 实现外部任务</h2><p>在完成上面流程的编辑后，现在实现 “刷卡付款” 的业务逻辑</p><p>Camunda 可以使多种语言实现业务逻辑，本文将演示 java 和 nodejs 两种方式，你可以任意选择喜欢的一种</p><h3 id="a-使用-JAVA"><a href="#a-使用-JAVA" class="headerlink" title="a) 使用 JAVA"></a>a) 使用 JAVA</h3><p>需要 JAVA1.8+，maven（有的 IDE 自带），IDE</p><p>使用喜欢的 ide 创建一个 maven 项目，添加 maven 依赖如下</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.camunda.bpm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>camunda-external-task-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.15.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>编写主类，代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Desktop<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>camunda<span class="token punctuation">.</span>bpm<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ExternalTaskClient<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChargeCardWorker</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger LOGGER <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ChargeCardWorker<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ExternalTaskClient client <span class="token operator">=</span> ExternalTaskClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/engine-rest"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">asyncResponseTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 长轮询超时时间</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 订阅指定的外部任务</span>    client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"charge-card"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">lockDuration</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认锁定时间为20秒，这里修改为1秒</span>        <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>externalTask<span class="token punctuation">,</span> externalTaskService<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 将您的业务逻辑写在这</span>          <span class="token comment" spellcheck="true">// 获取流程变量</span>          String item <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> externalTask<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Long amount <span class="token operator">=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> externalTask<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Charging credit card with an amount of '"</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"'€ for the item '"</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"'..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              Desktop<span class="token punctuation">.</span><span class="token function">getDesktop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"https://docs.camunda.org/get-started/quick-start/complete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 完成任务ja</span>          externalTaskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>externalTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 ide 上的运行编译运行按钮运行</p><p>如果正常运行，则可以进入下一章了</p><blockquote><p>到此第二部分结束，如果想直接获取到现在为止的进度，可以使用如下命令</p><p>git checkout -f Step-2a</p></blockquote><h3 id="b-使用-NodeJS"><a href="#b-使用-NodeJS" class="headerlink" title="b) 使用 NodeJS"></a>b) 使用 NodeJS</h3><p>需要 NodeJS &gt;= v10</p><p>首先创建一个新的 NodeJS 项目</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> charge-card-worker<span class="token function">cd</span> ./charge-card-worker<span class="token function">npm</span> init -y</code></pre><p>添加 Camunda 外部任务依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> camunda-external-task-client-js<span class="token function">npm</span> <span class="token function">install</span> -D <span class="token function">open</span></code></pre><p>新建一个 JavaScript 文件，命名为 <code>worker.js</code>，代码如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> logger <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'camunda-external-task-client-js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> open <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 外部任务客户端的配置:</span><span class="token comment" spellcheck="true">//  - 'baseUrl': 流程引擎的url</span><span class="token comment" spellcheck="true">//  - 'logger': 自动记录的日志等级</span><span class="token comment" spellcheck="true">//  - 'asyncResponseTimeout': 长轮询的超时时间</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> baseUrl<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080/engine-rest'</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> logger<span class="token punctuation">,</span> asyncResponseTimeout<span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据配置创建一个新的外部任务客户端</span><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 订阅charge-card</span>client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'charge-card'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span> task<span class="token punctuation">,</span> taskService <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将您的业务逻辑写在这</span>  <span class="token comment" spellcheck="true">// 获取流程变量</span>  <span class="token keyword">const</span> amount <span class="token operator">=</span> task<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'amount'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> item <span class="token operator">=</span> task<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Charging credit card with an amount of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">€ for the item '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'...`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'https://docs.camunda.org/get-started/quick-start/success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 完成任务</span>  <span class="token keyword">await</span> taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行</p><p>如果正常运行，则可以进入下一章了</p><blockquote><p>到此第二部分结束，如果想直接获取到现在为止的进度，可以使用如下命令</p><p>git checkout -f Step-2b</p></blockquote><h2 id="4-部署流程"><a href="#4-部署流程" class="headerlink" title="4. 部署流程"></a>4. 部署流程</h2><p>下面我们将部署流程到流程引擎，然后发起流程，检查流程是否发起成功</p><h3 id="使用-Camunda-Modeler-部署流程"><a href="#使用-Camunda-Modeler-部署流程" class="headerlink" title="使用 Camunda Modeler 部署流程"></a>使用 Camunda Modeler 部署流程</h3><p>点击工具栏中的部署按钮可以将当前流程部署到流程引擎，点击部署按钮，输入<code>Deployment Name</code> 为 “Payment” ，输入下方<code>REST Endpoint</code> 为<code>http://localhost:8080/engine-rest</code> ，然后点击右下角 Deploy 部署</p><p><img src="http://img.shaochenfeng.com/20210527063619.png" alt="image"></p><p>如果收到成功提示，表示部署成功</p><p><img src="http://img.shaochenfeng.com/20210526073534.png" alt="image"></p><blockquote><p>关于部署的更多内容可以查看 <a href="https://blog.camunda.com/post/2019/01/camunda-modeler-3.0.0-0-released/#completely-reworked-deployment-tool">https://blog.camunda.com/post/2019/01/camunda-modeler-3.0.0-0-released/#completely-reworked-deployment-tool</a></p></blockquote><h3 id="使用-Cockpit-查看部署结果"><a href="#使用-Cockpit-查看部署结果" class="headerlink" title="使用 Cockpit 查看部署结果"></a>使用 Cockpit 查看部署结果</h3><p>在浏览器中打开 <a href="http://localhost:8080/camunda/app/cockpit/default/#/processes">http://localhost:8080/camunda/app/cockpit/default/#/processes</a> 使用账号 demo / demo 登录 ，可以看到刚部署的流程显示出来了</p><p><img src="http://img.shaochenfeng.com/20210526074054.png" alt="image"></p><h3 id="创建流程实例（发起流程）"><a href="#创建流程实例（发起流程）" class="headerlink" title="创建流程实例（发起流程）"></a>创建流程实例（发起流程）</h3><p>这里使用 Rest API 发起流程，所以需要一个接口测试工具（例如：Postman），或者也可以使用电脑自带的 curl</p><h4 id="a-curl"><a href="#a-curl" class="headerlink" title="a) curl"></a>a) curl</h4><p>在命令行中执行</p><pre class=" language-bash"><code class="language-bash">curl -H <span class="token string">"Content-Type: application/json"</span> -X POST -d <span class="token string">'{"variables": {"amount": {"value":555,"type":"long"}, "item": {"value":"item-xyz"} } }'</span> http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start</code></pre><p>如果能看到成功的返回结果，则流程发起成功</p><h4 id="b-Postman"><a href="#b-Postman" class="headerlink" title="b)Postman"></a>b)Postman</h4><p>在 url 中输入 <code>http://localhost:8080/engine-rest/process-definition/key/payment-retrieval/start</code></p><p>模式选择 POST</p><p>点击 Body，选择<code>raw</code>，并在右面选择<code>application/json</code></p><p>然后输入 Body 内容：</p><pre><code>{    "variables": {        "amount": {            "value":555,            "type":"long"        },        "item": {            "value": "item-xyz"        }    }}</code></pre><p>编辑完成后，结果这样：</p><p><img src="http://img.shaochenfeng.com/20210526075056.png" alt="image"></p><p>点击 Send 发送请求</p><p>如果能看到成功的返回结果，则流程发起成功</p><h2 id="5-添加人工任务"><a href="#5-添加人工任务" class="headerlink" title="5. 添加人工任务"></a>5. 添加人工任务</h2><p>在本章中，我们会将人工任务添加进流程中，让人参与到 BPMN 2.0 流程中来。</p><h3 id="添加人工任务节点"><a href="#添加人工任务节点" class="headerlink" title="添加人工任务节点"></a>添加人工任务节点</h3><p>首先打开 Camunda Modeler ，在左侧选择任务节点（圆角矩形），将它拖入 “付款请求” 和“刷卡付款”之间，重命名为“批准付款”</p><p><img src="http://img.shaochenfeng.com/20210527061007.png" alt="image"></p><p>点击刚创建的 “批准付款” 节点，然后点击节点右侧出现的扳手，将节点更改为人工任务（User Task）</p><p><img src="http://img.shaochenfeng.com/20210527061148.png" alt="image"></p><h3 id="配置人工任务"><a href="#配置人工任务" class="headerlink" title="配置人工任务"></a>配置人工任务</h3><p>下面我们将为人工任务配置表单：</p><p>点击 “批准付款节点”，在右侧的属性面板中点击 Forms（表单）选项卡，点击下面的加号，添加 3 个属性：</p><p><img src="http://img.shaochenfeng.com/20210527061619.png" alt="image"></p><p>属性 1：</p><ul><li><p>ID: amount</p></li><li><p>Type: long</p></li><li><p>Label: 金额</p></li></ul><p><img src="http://img.shaochenfeng.com/20210527062004.png" alt="image"></p><p>属性 2：</p><ul><li><p>ID: item</p></li><li><p>Type: string</p></li><li><p>Label: 项目</p></li></ul><p><img src="http://img.shaochenfeng.com/20210527062029.png" alt="image"></p><p>属性 3：</p><ul><li><p>ID: approved</p></li><li><p>Type: boolean</p></li><li><p>Label: 是否同意?</p></li></ul><p><img src="http://img.shaochenfeng.com/20210527062104.png" alt="image"></p><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><p>和上一章一样，使用 Camunda Modeler 工具栏上的上传按钮将流程上传到流程引擎中</p><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>打开任务列表（<a href="http://localhost:8080/camunda/app/tasklist/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8">http://localhost:8080/camunda/app/tasklist/），使用</a> demo / demo 登录</p><p>点击右上角的 <code>Start process</code> ，在弹出的对话框中选择 “付款流程”</p><p><img src="http://img.shaochenfeng.com/20210527062701.png" alt="image"></p><p>这时会弹出编辑流程变量的对话框，可以通过点击 Add a variable 按钮添加变量，这次我们先不添加，直接点击右下角 Start 启动流程</p><p><img src="http://img.shaochenfeng.com/20210527063005.png" alt="image"></p><p>这时，在任务列表应该就能看到刚创建的人工任务了，如果没有可以手动刷新一下</p><blockquote><p>部分用户这里看不到，可能是 All Tasks 过滤器没有自动添加，左侧显示为：</p><p><img src="http://img.shaochenfeng.com/20210527070002.png" alt="image"></p><p>这时点击 Add a simple filter 即可</p></blockquote><p>选择这个任务项，在右侧可以看到表单</p><p><img src="http://img.shaochenfeng.com/20210527065739.png" alt="image"></p><p>点击 Diagram 选项卡，可以看到高亮的节点就是当前进行中的节点</p><p><img src="http://img.shaochenfeng.com/20210527065754.png" alt="image"></p><p>接下来，我们将为流程带来一些变化，仅在金额足够大的时候进行人工审核，下一章：添加网关</p><blockquote><p>到此第三部分结束，如果想直接获取到现在为止的进度，可以使用如下命令</p><p>git checkout -f Step-3</p></blockquote><h2 id="6-添加网关"><a href="#6-添加网关" class="headerlink" title="6. 添加网关"></a>6. 添加网关</h2><p>本章中，我们将使用<strong>排他网关</strong>(<em>Exclusive Gateways</em>)，为流程添加分支，仅在金额足够大的时候进行人工审核</p><h3 id="添加两个网关"><a href="#添加两个网关" class="headerlink" title="添加两个网关"></a>添加两个网关</h3><p>首先打开 Camunda Modeler ，在左侧的工具架中找到网关（菱形），将它拖动到 “付款请求” 和“刷卡付款”之间，将 “批准付款” 向下移动再添加一个网关，调整流程，最后看起来类似这样：</p><p><img src="http://img.shaochenfeng.com/20210528064839.png" alt="image"></p><p>现在为新元素命名</p><p><img src="http://img.shaochenfeng.com/20210528065311.png" alt="image"></p><h3 id="配置网关"><a href="#配置网关" class="headerlink" title="配置网关"></a>配置网关</h3><p>接下来，我们选择 “&lt;1000” 的连线，打开属性面板，选择 “Condition Type” 为“Expression”，这里我们使用<a href="https://docs.camunda.org/manual/latest/user-guide/process-engine/expression-language/">JAVA 统一表达式语言</a>编写条件，这里要做的是在金额小于 1000 时直接刷卡付款，则输入表达式 <code>${amount&lt;1000}</code></p><p><img src="http://img.shaochenfeng.com/20210528070903.png" alt="image"></p><p>同样的，对另一条线也进行配置，表达式为<code>${amount&gt;=1000}</code></p><p><img src="http://img.shaochenfeng.com/20210528071006.png" alt="image"></p><p>yes 的表达式是<code>${approved}</code></p><p><img src="http://img.shaochenfeng.com/20210528071237.png" alt="image"></p><p>no 的表达式是<code>${!approved}</code></p><p><img src="http://img.shaochenfeng.com/20210528071249.png" alt="image"></p><h3 id="部署流程-1"><a href="#部署流程-1" class="headerlink" title="部署流程"></a>部署流程</h3><p>和上一章一样，使用 Camunda Modeler 工具栏上的上传按钮将流程上传到流程引擎中</p><h3 id="测试一下-1"><a href="#测试一下-1" class="headerlink" title="测试一下"></a>测试一下</h3><p>打开任务列表（<a href="http://localhost:8080/camunda/app/tasklist/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8">http://localhost:8080/camunda/app/tasklist/），使用</a> demo / demo 登录</p><p>点击右上角的 <code>Start process</code> ，在弹出的对话框中选择 “付款流程”</p><p>在上一章中，我们直接点击 Start，但这次我们要增加几个变量来测试动态的流程</p><p><img src="http://img.shaochenfeng.com/20210528072028.png" alt="image"></p><p>试着更改 <code>amount</code> 的值，查看对流程执行顺序的影响</p><blockquote><p>到此第四部分结束，如果想直接获取到现在为止的进度，可以使用如下命令</p><p>git checkout -f Step-4</p></blockquote><h2 id="7-决策自动化"><a href="#7-决策自动化" class="headerlink" title="7. 决策自动化"></a>7. 决策自动化</h2><p>在本章中，我们将使用 DMN 为流程添加一个业务规则</p><h3 id="将业务规则添加到流程中"><a href="#将业务规则添加到流程中" class="headerlink" title="将业务规则添加到流程中"></a>将业务规则添加到流程中</h3><p>打开 Camunda Modeler，点击 “批准付款”，在右面的扳手菜单中，将类型改为 “<strong>Business Rule Task</strong> ”（业务规则任务）</p><p><img src="http://img.shaochenfeng.com/20210528073900.png" alt="image"></p><p>下一步，将属性面板中的 <code>Implementation</code> 选择为<code>DMN</code></p><p>输入 <code>Decision Ref</code> 为 <code>approve-payment</code></p><p>为了将决策的结果存入流程变量，我们还需要编辑结果变量<code>Result Variable</code> 为<code>approved</code></p><p>结果类型 <code>Map Decision Result</code> 选择为 <code>singleEntry</code> ，最后结果如下：</p><p><img src="http://img.shaochenfeng.com/20210528074516.png" alt="image"></p><p>最后保存并部署到流程引擎</p><h3 id="使用-amunda-Modeler-创建-DMN-表"><a href="#使用-amunda-Modeler-创建-DMN-表" class="headerlink" title="使用 amunda Modeler 创建 DMN 表"></a>使用 amunda Modeler 创建 DMN 表</h3><p>点击 <em>File &gt; New File &gt; DMN Diagram</em> 创建一个新的 DMN</p><p><img src="http://img.shaochenfeng.com/20210528074752.png" alt="image"></p><p>现在画布上已经存在一个决策元素了，选择它，然后在右侧属性面板中更改 Id 和 Name，这里的 Id 需要和流程中的<code>Decision Ref</code>属性一致，这次我们输入 Id 为<code>approve-payment</code></p><p><img src="http://img.shaochenfeng.com/20210528075445.png" alt="image"></p><p>接下来，点击决策元素左上角的表格按钮，创建新的 DMN 表</p><p><img src="http://img.shaochenfeng.com/20210528075559.png" alt="image"></p><h3 id="编辑-DMN-表"><a href="#编辑-DMN-表" class="headerlink" title="编辑 DMN 表"></a>编辑 DMN 表</h3><p>首先编辑输入参数，在本例中，为了简单，我们依据项目名进行判断，规则可以使用 <em>FEEL 表达式</em>、<em>JUEL</em> 或者 <em>Script</em> 书写，详情可以阅读<a href="https://docs.camunda.org/manual/latest/user-guide/dmn-engine/expressions-and-scripts/">DMN 引擎中的表达式</a></p><p>双击表格中的<em>Input</em>，编辑第一个输入参数</p><p>Label : 项目</p><p>Expression : item</p><p><img src="http://img.shaochenfeng.com/20210528081127.png" alt="image"></p><p>下面，设置输入参数，双击<em>Output</em>编辑</p><p>Label : 是否同意</p><p>Name: approved</p><p>Type : boolean</p><p><img src="http://img.shaochenfeng.com/20210528081537.png" alt="image"></p><p>下面，我们点击左侧的蓝色加号，添加一些规则，最后类似这样：</p><p><img src="http://img.shaochenfeng.com/20210528083218.png" alt="image"></p><h3 id="部署-DMN-表"><a href="#部署-DMN-表" class="headerlink" title="部署 DMN 表"></a>部署 DMN 表</h3><p>点击顶部的部署按钮，将 DMN 部署到流程引擎中</p><p><img src="http://img.shaochenfeng.com/20210528081952.png" alt="image"></p><h3 id="测试一下-2"><a href="#测试一下-2" class="headerlink" title="测试一下"></a>测试一下</h3><p>现在打开 <a href="http://localhost:8080/camunda/app/cockpit/">http://localhost:8080/camunda/app/cockpit/</a> ，使用 demo/demo 登录，可以看到决策定义增加了一个，点击进去可以看到刚才编辑的 DMN</p><p><img src="http://img.shaochenfeng.com/20210528082216.png" alt="image"></p><p>接下来，打开 <a href="http://localhost:8080/camunda/app/tasklist/">http://localhost:8080/camunda/app/tasklist/</a> ，使用 demo/demo 登录，点击 Start process 按钮，使用以下参数启动：</p><p><img src="http://img.shaochenfeng.com/20210528082619.png" alt="image"></p><p>再点击一次 Start process 按钮，使用如下参数启动：</p><p><img src="http://img.shaochenfeng.com/20210528082703.png" alt="image"></p><p>这里，我们改变了输入的 item，下面我们打开 <a href="http://localhost:8080/camunda/app/cockpit/">http://localhost:8080/camunda/app/cockpit/</a> 点击 <em>Decision Definitions</em> ，可以看到刚才创建的两个流程实例，点击查看 “批准付款” 的决策情况</p><p><img src="http://img.shaochenfeng.com/20210528083538.png" alt="image"></p><blockquote><p>到此第五部分结束，如果想直接获取到现在为止的进度，可以使用如下命令</p><p>git checkout -f Step-5</p></blockquote><blockquote><p>恭喜：你已经完成了快速入门部分，接下来可以阅读<a href="https://docs.camunda.org/manual/latest/">Camunda 文档（英文）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Camunda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Camunda </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="posts/35233.html"/>
      <url>posts/35233.html</url>
      
        <content type="html"><![CDATA[<h1 id="React基础知识点"><a href="#React基础知识点" class="headerlink" title="React基础知识点"></a>React基础知识点</h1><h2 id="什么是React"><a href="#什么是React" class="headerlink" title="什么是React"></a>什么是React</h2><p>React是一个用于构建用户界面的javaScript库，起源于facebook的内部项目，后续在13年开源了出来</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>声明式</li></ul><p>你只需要描述UI看起来是什么样式，就跟写HTML一样，React负责渲染UI</p><ul><li>基于组件</li></ul><p>组件时React最重要的内容，组件表示页面中的部分内容</p><ul><li>学习一次，随处使用</li></ul><p>使用React可以开发Web应用，使用React可以开发移动端，可以开发VR应用</p><h2 id="React基本使用"><a href="#React基本使用" class="headerlink" title="React基本使用"></a>React基本使用</h2><h3 id="React的安装"><a href="#React的安装" class="headerlink" title="React的安装"></a>React的安装</h3><p>npm i react react-dom </p><ul><li>react 包是核心，提供创建元素，组件等功能</li><li>react-dom 包提供DOM相关功能</li></ul><h3 id="React的使用"><a href="#React的使用" class="headerlink" title="React的使用"></a>React的使用</h3><ul><li>引入react和react-dom的两个js文件</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react-dom/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>创建React元素</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建元素节点</span><span class="token comment" spellcheck="true">// 1. 元素名称</span><span class="token comment" spellcheck="true">// 2. 元素属性 传递的是个对象</span><span class="token comment" spellcheck="true">// 3. 元素内容</span><span class="token keyword">let</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'hellow react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>渲染到页面</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 渲染到页面</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> root<span class="token punctuation">)</span></code></pre><h2 id="React脚手架"><a href="#React脚手架" class="headerlink" title="React脚手架"></a>React脚手架</h2><h3 id="React脚手架意义"><a href="#React脚手架意义" class="headerlink" title="React脚手架意义"></a>React脚手架意义</h3><ul><li>脚手架是开发现代Web应用的必备</li><li>充分利用 Webpack，Babel，ESLint等工具辅助项目开发</li><li>零配置，无需手动配置繁琐的工具即可使用</li><li>关注业务，而不是工具配置</li></ul><h3 id="使用React脚手架初始化项目"><a href="#使用React脚手架初始化项目" class="headerlink" title="使用React脚手架初始化项目"></a>使用React脚手架初始化项目</h3><ul><li>初始化项目，命令： npx create-react-app my-pro<ul><li>npx 目的：提升包内提供的命令行工具的使用体验</li><li>原来：先安装脚手架包，再使用这个包中提供的命令</li><li>现在：无需安装脚手架包，就可以直接使用这个包提供的命令</li><li>create-react-app  这个是脚手架名称 不能随意更改</li><li>my-pro  自己定义的项目名称</li></ul></li><li>启动项目，在项目根目录执行命令： npm start</li></ul><p>yarn命令简介</p><ul><li>yarn 是Facebook发布的包管理器，可以看做是npm的替代品，功能与npm相同</li><li>yarn具有快速，可靠和安全的特点</li><li>初始化新项目：yarn init</li><li>安装包： yarn add 包名称</li><li>安装项目依赖： yarn</li></ul><h3 id="脚手架中使用React"><a href="#脚手架中使用React" class="headerlink" title="脚手架中使用React"></a>脚手架中使用React</h3><ul><li>导入react和react-dom两个包</li></ul><pre class=" language-react"><code class="language-react">import React from 'react'import ReactDOM from 'react-dom'</code></pre><ul><li>创建元素</li></ul><pre class=" language-react"><code class="language-react">let h1 = React.createElement('h1',null,'我是标题')</code></pre><ul><li>渲染到页面</li></ul><pre class=" language-react"><code class="language-react">ReactDOM.render(h1,document.getElementById('root'))</code></pre><h1 id="JSX的使用"><a href="#JSX的使用" class="headerlink" title="JSX的使用"></a>JSX的使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="JSX产生的原因"><a href="#JSX产生的原因" class="headerlink" title="JSX产生的原因"></a>JSX产生的原因</h4><p>由于通过createElement()方法创建的React元素有一些问题，代码比较繁琐，结构不直观，无法一眼看出描述的结构，不优雅，用户体验不爽</p><h4 id="JSX的概述"><a href="#JSX的概述" class="headerlink" title="JSX的概述"></a>JSX的概述</h4><p>JSX是JavaScript XML 的简写，表示在JavaScript代码中写HTML格式的代码</p><p>优势：声明式语法更加直观，与HTML结构相同，降低了学习成本，提升开发效率</p><h2 id="简单入门使用"><a href="#简单入门使用" class="headerlink" title="简单入门使用"></a>简单入门使用</h2><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>使用JSX语法创建react元素</li></ul><pre class=" language-react"><code class="language-react">let h1 = <h1>我是通过JSX创建的元素</h1></code></pre><ul><li>使用ReactDOM来渲染元素</li></ul><pre class=" language-react"><code class="language-react">ReactDOM.render(h1,document.getElementById('root'))</code></pre><h4 id="为什么在脚手架中可以使用JSX语法"><a href="#为什么在脚手架中可以使用JSX语法" class="headerlink" title="为什么在脚手架中可以使用JSX语法"></a>为什么在脚手架中可以使用JSX语法</h4><ul><li>JSX 不是标准的ECMAScript语法，它是ECMAScript的语法拓展</li><li>需要使用babel编译处理后，才能在浏览器环境中使用</li><li>create-react-app脚手架中已经默认有该配置，无需手动配置</li><li>编译JSX语法的包： @bable/preset-react</li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>React元素的属性名使用驼峰命名法</li><li>特殊属性名：class -&gt; className，for -&gt; htmlFor，tabindex -&gt; tabIndex</li><li>如果没有子节点的React元素可以用 <code>/&gt;</code> 来结束</li><li>推荐：使用 小括号包裹JSX，从而避免JS中自动插入分号报错</li></ul><h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><p>JSX是来描述页面的结构，我们一般在编写业务逻辑渲染页面的时候，需要涉及到传递值，调用函数，判断条件，循环等，这一些在JSX中都能得到支持</p><h4 id="嵌入JS表达式"><a href="#嵌入JS表达式" class="headerlink" title="嵌入JS表达式"></a>嵌入JS表达式</h4><p>语法：{JavaScritp表达式}</p><p>例子：</p><pre class=" language-react"><code class="language-react">let content = '插入的内容'let h1 = <h1>我是通过JSX创建的元素+ {content}</h1></code></pre><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ul><li>只要是合法的js表达式都可以进行嵌入</li><li>JSX自身也是js表达式</li><li>注意：js中的对象是一个例外，一般只会出现在style属性中</li><li>注意：在{}中不能出现语句</li></ul><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>根据不同的条件来渲染不同的JSX结构</p><pre class=" language-react"><code class="language-react">let isLoading = truelet loading = ()=>{    if(isLoading){        return <div>Loading...</div>    }    return <div>加载完成</div>}</code></pre><p>可以发现，写JSX的条件渲染与我们之前编写代码的逻辑是差不多的，根据不同的判断逻辑，返回不同的 JSX结构，然后渲染到页面中</p><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><ul><li>如果需要渲染一组数据，我们应该使用数组的 map () 方法</li><li>注意：渲染列表的时候需要添加key属性，key属性的值要保证唯一</li><li>原则：map()遍历谁，就给谁添加key属性</li><li>注意：尽量避免使用索引号作为key</li></ul><pre class=" language-react"><code class="language-react">let arr = [{    id:1,    name:'三国演义'},{    id:2,    name:'水浒传'},{    id:3,    name:'西游记'},{    id:4,    name:'红楼梦'}]let ul = (<ul>    {arr.map(item => <li key={item.id}>{item.name}</li>)}</ul>)ReactDOM.render(ul,document.getElementById('root'))</code></pre><h4 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h4><h5 id="行内样式-style"><a href="#行内样式-style" class="headerlink" title="行内样式 -style"></a>行内样式 -style</h5><p>在style里面我们通过对象的方式传递数据</p><pre class=" language-react"><code class="language-react"><li key={item.id} style={{'color': 'red',"backgroundColor": 'pink'}}>{item.name}</li></code></pre><p>这种方式比较的麻烦，不方便进行阅读，而且还会导致代码比较的繁琐</p><h5 id="类名-className"><a href="#类名-className" class="headerlink" title="类名 -className"></a>类名 -className</h5><p>创建CSS文件编写样式代码</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">}</span></code></pre><p>在js中进行引入，然后设置类名即可</p><pre class=" language-react"><code class="language-react">import './css/index.css'<li className='container' key={item.id} style={{'color': 'red',"backgroundColor": 'pink'}}>{item.name}</li></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>JSX是React的核心内容</li><li>JSX表示在JS代码中写HTML结构，是React声明式的体现</li><li>使用JSX配合嵌入的JS表达式、条件渲染、列表渲染、可以描述任意UI结构</li><li>推荐使用className的方式给JSX添加样式</li><li>React完全利用JS语言自身的能力来编写UI，而不是造轮子增强HTML功能</li></ul><h1 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h1><h2 id="React组件介绍"><a href="#React组件介绍" class="headerlink" title="React组件介绍"></a>React组件介绍</h2><ul><li>组件是React的一等公民，使用React就是在用组件</li><li>组件表示页面中的部分功能</li><li>组合多个组件实现完整的页面功能</li><li>特点：可复用、独立、可组合</li></ul><p><img src="https://oss.weistuday.com/img/20210602160520.png"></p><h2 id="组件的创建方式"><a href="#组件的创建方式" class="headerlink" title="组件的创建方式"></a>组件的创建方式</h2><h3 id="函数创建组件"><a href="#函数创建组件" class="headerlink" title="函数创建组件"></a>函数创建组件</h3><ul><li>函数组件：使用JS的函数创建组件</li><li><strong>约定1：</strong>函数名称必须以大写字母开头</li><li><strong>约定2：</strong>函数组件必须有返回值，表示该组件的结构</li><li>如果返回值为null，表示不渲染任何内容</li></ul><h4 id="示例demo"><a href="#示例demo" class="headerlink" title="示例demo"></a>示例demo</h4><p>编写函数组件</p><pre class=" language-react"><code class="language-react">function Hello() {    return (        <div>这是第一个函数组件</div>    )}</code></pre><p>利用ReactDOM.render()进行渲染</p><pre class=" language-react"><code class="language-react">ReactDOM.render(<Hello />,document.getElementById('root'))</code></pre><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><ul><li>使用ES6语法的class创建的组件</li><li>约定1：类名称也必须要大写字母开头</li><li>约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法或者属性</li><li>约定3：类组件必须提供 render 方法</li><li>约定4：render方法中必须要有return返回值</li></ul><h4 id="示例demo-1"><a href="#示例demo-1" class="headerlink" title="示例demo"></a>示例demo</h4><p>创建class类，继承React.Component，在里面提供render方法，在return里面返回内容</p><pre class=" language-react"><code class="language-react">class Hello extends React.Component{    render(){        return (            <div>这是第一个类组件</div>        )    }}</code></pre><p>通过ReactDOM进行渲染</p><pre class=" language-react"><code class="language-react">ReactDOM.render(<Hello />,document.getElementById('root'))</code></pre><h3 id="抽离成单独的JS文件"><a href="#抽离成单独的JS文件" class="headerlink" title="抽离成单独的JS文件"></a>抽离成单独的JS文件</h3><ul><li>思考：项目中组件多了之后，该如何组织这些组件？</li><li>选择一：将所有的组件放在同一个JS文件中</li><li>选择二：将每个组件放到单独的JS文件中</li><li><strong>组件作为一个独立的个体，一般都会放到一个单独的JS文件中</strong></li></ul><h4 id="示例demo-2"><a href="#示例demo-2" class="headerlink" title="示例demo"></a>示例demo</h4><ul><li>创建Hello.js</li><li>在Hello.js 中导入React，创建组件，在Hello.js中导出</li></ul><pre class=" language-react"><code class="language-react">import React from 'react'export default class extends React.Component {    render(){        return (            <div>单独抽离出来的 Hello</div>        )    }}</code></pre><ul><li>在index.js中导入Hello组件，渲染到页面</li></ul><pre class=" language-react"><code class="language-react">import Hello from './js/Hello'ReactDOM.render(<Hello />,document.getElementById('root'))</code></pre><h2 id="React事件处"><a href="#React事件处" class="headerlink" title="React事件处"></a>React事件处</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li>React事件绑定语法与DOM事件语法相似</li><li>语法：on+事件名称=事件处理函数，比如  onClick = function(){}</li><li>注意：React事件采用驼峰命名法</li></ul><h4 id="示例demo-3"><a href="#示例demo-3" class="headerlink" title="示例demo"></a>示例demo</h4><pre class=" language-react"><code class="language-react">export default class extends React.Component {    clickHandle(e){        console.log('点了')    }    render(){        return (            <div><button onClick = {this.clickHandle}>点我点我点我</button></div>        )    }}</code></pre><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>在React中绑定事件与原生很类似</li><li>需要注意点在于，在React绑定事件需要遵循驼峰命名法</li><li>类组件与函数组件绑定事件是差不多的，只是在类组件中绑定事件函数的时候需要用到this，代表指向当前的类的引用，在函数中不需要调用this</li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul><li>可以通过事件处理函数的参数获取到事件对象</li><li>React中的事件对象叫做：合成事件</li><li>合成事件：兼容所有浏览器，无需担心跨浏览器兼容问题</li><li>除兼容所有浏览器外，它还拥有和浏览器原生事件相同的接口，包括 <code>stopPropagation()</code>和 <code>preventDefault()</code></li><li>如果你想获取到原生事件对象，可以通过 <code>nativeEvent</code> 属性来进行获取</li></ul><h4 id="示例demo-4"><a href="#示例demo-4" class="headerlink" title="示例demo"></a>示例demo</h4><pre class=" language-react"><code class="language-react">export default class extends React.Component {    clickHandle(e){        // 获取原生事件对象        console.log(e.nativeEvent)    }    render(){        return (            <div><button onClick = {this.clickHandle}>点我点我点我</button></div>        )    }}</code></pre><h3 id="支持的事件"><a href="#支持的事件" class="headerlink" title="支持的事件"></a>支持的事件</h3><ul><li><p>Clipboard Events  剪切板事件</p><ul><li>事件名 ：onCopy onCut onPaste</li><li>属性     ：DOMDataTransfer clipboardData</li></ul></li><li><p>compositionEvent  复合事件</p><ul><li>事件名： onCompositionEnd onCompositionStart onCompositionUpdate</li><li>属性： string data</li></ul></li><li><p>Keyboard Events  键盘事件</p><ul><li>事件名：onKeyDown onKeyPress onKeyUp</li><li>属性： 例如 number keyCode  太多就不一一列举</li></ul></li><li><p>Focus Events  焦点事件  （这些焦点事件在 React DOM 上的所有元素都有效，不只是表单元素）</p><ul><li>事件名： onFocus onBlur</li><li>属性： DOMEventTarget relatedTarget</li></ul></li><li><p>Form Events  表单事件</p><ul><li>事件名： onChange onInput onInvalid onSubmit</li></ul></li><li><p>Mouse Events  鼠标事件</p><ul><li><p>事件名：</p><pre class=" language-react"><code class="language-react">onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExitonDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeaveonMouseMove onMouseOut onMouseOver onMouseUp</code></pre></li></ul></li><li><p>Pointer Events  指针事件</p><ul><li><p>事件名：</p><pre class=" language-react"><code class="language-react">onPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCaptureonLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut</code></pre></li></ul></li><li><p>Selection Events  选择事件</p><ul><li>事件名：onSelect</li></ul></li><li><p>Touch Events  触摸事件</p><ul><li>事件名：onTouchCancel onTouchEnd onTouchMove onTouchStart</li></ul></li><li><p>UI Events  UI 事件</p><ul><li>事件名： onScroll</li></ul></li><li><p>Wheel Events  滚轮事件</p><ul><li><p>事件名：onWheel</p></li><li><p>属性： </p><pre class=" language-react"><code class="language-react">number deltaModenumber deltaXnumber deltaYnumber deltaZ</code></pre></li></ul></li><li><p>Media Events  媒体事件</p><ul><li><p>事件名：</p><pre class=" language-react"><code class="language-react">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncryptedonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlayonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspendonTimeUpdate onVolumeChange onWaiting</code></pre></li></ul></li><li><p>Image Events 图像事件</p><ul><li>事件名：onLoad onError</li></ul></li><li><p>Animation Events 动画事件</p><ul><li>事件名：onAnimationStart onAnimationEnd onAnimationIteration</li></ul></li><li><p>Transition Events 过渡事件</p><ul><li>事件名：onTransitionEnd</li></ul></li><li><p>Other Events  其他事件</p><ul><li>事件名： onToggle</li></ul></li></ul><h2 id="有状态组件和无状态组件"><a href="#有状态组件和无状态组件" class="headerlink" title="有状态组件和无状态组件"></a>有状态组件和无状态组件</h2><ul><li>函数组件又叫做 无状态组件，类组件又叫做 有状态组件</li><li>状态(state) 即数据</li><li>函数组件没有自己的状态，只负责数据展示</li><li>类组件有自己的状态，负责更新UI，让页面动起来</li></ul><p><img src="https://oss.weistuday.com/img/20210602160530.png"></p><h2 id="State和SetState"><a href="#State和SetState" class="headerlink" title="State和SetState"></a>State和SetState</h2><h3 id="state基本使用"><a href="#state基本使用" class="headerlink" title="state基本使用"></a>state基本使用</h3><ul><li>状态(state)即数据，是组件内部的私有数据，只能在组件内部使用</li><li>state的值是对象，表示一个组件中可以有多个数据</li><li>通过this.state来获取状态</li></ul><h4 id="示例demo-5"><a href="#示例demo-5" class="headerlink" title="示例demo"></a>示例demo</h4><pre class=" language-react"><code class="language-react">export default class extends React.Component {    constructor(){        super()        // 第一种初始化方式        this.state = {            count : 0        }    }    // 第二种初始化方式    state = {        count:1    }    render(){        return (            <div>计数器 :{this.state.count}</div>        )    }}</code></pre><h3 id="setState-修改状态"><a href="#setState-修改状态" class="headerlink" title="setState() 修改状态"></a>setState() 修改状态</h3><ul><li>状态是可变的</li><li>语法：this.setState({要修改的数据})</li><li><strong>注意：不要直接修改state中的值，这是错误的</strong></li><li>setState() 作用：1.修改 state 2.更新UI</li><li>思想：数据驱动视图</li></ul><p><img src="https://oss.weistuday.com/img/20210602160444.png"></p><h4 id="示例demo-6"><a href="#示例demo-6" class="headerlink" title="示例demo"></a>示例demo</h4><pre class=" language-react"><code class="language-react">export default class extends React.Component {    // 第二种初始化方式    state = {        count:1    }    render(){        return (            <div>                <div>计数器 :{this.state.count}</div>                <button onClick={() => {                     this.setState({                         count: this.state.count+1                         })                   }}>+1</button>            </div>        )    }}</code></pre><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>修改state里面的值我们需要通过 this.setState() 来进行修改</li><li>React底层会有监听，一旦我们调用了setState导致了数据的变化，就会重新调用一次render方法，重新渲染当前组件</li></ul><h3 id="抽取事件处理函数"><a href="#抽取事件处理函数" class="headerlink" title="抽取事件处理函数"></a>抽取事件处理函数</h3><ul><li>当我们把上面代码的事件处理程序抽取出来后，会报错，找不到this</li></ul><p><img src="https://oss.weistuday.com/img/20210602160448.png"></p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>在JSX中我们写的事件处理函数可以找到this，原因在于在JSX中我们利用箭头函数，箭头函数是不会绑定this，所以会向外一层去寻找，外层是render方法，在render方法里面的this刚好指向的是当前实例对象</li></ul><h2 id="事件绑定this指向"><a href="#事件绑定this指向" class="headerlink" title="事件绑定this指向"></a>事件绑定this指向</h2><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li>利用箭头函数自身不绑定this的特点</li></ul><p><img src="https://oss.weistuday.com/img/20210602160454.png"></p><h3 id="利用bind方法"><a href="#利用bind方法" class="headerlink" title="利用bind方法"></a>利用bind方法</h3><p>利用原型bind方法是可以更改函数里面this的指向的，所以我们可以在构造中调用bind方法，然后把返回的值赋值给我们的函数即可</p><pre class=" language-react"><code class="language-react">class App extends React.Component {  constructor() {    super()    ...    // 通过bind方法改变了当前函数中this的指向    this.onIncrement = this.onIncrement.bind(this)  }  // 事件处理程序  onIncrement() {    ...  }  render() {    ...  }}</code></pre><h3 id="class的实例方法"><a href="#class的实例方法" class="headerlink" title="class的实例方法"></a>class的实例方法</h3><ul><li>利用箭头函数形式的class实例方法</li><li>注意：该语法是实验性语法，但是，由于babel的存在可以使用</li></ul><pre class=" language-react"><code class="language-react">  // 事件处理程序  onIncrement = () => {    console.log('事件处理程序中的this：', this)    this.setState({      count: this.state.count + 1    })  }</code></pre><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul><li>推荐：使用class的实例方法，也是依赖箭头函数不绑定this的原因</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5</title>
      <link href="posts/22726.html"/>
      <url>posts/22726.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、参考资料"><a href="#1、参考资料" class="headerlink" title="1、参考资料"></a>1、参考资料</h2><ol><li><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷 - Spring5 框架最新版教程（idea 版）</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1uE411C7CW">雷丰阳 spring、springmvc、mybatis、spring 一站式学习</a></p></li></ol><h2 id="2、Spring-概述"><a href="#2、Spring-概述" class="headerlink" title="2、Spring 概述"></a>2、Spring 概述</h2><h3 id="2-1、Spring-框架概述"><a href="#2-1、Spring-框架概述" class="headerlink" title="2.1、Spring 框架概述"></a>2.1、Spring 框架概述</h3><blockquote><p><strong>Spring 是轻量级的开源的 JavaEE 框架</strong></p></blockquote><p>Spring 为简化企业级开发而生，使用 Spring，Javabean 就可以实现很多以前要靠 EJB 才能实现的功能</p><p><strong>Spring 有两个核心部分：IOC 和 AOP</strong></p><ol><li><p>IOC（Inversion of Control，即控制反转）是面向对象编程中的一种设计原则，可以用来降低计算机代码之间的耦合度，其中最常见的方式叫做依赖注入（Dependency Injection，简称 DI）。Spring 就是采用依赖注入的方式，为我们管理容器中的 bean 实例对象</p></li><li><p>AOP（Aspect Oriented Programming，即面向切面）可以在不修改源代码的前提下，通过预编译方式和运行期间动态代理方式实现对原有代码的增强（添加新功能）</p></li></ol><blockquote><p><strong>Spring 的优良特性</strong></p></blockquote><ol><li><p><strong>非侵入式</strong>：基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API</p></li><li><p><strong>依赖注入</strong>：DI——Dependency Injection，反转控制 (IOC) 最经典的实现</p></li><li><p><strong>面向切面编程</strong>：Aspect Oriented Programming——AOP</p></li><li><p><strong>容器</strong>：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</p></li><li><p><strong>组件化</strong>：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。</p></li><li><p><strong>一站式</strong>：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表述层的 SpringMVC 和持久层的 Spring JDBC）。</p></li></ol><blockquote><p><strong><a href="https://spring.io/projects/spring-framework#learn">Spring 目前的版本</a></strong></p></blockquote><p>目前已经更新到 Spring 5.3.3 版本，不过我还是与老师使用同一个版本吧，老师讲课使用的是 Spring 5.2.6 版本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/de4f3a0eceedbc16152b2218a8060546.png" alt="image"></p><blockquote><p><strong><a href="https://repo.spring.io/release/org/springframework/spring/">Spring jar 包下载地址</a></strong></p></blockquote><p>老师上课手动导入 jar 包的依赖，我们还是使用 maven 引入相关依赖吧~</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a77bd2fe622c747f946b40777dccdd68.png" alt="image"></p><blockquote><p><strong>Spring 模块</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/018d7fd67a02e6e22fe678950b80228d.png" alt="image"></p><h3 id="2-2、Spring-入门案例"><a href="#2-2、Spring-入门案例" class="headerlink" title="2.2、Spring 入门案例"></a>2.2、Spring 入门案例</h3><blockquote><p><strong>0、入门案例的目标</strong></p></blockquote><p>目标：使用 Spring 创建 bean 实例对象，并为其属性赋值</p><blockquote><p><strong>1、创建 maven 工程</strong></p></blockquote><p>因为后续测试还会创建其他 maven 工程，因此我们先创建一个 maven 父工程（spring-learn），再创建本章对应的 maven 子工程（spring-getting-start）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/63e548fd99deee2e759549d6fb2b7f62.png" alt="image"></p><blockquote><p><strong>2、引入相关依赖</strong></p></blockquote><p>在 spring-getting-start 工程中引入 <code>spring-beans</code>、<code>spring-context</code>、<code>spring-core</code>、<code>spring-expression</code> 的依赖，这四个依赖正是 Spring Core Container 所需的依赖，此外 Springn 还需依赖 <code>commons-logging</code> 实现日志功能</p><p><img src="https://img-blog.csdnimg.cn/img_convert/abf562056a04835699524e92cc91c669.png" alt="image"></p><p>如下是 pom.xml 中引入的依赖配置，为了测试方便，我们引入了 <code>spring-test</code> 和 <code>jupiter</code> 相关依赖</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;        &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;        &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;        &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-logging&lt;/groupId&gt;        &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;        &lt;version&gt;1.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;        &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;        &lt;version&gt;RELEASE&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><blockquote><p><strong>3、创建实体类</strong></p></blockquote><p>创建 <code>Student</code> 实体类</p><pre><code>public class Student {    private Integer stuId;    private String stuName;    public Student() {    }    public Student(Integer stuId, String stuName) {        this.stuId = stuId;        this.stuName = stuName;    }    public Integer getStuId() {        return stuId;    }    public String getStuName() {        return stuName;    }    public void setStuId(Integer stuId) {        this.stuId = stuId;    }    public void setStuName(String stuName) {        this.stuName = stuName;    }    @Override    public String toString() {        return "Student{" +                "stuId=" + stuId +                ", stuName='" + stuName + '\'' +                '}';    }}</code></pre><blockquote><p><strong>4、编写 Spring 配置文件</strong></p></blockquote><p>在 resources 包下点击鼠标右键，选择【New】–&gt;【XML Configuration File】–&gt;【Spring Config】，注：resource 包下的配置文件在执行时会被拷贝至类路径的根目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe8f05823c716045d5860baee9d82b4b.png" alt="image"></p><p>添加如下配置：创建 Student 对象的实例，并注入属性的值</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;bean id="student" class="com.oneby.entity.Student"&gt;        &lt;property name="stuId" value="007"/&gt;        &lt;property name="stuName" value="Oneby"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><blockquote><p><strong>5、编写测试代码</strong></p></blockquote><p>测试代码：首先创建 <code>ClassPathXmlApplicationContext</code> 对象，XML 配置文件的路径为类路径下的 <code>getting-start.xml</code>；然后获取容器中的 Student 对象，并打印此 Student 对象</p><pre><code>public class SpringTest {    @Test    public void gettingStart() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("getting-start.xml");        Student student = (Student) iocContainer.getbean("student");        System.out.println(student);    }}</code></pre><p>测试结果：从 Spring 容器中获取到的 Student 对象，其属性值已经被注入</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e4d64aae4f6927e82849be4a85e3dfc.png" alt="image"></p><p><strong>关于 <code>jupiter</code> 更加拉风的写法</strong></p><p>使用 <code>@SpringJUnitConfig(locations = "classpath:getting-start.xml")</code> 注解指明 Spring 单元测试的配置文件路径，再使用 <code>@Autowired</code> 注解自动装配容器中的 Student 对象</p><pre><code>@SpringJUnitConfig(locations = "classpath:getting-start.xml")public class SpringTest {    @Autowired    private Student student;    @Test    public void gettingStart() {        System.out.println(student);    }}</code></pre><p>测试结果：为啥这个就输出了一大堆日志信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0fb58c8df6bc0aadf959efdc109a946e.png" alt="image"></p><p><strong>测试结果</strong>：Spring 在创建 IOC 容器时，就已经完成了 bean 的创建和属性的赋值</p><h2 id="3、IOC-容器和-bean-管理"><a href="#3、IOC-容器和-bean-管理" class="headerlink" title="3、IOC 容器和 bean 管理"></a>3、IOC 容器和 bean 管理</h2><h3 id="3-1、IOC-和-DI-的关系"><a href="#3-1、IOC-和-DI-的关系" class="headerlink" title="3.1、IOC 和 DI 的关系"></a>3.1、IOC 和 DI 的关系</h3><blockquote><p><strong>IOC(Inversion of Control)：反转控制</strong></p></blockquote><p>早在 2004 年，Martin Fowler 就提出了 “哪些方面的控制被反转了？” 这个问题。他总结出是依赖对象的获得被反转了，因为大多数应用程序都是由两个或是更多的类通过彼此的合作来实现企业逻辑，这使得每个对象都需要获取与其合作的对象（也就是它所依赖的对象）的引用。如果这个获取过程要靠自身实现，那么这将导致代码高度耦合并且难以维护和调试</p><p>在应用程序中的组件需要获取资源时，传统的方式是组件主动的从容器中获取所需要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式。比如 ClassA 中需要用到 ClassB 的对象，一般情况下，需要在 ClassA 的代码中显式的 new 一个 ClassB 的对象</p><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可。采用依赖注入技术之后，ClassA 的代码只需要定义一个私有的 ClassB 对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将 ClassB 对象在外部 new 出来并注入到 A 类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如 XML）来指定</p><blockquote><p><strong>DI(Dependency Injection)：依赖注入</strong></p></blockquote><p>可以将 DI 看作是 IOC 的一种实现方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器的资源注入。相对于 IOC 而言，这种表述更直接</p><blockquote><p><strong>IOC 容器在 Spring 中的实现</strong></p></blockquote><p>在通过 IOC 容器读取 bean 的实例之前，需要先将 IOC 容器本身实例化，Spring 提供了 IOC 容器的两种实现方式：</p><ol><li><p><code>beanFactory</code>：IOC 容器的基本实现，是 Spring 内部的基础设施，是面向 Spring 本身的，不是提供给开发人员使用的。</p></li><li><p><code>ApplicationContext</code>：<code>beanFactory</code>的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用<code>ApplicationContext</code>而不是底层的<code>beanFactory</code>。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/aa0c975f2be8832b6d46935adea2a5f7.png" alt="image"></p><p><strong><code>ApplicationContext</code>的主要实现类</strong></p><ol><li><p><code>ClassPathXmlApplicationContext</code>：对应类路径下的 XML 格式的配置文件</p></li><li><p><code>FileSystemXmlApplicationContext</code>：对应文件系统中的 XML 格式的配置文件</p></li></ol><p>在初始化时就创建单例的 bean，也可以通过配置的方式指定创建的 bean 是多实例的</p><p><strong><code>ConfigurableApplicationContext</code> 接口</strong></p><ol><li><p>是<code>ApplicationContext</code>的子接口，包含一些扩展方法</p></li><li><p><code>refresh()</code>和<code>close()</code>让<code>ApplicationContext</code>具有启动、关闭和刷新上下文的能力</p></li></ol><p><strong><code>WebApplicationContext</code> 接口</strong></p><p><code>WebApplicationContext</code>, 是继承于<code>ApplicationContext</code>的一个接口，扩展了<code>ApplicationContext</code>，是专门为 Web 应用准备的，它允许从相对于 Web 根目录的路径中装载配置文件完成初始化</p><blockquote><p><strong>举例说明 IOC 为何可以降低代码的耦合度</strong></p></blockquote><p><strong>1、原始方式：自己 new 对象</strong></p><p>假设现在需要创建 Student 对象实例，原始方式则是直接 <code>new Student()</code> 对象，再通过 setter 方法注入器属性值</p><pre><code>Student stu = new Student();stu.setStuId(7);stu.setStuName("Oneby");</code></pre><p><strong>结论</strong>：我们纯手动自己 new 对象，代码耦合度极高</p><p><strong>2、进阶方式：通过工厂创建对象</strong></p><p>可以先通过 XML 配置文件配置 bean 的属性</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="007"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;</code></pre><p>再通过工厂模式 + 反射的方法创建该对象的实例，并注入属性值</p><pre><code>public class StudentFactory {    public static Student getStudent(){        String className = ...;         String[] fieldNames = ..;         String[] fieldValues = ...;         Class clazz = Class.forName(className);         for (int i = 0; i &lt; fieldNames.length; i++) {        }        return clazz;     }}</code></pre><p><strong>结论</strong>：这种方式可以降低代码的耦合度，我们使用 <code>Student</code> 对象再不需要自己去 new，而是通过工厂获得，但是这种方式还是脱离不了我们自己去获取和管理 bean</p><p><strong>3、最终方式：通过 Spring IOC 管理 bean</strong></p><p>首先创建 Spring 配置文件</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="007"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;</code></pre><p>在通过 <code>iocContainer.getbean("beanId")</code> 方法或者 <code>@Autowire</code> 方式获取 bean 岂不美滋滋，这样我们可以将 bean 的创建与它们之间的依赖关系完全交给 Spring IOC 容器去管理，代码耦合程度极大降低</p><h3 id="3-2、bean-对象的获取"><a href="#3-2、bean-对象的获取" class="headerlink" title="3.2、bean 对象的获取"></a>3.2、bean 对象的获取</h3><blockquote><p><strong>获取 bean 对象的几种方式</strong></p></blockquote><p>在容器的顶级接口 <code>beanFactory</code>接口中，定义了如下几个方法，用于获取 bean 实例</p><ol><li><p><code>Object getbean(String name) throws beansException;</code>：通过 bean name 获取 bean 实例</p></li><li><p><code>&lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException;</code>：通过 bean class 获取 bean 实例</p></li><li><p><code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType) throws BeansException;</code>：通过 bean name 和 bean class 获取 bean 实例</p></li></ol><h3 id="3-3、bean-属性的赋值"><a href="#3-3、bean-属性的赋值" class="headerlink" title="3.3、bean 属性的赋值"></a>3.3、bean 属性的赋值</h3><h4 id="3-3-1、属性注入的方式"><a href="#3-3-1、属性注入的方式" class="headerlink" title="3.3.1、属性注入的方式"></a>3.3.1、属性注入的方式</h4><blockquote><p><strong>1、通过 bean 的 setter 方法注入属性</strong></p></blockquote><p>通过 <code>&lt;property&gt;</code> 标签指定属性名，Spring 会帮我们找到该属性对应的 setter 方法，注入其属性值</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="007"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06acd6a3f61d583902f6e0cad59b0648.png" alt="image"></p><blockquote><p><strong>2、通过构造器注入属性值</strong></p></blockquote><p>通过 <code>constructor-arg</code> 标签为对象的属性赋值，通过 <code>name</code> 指定属性名，<code>value</code> 指定属性值</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;constructor-arg name="stuId" value="1" /&gt;    &lt;constructor-arg name="stuName" value="Oneby" /&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/78d3386ffb48522b36040526fa4078da.png" alt="image"></p><blockquote><p><strong>3、通过级联属性赋值</strong></p></blockquote><p><strong>准备工作</strong></p><p>为了演示级联属性的赋值，我们添加 <code>Computer</code> 类</p><pre><code>public class Computer {    String computerId;    String computerName;    public Computer() {    }    public Computer(String computerId, String computerName) {        this.computerId = computerId;        this.computerName = computerName;    }    public String getComputerId() {        return computerId;    }    public String getComputerName() {        return computerName;    }    public void setComputerId(String computerId) {        this.computerId = computerId;    }    public void setComputerName(String computerName) {        this.computerName = computerName;    }    @Override    public String toString() {        return "Computer{" +                "computerId='" + computerId + '\'' +                ", computerName='" + computerName + '\'' +                '}';    }}</code></pre><p>在 <code>Student</code> 类中添加 <code>Computer</code> 类型的字段</p><pre><code>public class Student {    private Integer stuId;    private String stuName;    private Computer computer;    public Student() {    }    public Student(Integer stuId, String stuName, Computer computer) {        this.stuId = stuId;        this.stuName = stuName;        this.computer = computer;    }    public Integer getStuId() {        return stuId;    }    public String getStuName() {        return stuName;    }    public Computer getComputer() {        return computer;    }    public void setStuId(Integer stuId) {        this.stuId = stuId;    }    public void setStuName(String stuName) {        this.stuName = stuName;    }    public void setComputer(Computer computer) {        this.computer = computer;    }    @Override    public String toString() {        return "Student{" +                "stuId=" + stuId +                ", stuName='" + stuName + '\'' +                ", computer=" + computer +                '}';    }}</code></pre><p><strong>演示级联属性的赋值</strong></p><p>在 <code>student</code> 对象中有一个名为 <code>computer</code> 的字段，该字段指向了一个 <code>computer</code> 对象，级联属性赋值的含义为：在 <code>student bean</code> 中的 <code>&lt;property&gt;</code> 标签中可以通过 <code>computer.computerId</code> 和 <code>computer.computerName</code> 的方式为 <code>computer</code> 对象中的 <code>computerId</code> 和 <code>computerName</code> 字段赋值</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="computer" ref="computer"/&gt;    &lt;property name="computer.computerId" value="233"/&gt;    &lt;property name="computer.computerName" value="HP"/&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"/&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c9ecef0c621d0b78596d1c77c65bdf81.png" alt="image"></p><blockquote><p><strong>4、通过 p 名称空间注入属性值</strong></p></blockquote><p>为了简化 XML 文件的配置，越来越多的 XML 文件采用属性而非子元素配置信息。Spring 从 2.5 版本开始引入了一个新的 p 命名空间，可以通过<code>&lt;bean&gt;</code>元素属性的方式配置 Bean 的属性。使用 p 命名空间后，基于 XML 的配置方式将进一步简化。</p><p><strong>准备工作：在配置文件中引入 p 名称空间</strong></p><p>对照着 <code>xmlns="http://www.springframework.org/schema/beans"</code> 这行改吧改吧</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b2b6de39070599791368b6bc97682968.png" alt="image"></p><p><strong>通过 p 名称空间注入属性值</strong></p><p>其实 p 名称空间赋值就是 <code>&lt;property&gt;</code> 标签赋值的简化版</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student" p:stuId="1" p:stuName="Oneby"/&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4fa28a0e5ca135a9419473322a2b3090.png" alt="image"></p><h4 id="3-3-2、属性赋值的类型"><a href="#3-3-2、属性赋值的类型" class="headerlink" title="3.3.2、属性赋值的类型"></a>3.3.2、属性赋值的类型</h4><blockquote><p><strong>1、字面量</strong></p></blockquote><ol><li><p>可以使用字符串表示的值，可以通过<code>value</code>属性或<code>value</code>子节点的方式指定</p></li><li><p>基本数据类型及其封装类、<code>String</code>等类型都可以采取字面值注入的方式</p></li><li><p>若字面值中包含特殊字符，可以使用<code>&lt;![CDATA[]]&gt;</code>把字面值包裹起来</p></li></ol><p><strong>演示字面量的使用</strong></p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;</code></pre><blockquote><p><strong>2、null 值</strong></p></blockquote><p>通过 <code>&lt;null/&gt;</code> 标签将引用类型字段的值设置为 <code>null</code></p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName"&gt;        &lt;null/&gt;    &lt;/property&gt;    &lt;property name="computer"&gt;        &lt;null/&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f342f8ed587f95aff779714b3e9d22fb.png" alt="image"></p><blockquote><p><strong>3、引用外部 bean</strong></p></blockquote><p>通过 <code>&lt;property&gt;</code> 标签中的 <code>ref</code> 属性引用外部 bean</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;    &lt;property name="computer" ref="computer"/&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"&gt;    &lt;property name="computerId" value="255"/&gt;    &lt;property name="computerName" value="HP"/&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4c33bb815c9201d76b3c6352c89961f6.png" alt="image"></p><blockquote><p><strong>4、引用内部 bean</strong></p></blockquote><p>当 bean 实例仅仅给一个特定的属性使用时，可以将其声明为内部 bean。内部 bean 声明直接包含在<code>&lt;property&gt;</code>或<code>&lt;constructor-arg&gt;</code>元素里，不需要设置任何<code>id</code>或<code>name</code>属性，内部 bean 不能使用在任何其他地方</p><p>在 <code>&lt;property&gt;</code> 标签中不使用 <code>ref</code> 属性引用外部 bean，而是直接定义一个 内部 bean</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;    &lt;property name="computer"&gt;        &lt;bean class="com.oneby.entity.Computer"&gt;            &lt;property name="computerId" value="255"/&gt;            &lt;property name="computerName" value="HP"/&gt;        &lt;/bean&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2eb726402f2faade3dd66d05b139c8cd.png" alt="image"></p><h4 id="3-3-3、对集合属性赋值"><a href="#3-3-3、对集合属性赋值" class="headerlink" title="3.3.3、对集合属性赋值"></a>3.3.3、对集合属性赋值</h4><p>在 Spring 中可以通过一组内置的 XML 标签来配置集合属性，比如：<code>&lt;array&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;props&gt;</code>，并且可以用过引入 <code>util</code> 名称空间来提取集合类型的 bean</p><blockquote><p><strong>0、准备工作</strong></p></blockquote><p>新建 <code>CollectionExample</code> 类，演示对集合属性的操作</p><pre><code>public class CollectionExample {    private String[] array;    private List&lt;String&gt; list;    private Set&lt;String&gt; set;    private Map&lt;String,String&gt; map;    private Properties properties;    public String[] getArray() {        return array;    }    public void setArray(String[] array) {        this.array = array;    }    public List&lt;String&gt; getList() {        return list;    }    public void setList(List&lt;String&gt; list) {        this.list = list;    }    public Set&lt;String&gt; getSet() {        return set;    }    public void setSet(Set&lt;String&gt; set) {        this.set = set;    }    public Map&lt;String, String&gt; getMap() {        return map;    }    public void setMap(Map&lt;String, String&gt; map) {        this.map = map;    }    public Properties getProperties() {        return properties;    }    public void setProperties(Properties properties) {        this.properties = properties;    }    @Override    public String toString() {        return "CollectionExample{" +                "array=" + Arrays.toString(array) +                ", list=" + list +                ", set=" + set +                ", map=" + map +                ", properties=" + properties +                '}';    }}</code></pre><p>单元测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("collection-property-injection.xml");        CollectionExample collectionExample = (CollectionExample) iocContainer.getBean("collectionExample");        System.out.println(collectionExample);    }}</code></pre><blockquote><p><strong>1、数组</strong></p></blockquote><p>通过 <code>&lt;array&gt;</code> 标签定义数组集合，并且可以通过<code>&lt;value&gt;</code>指定简单的常量值，通过<code>&lt;ref&gt;</code>指定对其他 bean 的引用。通过<code>&lt;bean&gt;</code>指定内置 bean 定义。通过<code>&lt;null/&gt;</code>指定空元素，甚至可以内嵌其他集合。</p><pre><code>&lt;bean id="collectionExample" class="com.oneby.entity.CollectionExample"&gt;    &lt;property name="array"&gt;        &lt;array&gt;            &lt;value&gt;Oneby&lt;/value&gt;            &lt;value&gt;Heygo&lt;/value&gt;        &lt;/array&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bd59aa0c0eb51813885c693a61969bcf.png" alt="image"></p><blockquote><p><strong>2、List</strong></p></blockquote><p>通过 <code>&lt;list&gt;</code> 标签定义数组集合，并且可以通过<code>&lt;value&gt;</code>指定简单的常量值，通过<code>&lt;ref&gt;</code>指定对其他 bean 的引用。通过<code>&lt;bean&gt;</code>指定内置 bean 定义。通过<code>&lt;null/&gt;</code>指定空元素，甚至可以内嵌其他集合。</p><pre><code>&lt;bean id="collectionExample" class="com.oneby.entity.CollectionExample"&gt;    &lt;property name="list"&gt;        &lt;list&gt;            &lt;value&gt;Oneby&lt;/value&gt;            &lt;value&gt;Heygo&lt;/value&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/165d88562b41da383bae6eec4316803d.png" alt="image"></p><blockquote><p><strong>3、Set</strong></p></blockquote><p>通过 <code>&lt;set&gt;</code> 标签定义数组集合，并且可以通过<code>&lt;value&gt;</code>指定简单的常量值，通过<code>&lt;ref&gt;</code>指定对其他 bean 的引用。通过<code>&lt;bean&gt;</code>指定内置 bean 定义。通过<code>&lt;null/&gt;</code>指定空元素，甚至可以内嵌其他集合。</p><pre><code>&lt;bean id="collectionExample" class="com.oneby.entity.CollectionExample"&gt;    &lt;property name="set"&gt;        &lt;set&gt;            &lt;value&gt;Oneby&lt;/value&gt;            &lt;value&gt;Heygo&lt;/value&gt;        &lt;/set&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c8f24441491d82c35976292988f0d04a.png" alt="image"></p><blockquote><p><strong>4、Map</strong></p></blockquote><p><code>Java.util.Map</code>通过<code>&lt;map&gt;</code>标签定义，<code>&lt;map&gt;</code>标签里可以使用多个<code>&lt;entry&gt;</code>作为子标签，每个<code>&lt;entry&gt;</code>中包含一个键和一个值。因为键和值的类型没有限制，所以可以自由地为它们指定<code>&lt;value&gt;</code>、<code>&lt;ref&gt;</code>、<code>&lt;bean&gt;</code>或<code>&lt;null/&gt;</code>元素。因此对于常量型的<code>key-value</code>键值对可以使用<code>key</code>和<code>value</code>来定义；<code>bean</code>引用通过<code>key-ref</code>和<code>value-ref</code>属性定义。</p><pre><code>&lt;bean id="collectionExample" class="com.oneby.entity.CollectionExample"&gt;    &lt;property name="map"&gt;        &lt;map&gt;            &lt;entry key="name" value="Oneby"&gt;&lt;/entry&gt;            &lt;entry key="hobby" value="code"&gt;&lt;/entry&gt;        &lt;/map&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87ac1b9f97ff320173c6527934615850.png" alt="image"></p><blockquote><p><strong>5、Properties</strong></p></blockquote><p>使用<code>&lt;props&gt;</code>定义<code>java.util.Properties</code>，该标签使用多个<code>&lt;prop&gt;</code>作为子标签，每个<code>&lt;prop&gt;</code>标签中定义<code>key</code>和<code>value</code></p><pre><code>&lt;bean id="collectionExample" class="com.oneby.entity.CollectionExample"&gt;    &lt;property name="properties"&gt;        &lt;props&gt;            &lt;prop key="name"&gt;Oneby&lt;/prop&gt;            &lt;prop key="hobby"&gt;code&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e4bfa398f56b2ca6b684e31ea3045b85.png" alt="image"></p><blockquote><p><strong>6、集合类型的 bean</strong></p></blockquote><p>如果只能将集合对象配置在某个 bean 内部，则这个集合的配置将不能重用。我们需要将集合 bean 的配置拿到外面，供其他 bean 引用。</p><p><strong>引入名称空间：配置集合类型的 bean 需要引入 util 名称空间</strong></p><p>将 <code>beans</code> 名称空间对应的这两项 <code>xmlns:util="http://www.springframework.org/schema/util</code> 和 <code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code>，将 <code>beans</code> 全部替换为 <code>util</code> 就行啦~</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f1e22368c7f9bebd3dd7b490b1bfc1fe.png" alt="image"></p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:util="http://www.springframework.org/schema/util"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/util                http://www.springframework.org/schema/util/spring-util.xsd"&gt;</code></pre><p>使用 <code>&lt;util&gt;</code> 标签完成对集合类型 bean 的抽取，并为其设置 <code>id</code> 属性，方便其他地方进行引用</p><pre><code>&lt;util:list id="list"&gt;    &lt;value&gt;Oneby&lt;/value&gt;    &lt;value&gt;Heygo&lt;/value&gt;&lt;/util:list&gt;&lt;bean id="collectionExample" class="com.oneby.entity.CollectionExample"&gt;    &lt;property name="list" ref="list"/&gt;&lt;/bean&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6cef7c535e3dca1bde4664e84bccbf4b.png" alt="image"></p><h3 id="3-4、通过工厂创建-bean"><a href="#3-4、通过工厂创建-bean" class="headerlink" title="3.4、通过工厂创建 bean"></a>3.4、通过工厂创建 bean</h3><blockquote><p><strong>1、静态工厂</strong></p></blockquote><p>调用静态工厂方法创建 bean 是将对象创建的过程封装到静态方法中。当客户端需要对象时，只需要简单地调用静态方法，而不用关心创建对象的细节。</p><p>声明通过静态方法创建的 bean 需要在<code>&lt;bean&gt;</code>的<code>class</code>属性里指定静态工厂类的全类名，同时在<code>factory-method</code>属性里指定工厂方法的名称。最后使用<code>&lt;constrctor-arg&gt;</code>元素为该方法传递方法参数。</p><blockquote><p><strong>2、实例工厂</strong></p></blockquote><p>实例工厂方法：将对象的创建过程封装到另外一个对象实例的方法里。当客户端需要请求对象时，只需要简单的调用该实例方法而不需要关心对象的创建细节。</p><p>实现方式</p><ol><li><p>配置工厂类实例的 bean</p></li><li><p>在<code>factory-method</code>属性里指定该工厂方法的名称</p></li><li><p>使用<code>construtor-arg</code>元素为工厂方法传递方法参数</p></li></ol><blockquote><p><strong>3、FactoryBean 接口</strong></p></blockquote><p>以上两种方式通常用的不多，我们一般通过实现 <code>FactoryBean</code> 接口，并重写其中的方法来获得工厂类</p><ol><li><p>Spring 中有两种类型的 bean，一种是普通 bean，另一种是工厂 bean，即<code>FactoryBean</code></p></li><li><p>工厂 bean 跟普通 bean 不同，其返回的对象不是指定类的一个实例，其返回的是该工厂 bean 的<code>getObject()</code>方法所返回的对象</p></li><li><p>工厂 bean 必须实现<code>org.springframework.beans.factory.FactoryBean</code>接口</p></li></ol><p><strong><code>FactoryBean</code> 接口</strong></p><p><code>FactoryBean</code> 接口中有如下三个方法，<code>getObject()</code> 方法负责将创建好的 bean 实例返回给 IOC 容器；<code>getObjectType()</code> 方法负责返回工厂生产的 bean 类型；<code>isSingleton()</code> 方法用于指示该 bean 实例是否为单例，默认是单例 bean</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7429829db113398b2641065240e2787c.png" alt="image"></p><pre><code>public interface FactoryBean&lt;T&gt; {    @Nullable    T getObject() throws Exception;    @Nullable    Class&lt;?&gt; getObjectType();    default boolean isSingleton() {        return true;    }</code></pre><p><strong>演示 <code>FactoryBean</code> 接口的使用</strong></p><p>创建 <code>StudentFactory</code> 类，该类实现了 <code>FactoryBean</code> 接口，并重写了其中的 <code>getObject()</code> 和 <code>getObjectType()</code> 方法</p><pre><code>public class StudentFactory implements FactoryBean&lt;Student&gt; {    @Override    public Student getObject() throws Exception {        return new Student(233,"Oneby");    }    @Override    public Class&lt;?&gt; getObjectType() {        return Student.class;    }}</code></pre><p>在 Spring 配置文件中使用 <code>StudentFactory</code> 工厂创建 <code>Student</code> 对象</p><pre><code>&lt;bean id="student" class="com.oneby.entity.StudentFactory"/&gt;</code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6386bfa9dbbcfe8ad3f5e1ed9aedae2b.png" alt="image"></p><h3 id="3-5、bean-的高级配置"><a href="#3-5、bean-的高级配置" class="headerlink" title="3.5、bean 的高级配置"></a>3.5、bean 的高级配置</h3><h4 id="3-5-1、bean-的作用域"><a href="#3-5-1、bean-的作用域" class="headerlink" title="3.5.1、bean 的作用域"></a>3.5.1、bean 的作用域</h4><blockquote><p><strong>bean 的作用域</strong></p></blockquote><p>在 Spring 中，可以在<code>&lt;bean&gt;</code>元素的<code>scope</code>属性里设置 bean 的作用域，以决定这个 bean 是单实例的还是多实例的。</p><p>默认情况下，Spring 只为每个在 IOC 容器里声明的 bean 创建唯一一个实例（单例对象），整个 IOC 容器范围内都能共享该实例：所有后续的<code>getBean()</code>调用和 bean 引用都将返回这个唯一的 bean 实例。该作用域被称为<code>singleton</code>，它是所有 bean 的默认作用域</p><p><strong>两种 bean 的作用域</strong></p><p><strong>singleton</strong>：在 Spring IOC 容器中仅存在一个 bean 实例，bean 以单实例的方式存在</p><p><strong>prototype</strong>：每次调用<code>getBean()</code>时都会返回一个新的实例</p><p><strong>注</strong>：当 bean 的作用域为<code>singleton</code>时，Spring 会在 IOC 容器对象创建时就创建 bean 的对象实例。而当 bean 的作用域为<code>prototype</code>时，IOC 容器在获取 bean 的实例时创建 bean 的实例对象</p><blockquote><p><strong>单例模式：<code>scope="singleton"</code></strong></p></blockquote><p>其实 <code>scope</code> 属性默认就是 <code>singleton</code>，不写也没事儿</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student" scope="singleton"&gt;    &lt;property name="stuId" value="233" /&gt;    &lt;property name="stuName" value="Oneby" /&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spring-advance-config.xml");        Student student1 = (Student) iocContainer.getBean("student");        Student student2 = (Student) iocContainer.getBean("student");        System.out.println(student1);        System.out.println(student2);        System.out.println(student1 == student2);    }}</code></pre><p>程序运行结果：调用两次 <code>getBean()</code> 方法得到的 <code>Student</code> 对象是同一个实例</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9ff643a211068d3d2742dbbae95d6a11.png" alt="image"></p><blockquote><p><strong>原型模式：<code>scope="prototype"</code></strong></p></blockquote><p>将 <code>Student</code> 对象的 <code>scope</code> 属性配置为 <code>prototype</code>，表示每次获取时才创建对象</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student" scope="prototype"&gt;    &lt;property name="stuId" value="233" /&gt;    &lt;property name="stuName" value="Oneby" /&gt;&lt;/bean&gt;</code></pre><p>程序运行结果：调用两次 <code>getBean()</code> 方法将得到不同的 <code>Student</code> 对象</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4209b68e4e30eeae3d334bed98b1d942.png" alt="image"></p><h4 id="3-5-2、bean-的生命周期"><a href="#3-5-2、bean-的生命周期" class="headerlink" title="3.5.2、bean 的生命周期"></a>3.5.2、bean 的生命周期</h4><blockquote><p><strong>Spring IOC 管理下的 bean 生命周期</strong></p></blockquote><p>Spring IOC 容器可以管理 bean 的生命周期，Spring 允许在 bean 生命周期内特定的时间点执行指定的任务，Spring IOC 容器对 bean 的生命周期进行管理的过程：</p><ol><li><p>通过构造器或工厂方法创建 bean 实例</p></li><li><p>为 bean 的属性设置值和对其他 bean 的引用</p></li><li><p>调用 bean 的初始化方法</p></li><li><p>bean 可以使用了</p></li><li><p>当容器关闭时，调用 bean 的销毁方法</p></li></ol><p>注：在配置 bean 时，通过<code>init-method</code>和<code>destroy-method</code>属性为 bean 指定初始化和销毁方法</p><p><strong>代码演示</strong></p><p>创建 <code>Order</code> 类，用于演示 bean 的生命周期</p><pre><code>public class Order {    private String name;    public Order() {        System.out.println("第一步：执行无参数构造创建 bean 实例");    }    public void setName(String name) {        this.name = name;        System.out.println("第二步：调用 setter 方法为属性赋值");    }    public void initMethod(){        System.out.println("第三步：执行 init-method 初始化方法");    }    public void destroyMethod(){        System.out.println("第五步：执行 destroy-method 初销毁方法");    }}</code></pre><p>在 <code>&lt;bean&gt;</code> 标签中指定 <code>order</code> 对象的 <code>init-method</code> 方法（初始化方法）和 <code>destroy-method</code> 方法（销毁方法）</p><pre><code>&lt;bean id="order" class="com.oneby.entity.Order"      init-method="initMethod" destroy-method="destroyMethod"&gt;    &lt;property name="name" value="iPad" /&gt;&lt;/bean&gt;</code></pre><p>测试代码：记得要关闭 IOC 容器才会执行 <code>destroy-method</code> 方法，并且接口类型需要上升到 <code>ConfigurableApplicationContext</code> 才会提供 <code>close()</code> 方法</p><pre><code>public class SpringTest {    @Test    public void test() {        ConfigurableApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spring-advance-config.xml");        Order order = (Order) iocContainer.getBean("order");        System.out.println("第四步：使用创建好的 order 对象" + order);        iocContainer.close();    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ae4e9b943ea54626a3fdf48fa4998f36.png" alt="image"></p><blockquote><p><strong>添加 BeanPostProcessor 后的 bean 生命周期</strong></p></blockquote><p><strong>bean 的后置处理器</strong></p><ol><li><p>bean 后置处理器允许在调用初始化方法前后对 bean 进行额外的处理</p></li><li><p>bean 后置处理器对 IOC 容器里的所有 bean 实例逐一处理，而非单一实例。其典型应用是：检查 bean 属性的正确性或根据特定的标准更改 bean 的属性。</p></li><li><p>bean 后置处理器时需要实现接口：<code>org.springframework.beans.factory.config.BeanPostProcessor</code>。在初始化方法被调用前后，Spring 将把每个 bean 实例分别传递给上述接口的以下两个方法：</p></li><li><p><code>postProcessBeforeInitialization(Object, String)</code></p></li><li><p><code>postProcessAfterInitialization(Object, String)</code></p></li></ol><p><strong>添加 bean 后置处理器后 bean 的生命周期</strong></p><ol><li><p>通过构造器或工厂方法创建 bean 实例</p></li><li><p>为 bean 的属性设置值和对其他 bean 的引用</p></li><li><p>将 bean 实例传递给 bean 后置处理器的 postProcessBeforeInitialization() 方法</p></li><li><p>调用 bean 的初始化方法</p></li><li><p>将 bean 实例传递给 bean 后置处理器的 postProcessAfterInitialization() 方法</p></li><li><p>bean 可以使用了</p></li><li><p>当容器关闭时调用 bean 的销毁方法</p></li></ol><p><strong>代码演示</strong></p><p>创建 <code>MyBeanPost</code> 类，继承自 <code>MyBeanPost</code> 类，并重写其中的 <code>postProcessBeforeInitialization</code> 和 <code>postProcessAfterInitialization</code> 方法</p><pre><code>public class MyBeanPost implements BeanPostProcessor {    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {        System.out.println("第三步：执行 postProcessBeforeInitialization 方法");        return bean;    }    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {        System.out.println("第五步：执行 postProcessAfterInitialization 方法");        return bean;    }}</code></pre><p>配置文件：在配置文件中实例化我们自定义的 <code>MyBeanPost</code> 后置处理器</p><pre><code>&lt;bean id="order" class="com.oneby.entity.Order"      init-method="initMethod" destroy-method="destroyMethod"&gt;    &lt;property name="name" value="iPad" /&gt;&lt;/bean&gt;&lt;bean id="myBeanPost" class="com.oneby.config.MyBeanPost"/&gt;</code></pre><p>测试代码：现在使用 <code>order</code> 对象变成了第六步</p><pre><code>public class SpringTest {    @Test    public void test() {        ConfigurableApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spring-advance-config.xml");        Order order = (Order) iocContainer.getBean("order");        System.out.println("第六步：使用创建好的 order 对象" + order);        iocContainer.close();    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/78a767587914005bf1b996e7f900cf8b.png" alt="image"></p><h4 id="3-5-3、读取-properties-文件"><a href="#3-5-3、读取-properties-文件" class="headerlink" title="3.5.3、读取 properties 文件"></a>3.5.3、读取 properties 文件</h4><blockquote><p><strong>为什么要使用外部的 properties 文件</strong></p></blockquote><p>当 bean 的配置信息逐渐增多时，查找和修改一些 bean 的配置信息就变得愈加困难。这时可以将一部分信息提取到 bean 配置文件的外部，以 properties 格式的属性文件保存起来，同时在 bean 的配置文件中引用 properties 属性文件中的内容，从而实现一部分属性值在发生变化时仅修改 properties 属性文件即可。这种技术多用于连接数据库的基本信息的配置。</p><blockquote><p><strong>准备工作：引入数据库依赖</strong></p></blockquote><p>引入 <code>druid</code> 和 <code>mysql</code> 的驱动</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.8&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p><strong>直接数据库连接配置卸载 Spring 配置文件中</strong></p></blockquote><p>配置文件，指定数据库的用户名、用户密码、数据库连接地址、数据库驱动名称</p><pre><code>&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="root"/&gt;    &lt;property name="url" value="jdbc:mysql:///test"/&gt;    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spring-advance-config.xml");        DataSource dataSource = (DataSource) iocContainer.getBean("dataSource");        System.out.println(dataSource);    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3d1818f97280cb850546a602987b556f.png" alt="image"></p><blockquote><p><strong>引用外部 properties 配置文件单独存放数据库配置信息</strong></p></blockquote><p><strong>引入 <code>context</code> 名称空间</strong></p><p>将 <code>xmlns="http://www.springframework.org/schema/beans"</code> 和 <code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code> 复制，并将出现 <code>beans</code> 的位置全部替换为 <code>context</code></p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd"&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/dc60569d50c8104a697d465adcd05ac0.png" alt="image"></p><p><strong>代码测试</strong></p><p>在类路径下创建 jdbc.properties 数据库配置文件</p><pre><code>prop.userName=rootprop.password=rootprop.url=jdbc:mysql:///testprop.driverClass=com.mysql.jdbc.Driver</code></pre><p>通过 <code>&lt;context:property-placeholder&gt;</code> 标签中的 <code>location</code> 来制定配置文件的路径，<code>classpath:</code> 表示该配置文件位于类路径下，并通过 <code>${prop.userName}</code> 的方式来取出配置文件中的属性值</p><pre><code>&lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt;    &lt;property name="username" value="${prop.userName}"/&gt;    &lt;property name="password" value="${prop.password}"/&gt;    &lt;property name="url" value="${prop.url}"/&gt;    &lt;property name="driverClassName" value="${prop.driverClass}"/&gt;&lt;/bean&gt;</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9ff1a6c1e8928cb3b7d4820c7d8dd88d.png" alt="image"></p><h4 id="3-5-4、bean-的自动装配"><a href="#3-5-4、bean-的自动装配" class="headerlink" title="3.5.4、bean 的自动装配"></a>3.5.4、bean 的自动装配</h4><blockquote><p><strong>自动装配的概念</strong></p></blockquote><p>[1]手动装配：以 value 或 ref 的方式明确指定属性值都是手动装配。</p><p>[2]自动装配：根据指定的装配规则，不需要明确指定，Spring 自动将匹配的属性值注入 bean 中。</p><blockquote><p><strong>装配模式</strong></p></blockquote><p>[1]根据类型自动装配（<code>byType</code>）：将类型匹配的 bean 作为属性注入到另一个 bean 中。若 IOC 容器中有多个与目标 bean 类型一致的 bean，Spring 将无法判定哪个 bean 最合适该属性，所以不能执行自动装配</p><p>[2]根据名称自动装配（<code>byName</code>）：必须将目标 bean 的名称和属性名设置的完全相同</p><p>[3]通过构造器自动装配（<code>constructor</code>）：当 bean 中存在多个构造器时，此种自动装配方式将会很复杂。不推荐使用。</p><blockquote><p><strong>选用建议</strong></p></blockquote><p>相对于使用注解的方式实现的自动装配，在 XML 文档中进行的自动装配略显笨拙，在项目中更多的使用注解的方式实现。</p><blockquote><p><strong>代码举例</strong></p></blockquote><p>通过 <code>&lt;bean&gt;</code> 标签的 <code>autowire="byType"</code>，指定 <code>student</code> 对象中的 <code>bean</code> 按照类型进行装配</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student" autowire="byType"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"&gt;    &lt;property name="computerId" value="666"/&gt;    &lt;property name="computerName" value="HP"/&gt;&lt;/bean&gt;</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d2a00b2f24ba4febd76fdfcce529ce23.png" alt="image"></p><h4 id="3-5-5、配置信息的继承"><a href="#3-5-5、配置信息的继承" class="headerlink" title="3.5.5、配置信息的继承"></a>3.5.5、配置信息的继承</h4><blockquote><p><strong>配置信息的继承</strong></p></blockquote><p>Spring 允许继承 bean 的配置，被继承的 bean 称为父 bean，继承这个父 bean 的 bean 称为子 bean</p><p>子 bean 从父 bean 中继承配置，包括 bean 的属性配置，子 bean 也可以覆盖从父 bean 继承过来的配置</p><blockquote><p><strong>准备工作：创建实体类</strong></p></blockquote><p>创建 <code>CorporateSlave</code> 类，其含义为社畜</p><pre><code>public class CorporateSlave {    private Integer id;    private String name;    private String company;    private String hobby;    private String profession;    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getCompany() {        return company;    }    public void setCompany(String company) {        this.company = company;    }    public String getHobby() {        return hobby;    }    public void setHobby(String hobby) {        this.hobby = hobby;    }    public String getProfession() {        return profession;    }    public void setProfession(String profession) {        this.profession = profession;    }    @Override    public String toString() {        return "CorporateSlave{" +                "id=" + id +                ", name='" + name + '\'' +                ", company='" + company + '\'' +                ", hobby='" + hobby + '\'' +                ", profession='" + profession + '\'' +                '}';    }}</code></pre><blockquote><p><strong>不使用继承配置 bean</strong></p></blockquote><p>喏，<code>Oneby</code> 和 <code>Heygo</code> 两位社畜的 <code>company</code>、<code>hobby</code>、<code>profession</code> 属性的值均相同，这样配置显得有些冗余</p><pre><code>&lt;bean id="corporateSlave1" class="com.oneby.entity.CorporateSlave"&gt;    &lt;property name="id" value="1"/&gt;    &lt;property name="name" value="Oneby"/&gt;    &lt;property name="company" value="OneTech"/&gt;    &lt;property name="hobby" value="Code"/&gt;    &lt;property name="profession" value="Programer"/&gt;&lt;/bean&gt;&lt;bean id="corporateSlave2" class="com.oneby.entity.CorporateSlave"&gt;    &lt;property name="id" value="2"/&gt;    &lt;property name="name" value="Heygo"/&gt;    &lt;property name="company" value="OneTech"/&gt;    &lt;property name="hobby" value="Code"/&gt;    &lt;property name="profession" value="Programer"/&gt;&lt;/bean&gt;</code></pre><blockquote><p><strong>使用配置信息的继承配置 bean</strong></p></blockquote><p>配置信息的继承：<code>Heygo</code> 的配置信息继承于 <code>Oneby</code>（指定 bean 的 <code>parent</code> 属性），自然就获得了 <code>Oneby</code> 社畜的所有配置信息，只需要重写自己不一样的配置信息即可</p><pre><code>&lt;bean id="corporateSlave1" class="com.oneby.entity.CorporateSlave"&gt;    &lt;property name="id" value="1"/&gt;    &lt;property name="name" value="Oneby"/&gt;    &lt;property name="company" value="OneTech"/&gt;    &lt;property name="hobby" value="Code"/&gt;    &lt;property name="profession" value="Programer"/&gt;&lt;/bean&gt;&lt;bean id="corporateSlave2" parent="corporateSlave1"&gt;    &lt;property name="id" value="2"/&gt;    &lt;property name="name" value="Heygo"/&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spring-advance-config.xml");        CorporateSlave corporateSlave1 = (CorporateSlave) iocContainer.getBean("corporateSlave1");        CorporateSlave corporateSlave2 = (CorporateSlave) iocContainer.getBean("corporateSlave2");        System.out.println(corporateSlave1);        System.out.println(corporateSlave2);    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/305c89d095e15d5fca580f26c198482d.png" alt="image"></p><blockquote><p><strong>注意事项：配置信息的继承</strong></p></blockquote><p>父 bean 可以作为配置模板，也可以作为 bean 实例。若只想把父 bean 作为模板，可以设置<code>&lt;bean&gt;</code>的<code>abstract</code> 属性为<code>true</code>，这样 Spring 将不会实例化这个 bean</p><h4 id="3-5-6、bean-之间的依赖"><a href="#3-5-6、bean-之间的依赖" class="headerlink" title="3.5.6、bean 之间的依赖"></a>3.5.6、bean 之间的依赖</h4><blockquote><p><strong>bean 的作用域</strong></p></blockquote><p>有的时候创建一个 bean 的时候需要保证另外一个 bean 也被创建，这时我们称前面的 bean 对后面的 bean 有依赖。例如：要求创建 Student 对象的时候必须创建 Computer。这里需要注意的是依赖关系不等于引用关系，Student 即使依赖 Computer 也可以不引用它</p><blockquote><p><strong>举例一： <code>student</code> 对象依赖 <code>computer</code> 对象，但我们不创建 <code>computer</code> 对象</strong></p></blockquote><p>在配置文件呢中，我们只实例化 <code>student</code> 对象，并且执行其 <code>depends-on</code> 属性等于 <code>computer</code>，表示<code>student</code> 对象的创建依赖于 <code>computer</code> 对象的创建</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student" depends-on="computer"&gt;    &lt;property name="stuId" value="233" /&gt;    &lt;property name="stuName" value="Oneby" /&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spring-advance-config.xml");        Student student = (Student) iocContainer.getBean("student");        System.out.println(student);    }}</code></pre><p>程序运行结果：<code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'student' defined in class path resource [spring-advance-config.xml]: 'student' depends on missing bean 'computer'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'computer' available</code></p><p>报错信息已经很明显了：<code>'student' depends on missing bean 'computer'</code>，说是缺少一个 <code>computer</code> 对象</p><blockquote><p><strong>举例二： <code>student</code> 对象依赖 <code>computer</code> 对象，我们就创建 <code>computer</code> 对象</strong></p></blockquote><p>既然 <code>student</code> 对象依赖 <code>computer</code> 对象，那么我们在配置文件中创建 <code>computer</code> 对象</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student" depends-on="computer"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"/&gt;</code></pre><p>程序运行结果：再次证明了以来不一定要引用</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0d5da41f2cd7281e2b7158f1e41a8045.png" alt="image"></p><h3 id="3-6、SpEL-表达式语言"><a href="#3-6、SpEL-表达式语言" class="headerlink" title="3.6、SpEL 表达式语言"></a>3.6、SpEL 表达式语言</h3><h4 id="3-6-1、SpEL-简介"><a href="#3-6-1、SpEL-简介" class="headerlink" title="3.6.1、SpEL 简介"></a>3.6.1、SpEL 简介</h4><blockquote><p><strong>SpEL 是什么？</strong></p></blockquote><p>SpEL 的全称是 Spring Expression Language，即 Spring 表达式语言，简称 SpEL，支持运行时查询并可以操作对象图，和 JSP 页面上的 EL 表达式、Struts2 中用到的 OGNL 表达式一样，SpEL 根据 JavaBean 风格的<code>getXxx()</code>、<code>setXxx()</code>方法定义的属性访问对象图，完全符合我们熟悉的操作习惯。</p><h4 id="3-6-2、SpEL-使用"><a href="#3-6-2、SpEL-使用" class="headerlink" title="3.6.2、SpEL 使用"></a>3.6.2、SpEL 使用</h4><blockquote><p><strong>0、基本语法</strong></p></blockquote><p>SpEL 使用<code>#{…}</code>作为定界符，所有在大框号中的字符都将被认为是 SpEL 表达式</p><blockquote><p><strong>1、字面量</strong></p></blockquote><ol><li><p>整数：<code>&lt;property name="count" value="#{5}"/&gt;</code></p></li><li><p>小数：<code>&lt;property name="frequency" value="#{89.7}"/&gt;</code></p></li><li><p>科学计数法：<code>&lt;property name="capacity" value="#{1e4}"/&gt;</code></p></li><li><p>String 类型的字面量可以使用单引号或者双引号作为字符串的定界符号</p></li><li><ol><li><code>&lt;property name="name" value="#{'Oneby'}"/&gt;</code></li></ol></li><li><ol><li><code>&lt;property name='name' value='#{"Oneby"}'/&gt;</code></li></ol></li><li><p>Boolean：<code>&lt;property name="enabled" value="#{false}"/&gt;</code></p></li></ol><blockquote><p><strong>2、引用其他 bean</strong></p></blockquote><p>在 <code>&lt;bean&gt;</code> 标签的 <code>value</code> 属性中通过 <code>#{对象名}</code> 引用其他 bean，注意：不能使用 <code>ref</code> 属性</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;    &lt;property name="computer" value="#{computer}"/&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"&gt;    &lt;property name="computerId" value="666"/&gt;    &lt;property name="computerName" value="HP"/&gt;&lt;/bean&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("spel-test.xml");        Student student = (Student) iocContainer.getBean("student");        System.out.println(student);    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d5f65d60c401bb5f706229fdb6c3c24.png" alt="image"></p><blockquote><p><strong>3、引用其他 bean 的属性</strong></p></blockquote><p>在 <code>&lt;property&gt;</code> 标签中通过 <code>#{对象名. 属性名}</code> 引用其他 bean 的属性</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;    &lt;property name="computer" &gt;        &lt;bean class="com.oneby.entity.Computer"&gt;            &lt;property name="computerId" value="#{computer.computerId}"/&gt;            &lt;property name="computerName" value="#{computer.computerName}"/&gt;        &lt;/bean&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"&gt;    &lt;property name="computerId" value="666"/&gt;    &lt;property name="computerName" value="HP"/&gt;&lt;/bean&gt;</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f926002d7e2794e183ea637aa83e2ceb.png" alt="image"></p><blockquote><p><strong>4、调用非静态方法</strong></p></blockquote><p>通过 <code>#{对象名. 方法名}</code> 调用对象的非静态方法</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="233"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;    &lt;property name="computer"&gt;        &lt;bean class="com.oneby.entity.Computer"&gt;            &lt;property name="computerId" value="#{computer.getComputerId()}"/&gt;            &lt;property name="computerName" value="#{computer.getComputerName()}"/&gt;        &lt;/bean&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;bean id="computer" class="com.oneby.entity.Computer"&gt;    &lt;property name="computerId" value="666"/&gt;    &lt;property name="computerName" value="HP"/&gt;&lt;/bean&gt;</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65dcf8402dc400bb99cae3c8e2c3f87d.png" alt="image"></p><blockquote><p><strong>5、调用静态方法</strong></p></blockquote><p>定义获取随机整数的方法，随机整数的范围为 <code>[start,end]</code></p><pre><code>public class MathUtil {    public static int getRandomInt(int start, int end) {        return (int) (Math.random() * (end - start + 1) + start);    }}</code></pre><p>通过 <code>T(静态类路径). 方法名</code> 调用静态方法</p><pre><code>&lt;bean id="student" class="com.oneby.entity.Student"&gt;    &lt;property name="stuId" value="#{T(com.oneby.util.MathUtil).getRandomInt(0,255)}"/&gt;    &lt;property name="stuName" value="Oneby"/&gt;&lt;/bean&gt;</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/03c5d5ac938de6be65b580118cef07b0.png" alt="image"></p><blockquote><p><strong>6、运算符</strong></p></blockquote><p>①算术运算符：+、-、*、/、%、^</p><p>②字符串连接：+</p><p>③比较运算符：&lt;、&gt;、==、&lt;=、&gt;=、lt、gt、eq、le、ge</p><p>④逻辑运算符：and, or, not, |</p><p>⑤三目运算符：判断条件? 判断结果为 true 时的取值: 判断结果为 false 时的取值</p><p>⑥正则表达式：matches</p><h3 id="3-7、注解方式配置-bean"><a href="#3-7、注解方式配置-bean" class="headerlink" title="3.7、注解方式配置 bean"></a>3.7、注解方式配置 bean</h3><h4 id="3-7-1、注解的概述"><a href="#3-7-1、注解的概述" class="headerlink" title="3.7.1、注解的概述"></a>3.7.1、注解的概述</h4><blockquote><p><strong>注解方式对比 XML 方式</strong></p></blockquote><p>相对于 XML 方式而言，通过注解的方式配置 bean 更加简洁和优雅，而且和 MVC 组件化开发的理念十分契合，是开发中常用的使用方式。</p><h4 id="3-7-2、标识组件"><a href="#3-7-2、标识组件" class="headerlink" title="3.7.2、标识组件"></a>3.7.2、标识组件</h4><blockquote><p><strong>用于标识 bean 的四个注解</strong></p></blockquote><p>①普通组件：<code>@Component</code>，用于标识一个受 Spring IOC 容器管理的组件</p><p>②持久化层组件：<code>@Respository</code>，用于标识一个受 Spring IOC 容器管理的持久化层组件</p><p>③业务逻辑层组件：<code>@Service</code>，用于标识一个受 Spring IOC 容器管理的业务逻辑层组件</p><p>④表述层控制器组件：<code>@Controller</code>，用于标识一个受 Spring IOC 容器管理的表述层控制器组件</p><p><strong>注意</strong>：事实上 Spring 并没有能力识别一个组件到底是不是它所标记的类型，即使将<code>@Respository</code>注解用在一个表述层控制器组件上面也不会产生任何错误，所以<code>@Respository</code>、<code>@Service</code>、<code>@Controller</code>这几个注解仅仅是为了让开发人员自己明确当前的组件扮演的角色。</p><blockquote><p><strong>组件命名规则</strong></p></blockquote><p>[1]默认情况：使用组件的简单类名首字母小写后得到的字符串作为 bean 的<code>id</code></p><p>[2]使用组件注解的<code>value</code>属性指定 bean 的<code>id</code></p><h4 id="3-7-3、扫描组件"><a href="#3-7-3、扫描组件" class="headerlink" title="3.7.3、扫描组件"></a>3.7.3、扫描组件</h4><blockquote><p><strong>引入 AOP 依赖</strong></p></blockquote><p>引入 AOP 相关依赖，不然开启组件扫描时会报错：<code>org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [annotation-config.xml]; nested exception is java.lang.NoClassDefFoundError: org/springframework/aop/TargetSource</code></p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;    &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p><strong>引入 context 名称空间</strong></p></blockquote><p>将 <code>xmlns="http://www.springframework.org/schema/beans"</code> 和 <code>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</code> 复制，并将出现 <code>beans</code> 的位置全部替换为 <code>context</code></p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd"&gt;</code></pre><blockquote><p><strong>开启组件扫描</strong></p></blockquote><p>开启组件扫描，并指明要扫描的包路径</p><pre><code>&lt;context:component-scan base-package="com.oneby"/&gt;</code></pre><blockquote><p><strong>组件扫描的注意事项</strong></p></blockquote><p>组件扫描的详细说明</p><p>[1]base-package 属性指定一个需要扫描的基类包，Spring 容器将会扫描这个基类包及其子包中的所有类。</p><p>[2]当需要扫描多个包时可以使用逗号分隔。</p><p>[3]如果仅希望扫描特定的类而非基包下的所有类，可使用<code>resource-pattern</code>属性过滤特定的类，示例：</p><pre><code>&lt;context:component-scan     base-package="com.oneby"     resource-pattern="autowire/*.class"/&gt;</code></pre><p><strong>包含与排除</strong></p><ol><li><p><code>&lt;context:include-filter&gt;</code>子节点表示要包含的目标类。注意：通常需要与<code>use-default-filters</code>属性配合使用才能够达到 “仅包含某些组件” 这样的效果。即：通过将<code>use-default-filters</code>属性设置为<code>false</code>，禁用默认过滤器，然后扫描的就只是<code>include-filter</code>中的规则指定的组件了。</p></li><li><p><code>&lt;context:exclude-filter&gt;</code>子节点表示要排除在外的目标类</p></li><li><p><code>component-scan</code>下可以拥有若干个<code>include-filter</code>和 exclude-filter 子节点</p></li></ol><p><strong>包扫描举例</strong></p><pre><code>&lt;context:component-scan base-package="com.oneby" use-default-filters="false"&gt;    &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;&lt;/context:component-scan&gt; &lt;context:component-scan base-package="com.oneby"&gt;    &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;&lt;/context:component-scan&gt;</code></pre><p><strong>过滤表达式</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7598f370be53f4960a8a046b55efaef5.png" alt="image"></p><h4 id="3-7-4、组件装配"><a href="#3-7-4、组件装配" class="headerlink" title="3.7.4、组件装配"></a>3.7.4、组件装配</h4><blockquote><p><strong>组件装配的说明</strong></p></blockquote><p><strong>项目中组件装配的需求</strong></p><p>Controller 组件中往往需要用到 Service 组件的实例，Service 组件中往往需要用到 Repository 组件的实例。Spring 可以通过注解的方式帮我们实现属性的装配。</p><p><strong>组件扫描的原理</strong></p><p>在指定要扫描的包时，<code>&lt;context:component-scan&gt;</code> 元素会自动注册一个 bean 的后置处理器：<code>AutowiredAnnotationBeanPostProcessor</code>的实例。该后置处理器可以自动装配标记了<code>@Autowired</code>、<code>@Resource</code>或<code>@Inject</code>注解的属性</p><p><strong><code>@Autowired</code>注解</strong></p><p>[1]根据类型实现自动装配。</p><p>[2]构造器、普通字段 (即使是非<code>public</code>)、一切具有参数的方法都可以应用<code>@Autowired</code>注解</p><p>[3]默认情况下，所有使用<code>@Autowired</code>注解的属性都需要被设置。当 Spring 找不到匹配的 bean 装配属性时，会抛出异常。</p><p>[4]若某一属性允许不被设置，可以设置<code>@Autowired</code>注解的<code>required</code>属性为 <code>false</code></p><p>[5]默认情况下，当 IOC 容器里存在多个类型兼容的 bean 时，Spring 会尝试匹配 bean 的<code>id</code>值是否与变量名相同，如果相同则进行装配。如果 bean 的<code>id</code>值不相同，通过类型的自动装配将无法工作。此时可以在<code>@Qualifier</code>注解里提供 bean 的名称。Spring 甚至允许在方法的形参上标注<code>@Qualifiter</code>注解以指定注入 bean 的名称。</p><p>[6]<code>@Autowired</code>注解也可以应用在数组类型的属性上，此时 Spring 将会把所有匹配的 bean 进行自动装配。</p><p>[7]<code>@Autowired</code>注解也可以应用在集合属性上，此时 Spring 读取该集合的类型信息，然后自动装配所有与之兼容的 bean。</p><p>[8]<code>@Autowired</code>注解用在<code>java.util.Map</code>上时，若该<code>Map</code>的键值为<code>String</code>，那么 Spring 将自动装配与值类型兼容的 bean 作为值，并以 bean 的<code>id</code>值作为键。</p><p><strong><code>@Qualifier</code>注解</strong></p><p>通过类型的自动装配将无法工作。此时可以在<code>@Qualifier</code>注解里提供 bean 的名称，<code>@Qualifier</code>注解需要和上面<code>@Autowired</code>注解一起使用</p><pre><code>@Autowired @Qualifier(value = "orderDao1") private OrderDao orderDao;</code></pre><p><strong><code>@Resource</code>注解</strong></p><p><code>@Resource</code>注解要求提供一个 bean 名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为 bean 的名称。<code>@Resource</code>是 JDK 提供的注解，咱还是尽量使用 Spring 提供的注解吧~</p><p>解释上面那句话：如果使用<code>@Resource</code>则表示按照类型进行注入，我觉得等同于<code>@Autowire</code>的效果吧；如果使用<code>@Resource(name="Xxx")</code>则表示根据 bean 的名称进行注入</p><pre><code>@Resource(name = "orderDao1") private OrderDao orderDao;</code></pre><p><strong><code>@Inject</code>注解</strong></p><p><code>@Inject</code>和<code>@Autowired</code>注解一样也是按类型注入匹配的 bean，但没有 reqired 属性。奇怪了，难道 Spring 5.2.6 版本该注解被移除了吗？</p><p><strong><code>@Value</code>注解</strong></p><p><code>@Value</code>注解用于注入普通属性的值，比如<code>@Value(value = "Oneby")</code>表示将<code>"Oneby"</code>字符串注入到属性中</p><pre><code>@Value(value = "Oneby") private String name;</code></pre><blockquote><p><strong>组件装配的代码示例</strong></p></blockquote><p>DAO 层推荐使用 <code>@Repository</code> 注解标识 bean</p><pre><code>@Repositorypublic class OrderDao {    public void sell() {        System.out.println("DAO 层操作：商品库存减一");    }}</code></pre><p>Service 层推荐使用 <code>@Service</code> 注解标识 bean，并通过 <code>@Autowired</code> 注解标识</p><pre><code>@Servicepublic class OrderService {    @Autowired    private OrderDao orderDao;    public void sell() {        orderDao.sell();        System.out.println("Service 层操作：出售一件商品");    }}</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("annotation-config.xml");        OrderService orderService = (OrderService) iocContainer.getBean("orderService");        orderService.sell();    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/13d00e145fce8642506a47b5a6a8ac4f.png" alt="image"></p><h4 id="3-7-5、完全注解开发"><a href="#3-7-5、完全注解开发" class="headerlink" title="3.7.5、完全注解开发"></a>3.7.5、完全注解开发</h4><blockquote><p><strong>创建 Spring 配置类</strong></p></blockquote><p>创建 <code>SpringConfig</code> 配置类，代替之前的 XML 配置文件</p><ol><li><p><code>@Configuration</code> 标识这是一个配置类</p></li><li><p><code>@ComponentScan(basePackages = "com.oneby")</code> 配置组件扫描</p></li><li><p><code>@Bean</code> 用于向 IOC 容器中注入一个普通的 bean</p></li></ol><pre><code>@Configuration@ComponentScan(basePackages = "com.oneby")public class SpringConfig {    @Bean    public OrderService getOrderService(){        return new OrderService();    }}</code></pre><blockquote><p><strong>完全注解的代码测试</strong></p></blockquote><p>测试代码：这次需要 <code>new</code> 一个 <code>AnnotationConfigApplicationContext</code> 对象，并传入配置类的类型</p><pre><code>@Testpublic void testCompleteAnnotation() {    ApplicationContext iocContainer =            new AnnotationConfigApplicationContext(SpringConfig.class);    OrderService orderService = (OrderService) iocContainer.getBean("orderService");    orderService.sell();}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c5eeefb0688a029f5d6aa42202bf68cd.png" alt="image"></p><h3 id="3-8、泛型依赖注入"><a href="#3-8、泛型依赖注入" class="headerlink" title="3.8、泛型依赖注入"></a>3.8、泛型依赖注入</h3><blockquote><p><strong>泛型依赖注入的概述</strong></p></blockquote><p>Spring 4.x 中可以为子类注入子类对应的泛型类型的成员变量的引用</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ff8a184b65fe9b9a84cbabd2398e7c5a.png" alt="image"></p><blockquote><p><strong>泛型依赖注入的实现</strong></p></blockquote><p><strong>组件基类</strong></p><pre><code>BaseRepository</code></pre><pre><code>public class BaseRepository&lt;T&gt; {    public void save() {        System.out.println("Saved by BaseRepository");    }}</code></pre><pre><code>BaseService</code></pre><pre><code>public class BaseService&lt;T&gt; {    @Autowired    private BaseRepository&lt;T&gt; repository;    public void add() {        repository.save();    }}</code></pre><p><strong>组件实体类</strong></p><pre><code>UserRepository</code></pre><pre><code>@Repositorypublic class UserRepository extends BaseRepository&lt;User&gt;{    public void save() {        System.out.println("Saved by UserRepository");    }}</code></pre><pre><code>UserService</code></pre><pre><code>@Servicepublic class UserService extends BaseService&lt;User&gt;{}</code></pre><p><strong>模型实体类</strong></p><pre><code>User</code></pre><pre><code>public class User {}</code></pre><p><strong>测试</strong></p><p>测试代码</p><pre><code>@Testpublic void test() {    ApplicationContext ioc = new ClassPathXmlApplicationContext("di.xml");    UserService us = (UserService) ioc.getBean("userService");    us.add();}</code></pre><p>执行结果</p><pre><code>Saved by UserRepository</code></pre><p><strong>PS</strong>：看球不懂</p><h3 id="3-9、配置文件整合"><a href="#3-9、配置文件整合" class="headerlink" title="3.9、配置文件整合"></a>3.9、配置文件整合</h3><blockquote><p><strong>Spring 可以很方便地整合其他配置文件</strong></p></blockquote><ol><li><p>Spring 允许通过<code>&lt;import&gt;</code>将多个配置文件引入到一个文件中，进行配置文件的集成。这样在启动 Spring 容器时，仅需要指定这个合并好的配置文件就可以。</p></li><li><p><code>import</code>元素的<code>resource</code>属性支持 Spring 的标准的路径资源</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/ba4c55dc0191a1d52b4c8f3dccf0f306.png" alt="image"></p><h2 id="4、AOP"><a href="#4、AOP" class="headerlink" title="4、AOP"></a>4、AOP</h2><h3 id="4-1、AOP-前奏"><a href="#4-1、AOP-前奏" class="headerlink" title="4.1、AOP 前奏"></a>4.1、AOP 前奏</h3><blockquote><p><strong>提出问题：数学计算器案例</strong></p></blockquote><p><strong>计算器要求</strong></p><p>①执行加减乘除运算</p><p>②日志：在程序执行期间追踪正在发生的活动</p><p>③验证：希望计算器只能处理正数的运算</p><blockquote><p><strong>计算器的常规实现</strong></p></blockquote><p>UML 类图</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c1e2b94ccec432dde6b370f0a59dc851.png" alt="image"></p><p>计算器的常规实现代码（这里为了形参类型为 <code>int</code>，无伤大雅）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6bc3135bd4c77428be438592fc9ef3de.png" alt="image"></p><p><strong>常规实现存在的问题</strong></p><p><strong>代码混乱</strong>：越来越多的非业务需求（日志和验证等）加入后，原有的业务方法急剧膨胀。每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点。</p><p><strong>代码分散</strong>：以日志需求为例，只是为了满足这个单一需求，就不得不在多个模块（方法）里多次重复相同的日志代码。如果日志需求发生变化，必须修改所有模块。</p><blockquote><p><strong>动态代理的介绍</strong></p></blockquote><p><strong>代理设计模式的原理</strong>：使用一个代理将对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d1a60b5c7be84b55ccc6bc01f593f565.png" alt="image"></p><blockquote><p><strong>数学计算器的改进</strong></p></blockquote><p>日志处理器</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e617b95c1e2b396afb8e977366337d7.png" alt="image"></p><p>验证处理器</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f8e051a6c8e65472c814128535d823c4.png" alt="image"></p><p>测试代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/179095d1d464b03187f8bcd987fd274f.png" alt="image"></p><h3 id="4-2、AOP-概述"><a href="#4-2、AOP-概述" class="headerlink" title="4.2、AOP 概述"></a>4.2、AOP 概述</h3><blockquote><p><strong>AOP 概述</strong></p></blockquote><ol><li><p>AOP(Aspect-Oriented Programming，面向切面编程)：是一种新的方法论，是对传统 OOP(Object-Oriented Programming，面向对象编程) 的补充。</p></li><li><p>AOP 编程操作的主要对象是切面 (aspect)，而切面模块化横切关注点。</p></li><li><p>在应用 AOP 编程时，仍然需要定义公共功能，但可以明确的定义这个功能应用在哪里，以什么方式应用，并且不必修改受影响的类。这样一来横切关注点就被模块化到特殊的类里——这样的类我们通常称之为 “切面”。</p></li><li><p>AOP 的好处：每个事物逻辑位于一个位置，代码不分散，便于维护和升级；业务模块更简洁，只包含核心业务代码</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/81f76d3b5c4489ea9b44bc6fc2b9ba87.png" alt="image"></p><p><strong>用通俗的话将</strong>：面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，可在不通过修改源代码方式，在主干功能里面添加新功能</p><blockquote><p><strong>AOP 相关术语</strong></p></blockquote><p><strong>看不懂的专业术语</strong></p><p><strong>通知（Advice）</strong>：就是你想要的功能，也就是上面说的日志处理、验证处理等。你给先定义好把，然后在想用的地方用一下。</p><p><strong>连接点（JoinPoint）</strong>：这个更好解释了，就是 Spring 允许你使用通知的地方，那可真就多了，基本每个方法的前，后（两者都有也行），或抛出异常时都可以是连接点，spring 只支持方法连接点. 其他如 aspectJ 还可以让你在构造器或属性注入时都行，不过那不是咱关注的，只要记住，和方法有关的前前后后（抛出异常），都是连接点。</p><p><strong>切入点（Pointcut）</strong>：上面说的连接点的基础上，来定义切入点，你的一个类里，有 15 个方法，那就有几十个连接点了对把，但是你并不想在所有方法附近都使用通知（使用叫织入，以后再说），你只想让其中的几个，在调用这几个方法之前，之后或者抛出异常时干点什么，那么就用切点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。</p><p><strong>切面（Aspect）</strong>：切面是通知和切入点的结合。现在发现了吧，没连接点什么事情，连接点就是为了让你好理解切入点，搞出来的，明白这个概念就行了。通知说明了干什么和什么时候干（什么时候通过方法名中的 before，after，around 等就能知道），而切入点说明了在哪干（指定到底是哪个方法），这就是一个完整的切面定义。</p><p><strong>引入（introduction）</strong>：允许我们向现有的类添加新方法属性。这不就是把切面（也就是新方法属性：通知定义的）用到目标类中吗</p><p><strong>目标（target）</strong>：引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。而自己专注于业务本身的逻辑。</p><p><strong>代理（proxy）</strong>：怎么实现整套 aop 机制的，都是通过代理。</p><p><strong>织入（weaving）</strong>：把切面应用到目标对象来创建新的代理对象的过程。有 3 种方式，spring 采用的是运行时。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6913d0eabd6e90b26bd74fc753e61ef5.png" alt="image"></p><p><strong>用通俗的话讲</strong></p><p>连接点：类里面哪些方法可以被增强，这些方法被称为连接点</p><p>切入点：实际被真正增强的方法，称为切入点</p><p>通知（增强）：实际增强的逻辑部分称为通知（增强）。通知的类型：前置通知、后置通知、环绕通知、异常通知、最终通知</p><p>切面：把通知应用到切入点过程（是动作）</p><blockquote><p><strong>AspectJ 简介</strong></p></blockquote><p>AspectJ：Java 社区里最完整最流行的 AOP 框架。在 Spring2.0 以上版本中，可以使用基于 AspectJ 注解或基于 XML 配置的 AOP。</p><blockquote><p><strong>在 Spring 中使用 AspectJ 进行 AOP 操作</strong></p></blockquote><p><strong>实现 AOP 操作的步骤</strong></p><p>编写切面类（通过 <code>@Aspect</code> 注解标识这是一个切面类），并且不要忘记将切面类交给 Spring IOC 管理（<code>Component</code> 注解），并编写相应的通知方法与切入点表达式</p><p>在 Spring 配置文件中开启 aop 功能：通过 <code>&lt;aop:aspectj-autoproxy/&gt;</code> 注解开启 aop 功能。当 Spring IOC 容器侦测到 bean 配置文件中的<code>&lt;aop:aspectj-autoproxy&gt;</code>元素时，会自动为与 AspectJ 切面匹配的 bean 创建代理</p><p><strong>AspectJ 支持 5 种类型的通知注解</strong></p><p>[1]<code>@Before</code>：前置通知，在方法执行之前执行</p><p>[2]<code>@After</code>：后置通知，在方法执行之后执行</p><p>[3]<code>@AfterRunning</code>：返回通知，在方法返回结果之后执行</p><p>[4]<code>@AfterThrowing</code>：异常通知，在方法抛出异常之后执行</p><p>[5]<code>@Around</code>：环绕通知，围绕着方法执行</p><h3 id="4-3、AOP-细节"><a href="#4-3、AOP-细节" class="headerlink" title="4.3、AOP 细节"></a>4.3、AOP 细节</h3><blockquote><p><strong>准备工作：在 Spring 中使用 AspectJ</strong></p></blockquote><p>引入 maven 依赖：引入 aop 和 aspects 相关的依赖</p><pre><code>&lt;!-- spring-aop --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;    &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- spring-aspects --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;    &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- aspectjweaver --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;    &lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt;&lt;!-- aopalliance --&gt;&lt;dependency&gt;    &lt;groupId&gt;aopalliance&lt;/groupId&gt;    &lt;artifactId&gt;aopalliance&lt;/artifactId&gt;    &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- cglib --&gt;&lt;dependency&gt;    &lt;groupId&gt;net.sourceforge.cglib&lt;/groupId&gt;    &lt;artifactId&gt;com.springsource.net.sf.cglib&lt;/artifactId&gt;    &lt;version&gt;2.2.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>编写 Spring 配置文件：引入 <code>context</code> 和 <code>aop</code> 名称空间；开启组件扫描，并指明包路径；开启自动代理功能</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd                http://www.springframework.org/schema/aop                http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;    &lt;context:component-scan base-package="com.oneby"/&gt;    &lt;aop:aspectj-autoproxy/&gt;&lt;/beans&gt;</code></pre><p><code>ArithmeticCalculator</code> 接口：定义各种数学运算方法</p><pre><code>public interface ArithmeticCalculator {    void add(int i, int j);    void sub(int i, int j);    void mul(int i, int j);    void div(int i, int j);}</code></pre><p><code>ArithmeticCalculatorImpl</code> 类：实现了 <code>ArithmeticCalculator</code> 接口中各种抽象的数学运算方法</p><pre><code>@Componentpublic class ArithmeticCalculatorImpl implements ArithmeticCalculator {    @Override    public void add(int i, int j) {        int result = i + j;        System.out.println("计算器计算得到的结果为： " + result);    }    @Override    public void sub(int i, int j) {        int result = i - j;        System.out.println("计算器计算得到的结果为： " + result);    }    @Override    public void mul(int i, int j) {        int result = i * j;        System.out.println("计算器计算得到的结果为： " + result);    }    @Override    public void div(int i, int j) {        int result = i / j;        System.out.println("计算器计算得到的结果为： " + result);    }}</code></pre><blockquote><p><strong>切入点表达式的相关细节</strong></p></blockquote><p><strong>切入点的作用</strong>：通过表达式的方式定位一个或多个具体的连接点（哪些方法需要被增强）</p><p><strong>切入点表达式的语法格式</strong>：<code>execution([权限修饰符] [返回值类型] [简单类名 / 全类名] [方法名]([参数列表]))</code></p><p><strong>切入点表达式的举例一</strong></p><p>表达式：<code>execution(* com.atguigu.spring.ArithmeticCalculator.*(..))</code></p><p>含义：增强 <code>ArithmeticCalculator</code> 接口中声明的所有方法</p><p>解释说明：第一个 “<em>” 代表任意修饰符及任意返回值；第二个 “</em>” 代表任意方法；“…” 匹配任意数量、任意类型的参数</p><p>注：若目标类、接口与该切面类在同一个包中可以省略包名</p><p><strong>切入点表达式的举例二</strong></p><p>表达式：<code>execution(public * ArithmeticCalculator.*(..))</code></p><p>含义： 增强 <code>ArithmeticCalculator</code> 接口的所有公有方法（TMD 接口中的方法不都是 public 吗）</p><p><strong>切入点表达式的举例三</strong></p><p>表达式：<code>execution(public double ArithmeticCalculator.*(..))</code></p><p>含义：增强 <code>ArithmeticCalculator</code> 接口中返回 double 类型数值的方法</p><p><strong>切入点表达式的举例四</strong></p><p>表达式：<code>execution(public double ArithmeticCalculator.*(double, ..))</code></p><p>含义：第一个参数为 double 类型的方法。“…” 匹配任意数量、任意类型的参数</p><p><strong>切入点表达式的举例五</strong></p><p>表达式： <code>execution(public double ArithmeticCalculator.*(double, double))</code></p><p>含义：参数类型为 double，double 类型的方法</p><p><strong>切入点表达式的举例六</strong>：在 AspectJ 中，切入点表达式可以通过 “&amp;&amp;”、“||”、“!” 等操作符结合起来。</p><p>表达式：<code>execution (* *.add(int,..)) || execution(* *.sub(int,..))</code></p><p>含义：任意类中第一个参数为 int 类型的 add 方法或 sub 方法</p><p><strong>将切入点表达式应用到实际的切面类中</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/587e93b1a867964809ac4ab4ac6571e8.png" alt="image"></p><blockquote><p><strong>当前连接点的相关细节</strong></p></blockquote><p>切入点表达式通常都会是从宏观上定位一组方法，和具体某个通知的注解结合起来就能够确定对应的连接点。</p><p>那么就一个具体的连接点而言，我们可能会关心这个连接点的一些具体信息，例如：当前连接点所在方法的方法名、当前传入的参数值等等。这些信息都封装在<code>JoinPoint</code>接口的实例对象中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/78619158e9a273e6d33d43991b05a5de.png" alt="image"></p><blockquote><p><strong>五种通知的相关细节</strong></p></blockquote><p><strong>通知的概述</strong></p><ol><li><p>在具体的连接点上要执行的操作。</p></li><li><p>一个切面可以包括一个或者多个通知。</p></li><li><p>通知所使用的注解的值往往就是切入点表达式</p></li></ol><p><strong>前置通知</strong></p><p>前置通知：在方法执行之前执行的通知，使用<code>@Before</code>注解</p><p><strong>后置通知</strong></p><p>后置通知：后置通知是在连接点完成之后执行的，即连接点返回结果或者抛出异常的时候，使用<code>@After</code>注解</p><p><strong>返回通知</strong></p><p>返回通知：无论连接点是正常返回还是抛出异常，后置通知都会执行。如果只想在连接点返回的时候记录日志，应使用返回通知代替后置通知。使用<code>@AfterReturning</code>注解</p><p><strong>在返回通知中访问连接点的返回值</strong>：</p><ol><li><p>在返回通知中，只要将 returning 属性添加到<code>@AfterReturning</code>注解中，就可以访问连接点的返回值。该属性的值即为用来传入返回值的参数名称</p></li><li><p>必须在通知方法的签名中添加一个同名参数。在运行时 Spring AOP 会通过这个参数传递返回值</p></li><li><p>原始的切点表达式需要出现在<code>pointcut</code>属性中</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/b8e4d00e647ba923b7b2087a34c11834.png" alt="image"></p><p><strong>异常通知</strong></p><p>异常通知：只在连接点抛出异常时才执行异常通知</p><p>将<code>throwing</code>属性添加到<code>@AfterThrowing</code>注解中，也可以访问连接点抛出的异常。Throwable 是所有错误和异常类的顶级父类，所以在异常通知方法可以捕获到任何错误和异常。</p><p>如果只对某种特殊的异常类型感兴趣，可以将参数声明为其他异常的参数类型。然后通知就只在抛出这个类型及其子类的异常时才被执行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d0af21735b98834530cea299c03b38f3.png" alt="image"></p><p>环绕通知</p><p>环绕通知是所有通知类型中功能最为强大的，能够全面地控制连接点，甚至可以控制是否执行连接点。</p><p>对于环绕通知来说，连接点的参数类型必须是<code>ProceedingJoinPoint</code>。它是 <code>JoinPoint</code>的子接口，允许控制何时执行，是否执行连接点。</p><p>在环绕通知中需要明确调用<code>ProceedingJoinPoint</code>的<code>proceed()</code>方法来执行被代理的方法。如果忘记这样做就会导致通知被执行了，但目标方法没有被执行。</p><p>注意：环绕通知的方法需要返回目标方法执行之后的结果，即调用 <code>joinPoint.proceed();</code>的返回值，否则会出现空指针异常。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/45106e9e30ad1a01334e697bc0226df5.png" alt="image"></p><h3 id="4-4、AOP-注解方式"><a href="#4-4、AOP-注解方式" class="headerlink" title="4.4、AOP 注解方式"></a>4.4、AOP 注解方式</h3><blockquote><p><strong>准备工作：在 Spring 中使用 AspectJ</strong></p></blockquote><p>引入 maven 依赖：引入 aop 和 aspects 相关的依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;    &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;    &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;    &lt;version&gt;1.9.6&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;aopalliance&lt;/groupId&gt;    &lt;artifactId&gt;aopalliance&lt;/artifactId&gt;    &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;net.sourceforge.cglib&lt;/groupId&gt;    &lt;artifactId&gt;com.springsource.net.sf.cglib&lt;/artifactId&gt;    &lt;version&gt;2.2.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>编写 Spring 配置文件：引入 <code>context</code> 和 <code>aop</code> 名称空间；开启组件扫描，并指明包路径；开启自动代理功能</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd                http://www.springframework.org/schema/aop                http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;    &lt;context:component-scan base-package="com.oneby"/&gt;    &lt;aop:aspectj-autoproxy/&gt;&lt;/beans&gt;</code></pre><blockquote><p><strong>目标类的定义</strong></p></blockquote><p><code>ArithmeticCalculator</code> 接口：定义各种数学运算方法</p><pre><code>public interface ArithmeticCalculator {    void add(int i, int j);    void sub(int i, int j);    void mul(int i, int j);    void div(int i, int j);}</code></pre><p><code>ArithmeticCalculatorImpl</code> 类：实现了 <code>ArithmeticCalculator</code> 接口中各种抽象的数学运算方法</p><pre><code>@Componentpublic class ArithmeticCalculatorImpl implements ArithmeticCalculator {    @Override    public void add(int i, int j) {        int result = i + j;        System.out.println("计算器计算得到的结果为： " + result);    }    @Override    public void sub(int i, int j) {        int result = i - j;        System.out.println("计算器计算得到的结果为： " + result);    }    @Override    public void mul(int i, int j) {        int result = i * j;        System.out.println("计算器计算得到的结果为： " + result);    }    @Override    public void div(int i, int j) {        int result = i / j;        System.out.println("计算器计算得到的结果为： " + result);    }}</code></pre><blockquote><p><strong>切面类的定义</strong></p></blockquote><ol><li><p><code>@Aspect</code> 注解标识这是一个切面类</p></li><li><p><code>@Component</code> 注解将这个切面类对象交由 Spring IOC 进行管理</p></li><li><p><code>execution(* com.oneby.calc.ArithmeticCalculator.*(..))</code> 表示增强 <code>ArithmeticCalculator</code> 接口中的所有方法</p></li></ol><pre><code>@Component@Aspectpublic class CalculatorLoggingAspect {    @Before(value = "execution(* com.oneby.calc.ArithmeticCalculator.*(..))")    public void before(JoinPoint joinPoint) {        System.out.println("@Before 前置通知");    }    @After(value = "execution(* com.oneby.calc.ArithmeticCalculator.*(..))")    public void after(JoinPoint joinPoint) {        System.out.println("@After 后置通知");    }    @AfterReturning(value = "execution(* com.oneby.calc.ArithmeticCalculator.*(..))")    public void afterReturning(JoinPoint joinPoint) {        System.out.println("@AfterReturning 返回后通知");    }    @AfterThrowing(value = "execution(* com.oneby.calc.ArithmeticCalculator.*(..))")    public void afterThrowing(JoinPoint joinPoint) {        System.out.println("@AfterThrowing 异常通知");    }    @Around(value = "execution(* com.oneby.calc.ArithmeticCalculator.*(..))")    public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        System.out.println("@Around 环绕通知之前");        proceedingJoinPoint.proceed();         System.out.println("@Around 环绕通知之后");    }}</code></pre><blockquote><p><strong>代码测试</strong></p></blockquote><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("aop-test.xml");        ArithmeticCalculator arithmeticCalculator = iocContainer.getBean(ArithmeticCalculator.class);        System.out.println("spring版本：" + SpringVersion.getVersion() + "下的测试");        arithmeticCalculator.add(1, 1);    }}</code></pre><p>程序运行结果：我嘞个去，之前测试过 Spring 的通知执行顺序：<a href="https://blog.csdn.net/oneby1314/article/details/113789384">第 4 章 Spring</a>，不是说 Spring5 下的通知改进了吗？已经和 Spring4 下的通知执行顺序不一样了，咋还是和 Spring 的通知顺序一样</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7459840952675768ec1ee4a0fb017423.png" alt="image"></p><p><strong>Spring 5.2.8 版本下的测试</strong></p><p>还好之前跟着阳哥测试了一波，我将 Spring 版本改为 5.2.8 后，通知的执行顺序就正常啦：环绕通知包裹住其他通知；并且 <code>@Atfer</code> 在 <code>@AfterReturning</code> 之后执行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ce065ce3125e299c12ba1b889614204b.png" alt="image"></p><p><strong>异常情况下的通知执行顺序</strong></p><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("aop-test.xml");        ArithmeticCalculator arithmeticCalculator = iocContainer.getBean(ArithmeticCalculator.class);        System.out.println("spring版本：" + SpringVersion.getVersion() + "下的测试");        arithmeticCalculator.div(1, 0);    }}</code></pre><p>程序运行结果：首先目标方法没有执行；没有 <code>@AtferReturning</code> 通知，之前 <code>@AtferReturning</code> 通知的地方变为了 <code>@AtferThrowing</code>；<code>Around</code> 后置环绕通知也没有执行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5e97108742ac0efe506b18d3008b3530.png" alt="image"></p><blockquote><p><strong>完全使用注解方式进行 aop 开发</strong></p></blockquote><p>创建 <code>SpringAopConfig</code> 配置类：①<code>@Configuration</code> 表示这是一个配置类；②<code>@ComponentScan(basePackages = "com.oneby")</code> 配置包扫描路径为 <code>com.oneby</code>；③<code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code> 表示开启 AOP 自动代理</p><pre><code>@Configuration@ComponentScan(basePackages = "com.oneby")@EnableAspectJAutoProxy(proxyTargetClass = true)public class SpringAopConfig {}</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void testAnnotation() {        ApplicationContext iocContainer =                new AnnotationConfigApplicationContext(SpringAopConfig.class);        ArithmeticCalculator arithmeticCalculator = iocContainer.getBean(ArithmeticCalculator.class);        System.out.println("spring版本：" + SpringVersion.getVersion() + "下的测试");        arithmeticCalculator.div(1, 0);    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fc2324f745a1ab03991034d31acbe7b0.png" alt="image"></p><h3 id="4-5、AOP-进阶操作"><a href="#4-5、AOP-进阶操作" class="headerlink" title="4.5、AOP 进阶操作"></a>4.5、AOP 进阶操作</h3><blockquote><p><strong>重用切入点定义</strong></p></blockquote><p>在编写 AspectJ 切面时，可以直接在通知注解中书写切入点表达式。但同一个切点表达式可能会在多个通知中重复出现。</p><p>在 AspectJ 切面中，可以通过<code>@Pointcut</code>注解将一个切入点声明成简单的方法。切入点的方法体通常是空的。</p><p>切入点方法的访问控制符同时也控制着这个切入点的可见性。如果切入点要在多个切面中共用，最好将它们集中在一个公共的类中。在这种情况下，它们必须被声明为<code>public</code>。在引入这个切入点时，必须将类名也包括在内。如果类没有与这个切面放在同一个包中，还必须包含包名。</p><p>其他通知可以通过方法名称引入该切入点</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1ac722bd8f5c31f96bf44391d24c89b7.png" alt="image"></p><blockquote><p><strong>指定切面的优先级</strong></p></blockquote><p>在同一个连接点上应用不止一个切面时，除非明确指定，否则它们的优先级是不确定的。</p><p>切面的优先级可以通过实现<code>Ordered</code>接口或利用<code>@Order</code>注解指定。</p><p>实现<code>Ordered</code>接口，<code>getOrder()</code>方法的返回值越小，优先级越高。</p><p>若使用<code>@Order</code>注解，序号出现在注解中</p><pre><code>@Component@Aspect@Order(0)public class CalculatorValidationAspect {@Component@Aspect@Order(1)public class CalculatorLoggingAspect {</code></pre><h3 id="4-6、AOP-XML-方式"><a href="#4-6、AOP-XML-方式" class="headerlink" title="4.6、AOP XML 方式"></a>4.6、AOP XML 方式</h3><blockquote><p><strong>XML 配置概述</strong></p></blockquote><p>除了使用 AspectJ 注解声明切面，Spring 也支持在 bean 配置文件中声明切面。这种声明是通过 aop 名称空间中的 XML 元素完成的。</p><p>正常情况下，基于注解的声明要优先于基于 XML 的声明。通过 AspectJ 注解，切面可以与 AspectJ 兼容，而基于 XML 的配置则是 Spring 专有的。由于 AspectJ 得到越来越多的 AOP 框架支持，因此以注解风格编写的切面将会有更多重用的机会。</p><blockquote><p><strong>XML 配置细节</strong></p></blockquote><p><strong>配置切面</strong></p><p>在 bean 配置文件中，所有的 Spring AOP 配置都必须定义在<code>&lt;aop:config&gt;</code>元素内部。对于每个切面而言，都要创建一个<code>&lt;aop:aspect&gt;</code>元素来为具体的切面实现引用后端 bean 实例。切面 bean 必须有一个标识符，供<code>&lt;aop:aspect&gt;</code>元素引用。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/33ed3196a7b11e1f13e1357b52d33fd9.png" alt="image"></p><p><strong>声明切入点</strong></p><ol><li><p>切入点使用<code>&lt;aop:pointcut&gt;</code>元素声明。</p></li><li><p>切入点必须定义在<code>&lt;aop:aspect&gt;</code>元素下，或者直接定义在<code>&lt;aop:config&gt;</code>元素下。</p></li><li><p>定义在<code>&lt;aop:aspect&gt;</code>元素下：只对当前切面有效</p></li><li><p>定义在<code>&lt;aop:config&gt;</code>元素下：对所有切面都有效</p></li><li><p>基于 XML 的 AOP 配置不允许在切入点表达式中用名称引用其他切入点。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/a0fd4ecf90e301a6bd6b35e0cdfa0e88.png" alt="image"></p><p><strong>声明通知</strong></p><ol><li><p>在 aop 名称空间中，每种通知类型都对应一个特定的 XML 元素。</p></li><li><p>通知元素需要使用<code>&lt;pointcut-ref&gt;</code>来引用切入点，或用<code>&lt;pointcut&gt;</code>直接嵌入切入点表达式。</p></li><li><p><code>method</code>属性指定切面类中通知方法的名称</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/ee8d154a0e425b09fdfdc6f9a6c86caa.png" alt="image"></p><blockquote><p><strong>XML 配置细节</strong></p></blockquote><p>XML 配置文件</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd                http://www.springframework.org/schema/aop                http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;    &lt;aop:aspectj-autoproxy/&gt;    &lt;bean id="arithmeticCalculatorImpl" class="com.oneby.calc.ArithmeticCalculatorImpl"/&gt;    &lt;bean id="calculatorLoggingAspect" class="com.oneby.calc.CalculatorLoggingAspect"/&gt;    &lt;aop:config&gt;        &lt;aop:pointcut id="calcPointcut" expression="execution(* com.oneby.calc.ArithmeticCalculator.*(..))"/&gt;        &lt;aop:aspect ref="calculatorLoggingAspect"&gt;            &lt;aop:before method="before" pointcut-ref="calcPointcut"/&gt;            &lt;aop:after method="after" pointcut-ref="calcPointcut"/&gt;            &lt;aop:after-returning method="afterReturning" pointcut-ref="calcPointcut"/&gt;            &lt;aop:after-throwing method="afterThrowing" pointcut-ref="calcPointcut"/&gt;            &lt;aop:around method="around" pointcut-ref="calcPointcut"/&gt;        &lt;/aop:aspect&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("aop-test.xml");        ArithmeticCalculator arithmeticCalculator = iocContainer.getBean(ArithmeticCalculator.class);        System.out.println("spring版本：" + SpringVersion.getVersion() + "下的测试");        arithmeticCalculator.div(1, 0);    }    @Test    public void testAnnotation() {        ApplicationContext iocContainer =                new AnnotationConfigApplicationContext(SpringAopConfig.class);        ArithmeticCalculator arithmeticCalculator = iocContainer.getBean(ArithmeticCalculator.class);        System.out.println("spring版本：" + SpringVersion.getVersion() + "下的测试");        arithmeticCalculator.div(1, 0);    }    @Test    public void testXml() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("aop-complete-xml.xml");        ArithmeticCalculator arithmeticCalculator = iocContainer.getBean(ArithmeticCalculator.class);        System.out.println("spring版本：" + SpringVersion.getVersion() + "下的测试");        arithmeticCalculator.div(1, 0);    }}</code></pre><p>程序运行结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d1389c93b5f8f9de388dc5ec42193ce9.png" alt="image"></p><h2 id="5、JdbcTemplate"><a href="#5、JdbcTemplate" class="headerlink" title="5、JdbcTemplate"></a>5、JdbcTemplate</h2><h3 id="5-1、概述"><a href="#5-1、概述" class="headerlink" title="5.1、概述"></a>5.1、概述</h3><blockquote><p><strong>JDBC 概述</strong></p></blockquote><p>为了使 JDBC 更加易于使用，Spring 在 JDBC API 上定义了一个抽象层，以此建立一个 JDBC 存取框架。</p><p>作为 Spring JDBC 框架的核心，JDBC 模板的设计目的是为不同类型的 JDBC 操作提供模板方法，通过这种方式，可以在尽可能保留灵活性的情况下，将数据库存取的工作量降到最低。</p><p>可以将 Spring 的<code>JdbcTemplate</code>看作是一个小型的轻量级持久化层框架，和我们之前使用过的 DBUtils 风格非常接近。</p><h3 id="5-2、环境准备"><a href="#5-2、环境准备" class="headerlink" title="5.2、环境准备"></a>5.2、环境准备</h3><blockquote><p><strong>引入依赖</strong></p></blockquote><p>引入 <code>jdbc</code> 和 <code>mysql</code> 的相关依赖</p><pre><code>&lt;!-- spring-jdbc --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;    &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- spring-tx --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;    &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- spring-orm --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;    &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- druid --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.9&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mysql --&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.8&lt;/version&gt;&lt;/dependency&gt;</code></pre><blockquote><p><strong>编写配置文件</strong></p></blockquote><p>将数据库连接信息抽取到 jdbc.properties 配置文件中</p><pre><code>prop.userName=rootprop.password=rootprop.url=jdbc:mysql:///testprop.driverClass=com.mysql.jdbc.Driver</code></pre><p>Spring 配置文件</p><ol><li><p>因为我们会用到 <code>@Repository</code>、<code>@Service</code>、<code>@Controller</code> 之类的注解向 IOC 容器注入 bean 实例，因此需要开启组件扫描</p></li><li><p>使用 <code>&lt;context:property-placeholder&gt;</code> 标签指定 jdbc.properties 配置文件的路径，并取出其中的配置，设置数据库连接池的相关属性：用户名 <code>username</code>、用户密码 <code>password</code>、数据库连接地址 <code>url</code>、驱动类名 <code>driverClassName</code></p></li><li><p>使用 <code>JdbcTemplate</code> 对象进行持久化操作，需要为其注入数据源 <code>dataSource</code></p></li></ol><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd"&gt;    &lt;context:component-scan base-package="com.oneby"/&gt;    &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;    &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt;        &lt;property name="username" value="${prop.userName}"/&gt;        &lt;property name="password" value="${prop.password}"/&gt;        &lt;property name="url" value="${prop.url}"/&gt;        &lt;property name="driverClassName" value="${prop.driverClass}"/&gt;    &lt;/bean&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><blockquote><p><strong>准备数据库表</strong></p></blockquote><p><code>book_id</code> 为图书编号，交由数据库维护；<code>book_name</code> 为书名；<code>book_category</code> 为书籍所属类别</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0efedceb745807c0fe7a063eb8515f8c.png" alt="image"></p><blockquote><p><strong>创建实体类</strong></p></blockquote><p><code>Book</code> 实体类</p><pre><code>public class Book {    private Integer bookId;    private String bookName;    private String bookCategory;    public Book() {    }    public Book(String bookName, String bookCategory) {        this.bookName = bookName;        this.bookCategory = bookCategory;    }    public Book(Integer bookId, String bookName, String bookCategory) {        this.bookId = bookId;        this.bookName = bookName;        this.bookCategory = bookCategory;    }    public Integer getBookId() {        return bookId;    }    public void setBookId(Integer bookId) {        this.bookId = bookId;    }    public String getBookName() {        return bookName;    }    public void setBookName(String bookName) {        this.bookName = bookName;    }    public String getBookCategory() {        return bookCategory;    }    public void setBookCategory(String bookCategory) {        this.bookCategory = bookCategory;    }    @Override    public String toString() {        return "Book{" +                "bookId=" + bookId +                ", bookName='" + bookName + '\'' +                ", bookCategory='" + bookCategory + '\'' +                '}';    }}</code></pre><h3 id="5-3、持久化操作"><a href="#5-3、持久化操作" class="headerlink" title="5.3、持久化操作"></a>5.3、持久化操作</h3><blockquote><p><strong>增删改</strong></p></blockquote><p>增删改用这个函数：<code>public int update(String sql, @Nullable Object... args) throws DataAccessException</code>，通过 <code>sql</code> 指明要执行的 SQL 语句，并通过可变长参数 <code>args</code> 指明 SQL 语句的参数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2c5a13a385052117bc951a347859f72f.png" alt="image"></p><blockquote><p><strong>查询某个值或对象（查询单行）</strong></p></blockquote><p>查询某个值或对象用这个函数：<code>public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args) throws DataAccessException</code>，通过 <code>sql</code> 指明要执行的 SQL 语句，通过 <code>RowMapper</code> 对象指明从数据库查询出来的参数应该如何封装到指定的对象中，并通过可变长参数 <code>args</code> 指明 SQL 语句的参数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcd2631c424292a7940318d074aefa66.png" alt="image"></p><p><strong><code>RowMapper</code> 接口</strong></p><p><code>RowMapper</code> 接口是一个函数式接口，其中只有一个方法：<code>T mapRow(ResultSet rs, int rowNum) throws SQLException</code>，该方法的具体作用是将查询得到的每行数据映射到 <code>ResultSet</code> 中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe8829e7cfa8509bd232914d68f51c2d.png" alt="image"></p><p><strong><code>BeanPropertyRowMapper</code> 类</strong></p><p><code>BeanPropertyRowMapper</code> 类实现了 <code>RowMapper</code> 接口，其功能是：将查询得到的结果集的值，注入到对象属性中</p><blockquote><p><strong>查询对象集合（查询多行）</strong></p></blockquote><p>查询对象集合使用这个函数：<code>public &lt;T&gt; List&lt;T&gt; query(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args) throws DataAccessException</code>，通过 <code>sql</code> 指明要执行的 SQL 语句，通过 <code>RowMapper</code> 对象指明从数据库查询出来的参数应该如何封装到指定的对象中，并通过可变长参数 <code>args</code> 指明 SQL 语句的参数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7e98132133ba85adc82114de041f6152.png" alt="image"></p><blockquote><p><strong>批量操作</strong></p></blockquote><p>批量操作包括批量增加、批量更新、批量删除操作，这些操作都可以使用 <code>public int[] batchUpdate(String sql, List&lt;Object[]&gt; batchArgs) throws DataAccessException</code> 函数完成：通过 <code>sql</code> 指明要执行的 SQL 语句，并通过参数 <code>batchArgs</code> 指明批处理 SQL 语句的参数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d161a2c715fc6c6b0c57f9120e13d4b4.png" alt="image"></p><h3 id="5-4、持久化代码"><a href="#5-4、持久化代码" class="headerlink" title="5.4、持久化代码"></a>5.4、持久化代码</h3><blockquote><p>使用 <code>JdbcTemplate</code> 操作数据库，进行持久化操作</p></blockquote><p><code>BookDao</code> 接口的定义</p><pre><code>public interface BookDao {    public int addBook(Book book);    public int deleteBook(String bookId);    public int updateBook(Book book);    public Book findBookInfo(int bookId);    public int findBookCount();    public List&lt;Book&gt; findAllBookInfo();    public int[] batchAddBook(List&lt;Book&gt; books);    public int[] batchUpdateBook(List&lt;Book&gt; books);    public int[] batchDeleteBook(List&lt;Integer&gt; bookId);}</code></pre><p><code>BookDaoImpl</code> 实现类的定义</p><ol><li><p>增删改使用 <code>update()</code> 方法</p></li><li><p>查询某个值或对象 <code>queryForObject()</code> 方法</p></li><li><p>查询对象集合使用 <code>query()</code> 方法</p></li><li><p>批量处理使用 <code>batchUpdate()</code> 方法</p></li></ol><pre><code>@Repositorypublic class BookDaoImpl implements BookDao {    @Autowired    private JdbcTemplate jdbcTemplate;    @Override    public int addBook(Book book) {        String sql = "insert into t_books (book_name, book_category) values (?, ?) ";        Object[] args = {book.getBookName(), book.getBookCategory()};        int insertRows = jdbcTemplate.update(sql, args);        return insertRows;    }    @Override    public int deleteBook(String bookId) {        String sql = "delete from t_books where book_id = ?";        int deleteRows = jdbcTemplate.update(sql, bookId);        return deleteRows;    }    @Override    public int updateBook(Book book) {        String sql = "update t_books set book_name = ?, book_category = ? where book_id = ?";        Object[] args = {book.getBookName(), book.getBookCategory(), book.getBookId()};        int insertRows = jdbcTemplate.update(sql, args);        return insertRows;    }    @Override    public Book findBookInfo(int bookId) {        String sql = "select * from t_books where book_id = ?";        Book book = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;&gt;(Book.class), bookId);        return book;    }    @Override    public int findBookCount() {        String sql = "select count(*) from t_books";        Integer count = jdbcTemplate.queryForObject(sql, Integer.class);        return count;    }    @Override    public List&lt;Book&gt; findAllBookInfo() {        String sql = "select * from t_books";        List&lt;Book&gt; books = jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;Book&gt;(Book.class));        return books;    }    @Override    public int[] batchAddBook(List&lt;Book&gt; books) {        String sql = "insert into t_book (book_name, book_category) values (?, ?)";        List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();        for (Book book : books) {            batchArgs.add(new Object[]{book.getBookName(), book.getBookCategory()});        }        int[] batchAffectedRows = jdbcTemplate.batchUpdate(sql, batchArgs);        return batchAffectedRows;    }    @Override    public int[] batchUpdateBook(List&lt;Book&gt; books) {        String sql = "update t_books set book_name = ?, book_category = ? where book_id = ?";        List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();        for (Book book : books) {            batchArgs.add(new Object[]{book.getBookName(), book.getBookCategory(), book.getBookId()});        }        int[] batchAffectedRows = jdbcTemplate.batchUpdate(sql, batchArgs);        return batchAffectedRows;    }    @Override    public int[] batchDeleteBook(List&lt;Integer&gt; bookIds) {        String sql = "delete from t_books where book_id = ?";        List&lt;Object[]&gt; batchArgs = new ArrayList&lt;&gt;();        for (Integer bookId : bookIds) {            batchArgs.add(new Object[]{bookId});        }        int[] batchAffectedRows = jdbcTemplate.batchUpdate(sql, batchArgs);        return batchAffectedRows;    }}</code></pre><h2 id="6、声明式事务管理"><a href="#6、声明式事务管理" class="headerlink" title="6、声明式事务管理"></a>6、声明式事务管理</h2><h3 id="6-1、事务概述"><a href="#6-1、事务概述" class="headerlink" title="6.1、事务概述"></a>6.1、事务概述</h3><blockquote><p><strong>事务概述与其 ACID 属性</strong></p></blockquote><p>在 JavaEE 企业级开发的应用领域，为了保证数据的完整性和一致性，必须引入数据库事务的概念，所以事务管理是企业级应用程序开发中必不可少的技术。</p><p>事务就是一组由于逻辑上紧密关联而合并成一个整体 (工作单元) 的多个数据库操作，这些操作要么都执行，要么都不执行。</p><p><strong>事务的四个关键属性 (ACID)</strong></p><p>**原子性 (atomicity)**：“原子” 的本意是 “不可再分”，事务的原子性表现为一个事务中涉及到的多个操作在逻辑上缺一不可。事务的原子性要求事务中的所有操作要么都执行，要么都不执行。</p><p>**一致性 (consistency)**：“一致” 指的是数据的一致，具体是指：所有数据都处于满足业务规则的一致性状态。一致性原则要求：一个事务中不管涉及到多少个操作，都必须保证事务执行之前数据是正确的，事务执行之后数据仍然是正确的。如果一个事务在执行的过程中，其中某一个或某几个操作失败了，则必须将其他所有操作撤销，将数据恢复到事务执行之前的状态，这就是回滚。</p><p>**隔离性 (isolation)**：在应用程序实际运行过程中，事务往往是并发执行的，所以很有可能有许多事务同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。隔离性原则要求多个事务在并发执行过程中不会互相干扰。</p><p>**持久性 (durability)**：持久性原则要求事务执行完成后，对数据的修改永久的保存下来，不会因各种系统错误或其他意外情况而受到影响。通常情况下，事务对数据的修改应该被写入到持久化存储器中。</p><h3 id="6-2、Spring-事务管理"><a href="#6-2、Spring-事务管理" class="headerlink" title="6.2、Spring 事务管理"></a>6.2、Spring 事务管理</h3><blockquote><p><strong>之前的方式：编程式事务管理</strong></p></blockquote><p><strong>使用原生的 JDBC API 进行事务管理</strong></p><ol><li><p>获取数据库连接 Connection 对象</p></li><li><p>取消事务的自动提交</p></li><li><p>执行操作</p></li><li><p>正常完成操作时手动提交事务</p></li><li><p>执行失败时回滚事务</p></li><li><p>关闭相关资源</p></li></ol><p><strong>编程式事务管理的缺点</strong></p><p>使用原生的 JDBC API 实现事务管理是所有事务管理方式的基石，同时也是最典型的编程式事务管理。编程式事务管理需要将事务管理代码嵌入到业务方法中来控制事务的提交和回滚。在使用编程的方式管理事务时，必须在每个事务操作中包含额外的事务管理代码。相对于核心业务而言，事务管理的代码显然属于非核心业务，如果多个模块都使用同样模式的代码进行事务管理，显然会造成较大程度的代码冗余</p><blockquote><p><strong>现在的方式：声明式事务管理</strong></p></blockquote><p>大多数情况下声明式事务比编程式事务管理更好：它将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</p><p>事务管理代码的固定模式作为一种横切关注点，可以通过 AOP 方法模块化，进而借助 Spring AOP 框架实现声明式事务管理。</p><p>Spring 在不同的事务管理 API 之上定义了一个抽象层，通过配置的方式使其生效，从而让应用程序开发人员不必了解事务管理 API 的底层实现细节，就可以使用 Spring 的事务管理机制。</p><p>Spring 既支持编程式事务管理，也支持声明式的事务管理。</p><blockquote><p><strong>Spring 提供的事务管理器</strong></p></blockquote><p>Spring 从不同的事务管理 API 中抽象出了一整套事务管理机制，让事务管理代码从特定的事务技术中独立出来。开发人员通过配置的方式进行事务管理，而不必了解其底层是如何实现的。</p><p>Spring 的核心事务管理抽象是<code>PlatformTransactionManager</code>。它为事务管理封装了一组独立于技术的方法。无论使用 Spring 的哪种事务管理策略 (编程式或声明式)，事务管理器都是必须的。</p><p>事务管理器可以以普通的 bean 的形式声明在 Spring IOC 容器中。</p><p><strong>事务管理器的主要实现</strong></p><p>① <code>DataSourceTransactionManager</code>：在应用程序中只需要处理一个数据源，而且通过 JDBC 存取。</p><p>② <code>JtaTransactionManager</code>：在 JavaEE 应用服务器上用 JTA(Java Transaction API) 进行事务管理</p><p>③ <code>HibernateTransactionManager</code>：用 Hibernate 框架存取数据库</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8ef8bb09519516e2c260957ab61f1c45.png" alt="image"></p><h3 id="6-3、事务代码示例"><a href="#6-3、事务代码示例" class="headerlink" title="6.3、事务代码示例"></a>6.3、事务代码示例</h3><blockquote><p><strong>引入依赖</strong></p></blockquote><p>依赖见上节</p><blockquote><p><strong>准备数据库表</strong></p></blockquote><p><code>account_id</code> 为账户 id，交由数据库维护；<code>account_name</code> 为账户名称；<code>account_balance</code> 为账户余额</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6e4f2729411262c929c358c35de5358d.png" alt="image"></p><p>数据库初始数据：Oneby 和 Heygo 分别由 1000 大洋</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5fb1c6a0501d7277a2558b011ba1de9f.png" alt="image"></p><blockquote><p><strong>编写实体类</strong></p></blockquote><p>创建与数据库表对应的实体类</p><pre><code>public class Account {    private Integer accountId;    private String accountName;    private Integer accountBalance;    public Integer getAccountId() {        return accountId;    }    public void setAccountId(Integer accountId) {        this.accountId = accountId;    }    public String getAccountName() {        return accountName;    }    public void setAccountName(String accountName) {        this.accountName = accountName;    }    public Integer getAccountBalance() {        return accountBalance;    }    public void setAccountBalance(Integer accountBalance) {        this.accountBalance = accountBalance;    }    @Override    public String toString() {        return "Account{" +                "accountId=" + accountId +                ", accountName='" + accountName + '\'' +                ", accountBalance=" + accountBalance +                '}';    }}</code></pre><blockquote><p><strong>编写配置文件</strong></p></blockquote><ol><li><p>需要在 Spring 配置文件中引入 <code>context</code> 名称空间和 <code>tx</code> 名称空间</p></li><li><p>注意：事务管理器的名字一定要叫 <code>transactionManager</code>，不然会抛异常：<code>org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'transactionManager' available: No matching TransactionManager bean found for qualifier 'transactionManager' - neither qualifier match nor bean name match!</code></p></li><li><p>最后记得要使用 <code>&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;</code> 启用事务注解（在需要进行事务控制的方法或类上加 <code>@Transactional</code> 注解）</p></li></ol><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd                http://www.springframework.org/schema/tx                http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;    &lt;context:component-scan base-package="com.oneby"/&gt;    &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;    &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt;        &lt;property name="username" value="${prop.userName}"/&gt;        &lt;property name="password" value="${prop.password}"/&gt;        &lt;property name="url" value="${prop.url}"/&gt;        &lt;property name="driverClassName" value="${prop.driverClass}"/&gt;    &lt;/bean&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" &gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;&lt;/beans&gt;</code></pre><blockquote><p><strong>编写 DAO 层</strong></p></blockquote><p><code>AccountDao</code> 接口</p><pre><code>public interface AccountDao {    public int tranfer(String accountName, int money);}</code></pre><p><code>AccountDaoImpl</code> 实现类：从名为 <code>accountName</code> 的账户中转走 <code>money</code> 元大洋</p><pre><code>@Repositorypublic class AccountDaoImpl implements AccountDao {    @Autowired    private JdbcTemplate jdbcTemplate;    @Override    public int tranfer(String accountName, int money) {        String sql = "update t_accounts set account_balance = account_balance - ? where account_name = ?";        Object[] args = {money, accountName};        int insertRows = jdbcTemplate.update(sql, args);        return insertRows;    }}</code></pre><blockquote><p><strong>编写 Service 层：没有添加事务</strong></p></blockquote><p><code>AccountService</code> 类：从名为 <code>srcAccountName</code> 的账户转钱到名为 <code>destAccountName</code> 的账户，转账金额为 <code>money</code> 元大洋，但是在两个转账操作中间手动制造了一个异常</p><pre><code>@Servicepublic class AccountService {    @Autowired    private AccountDao accountDao;    public void transfer(String srcAccountName, String destAccountName, int money) {        accountDao.tranfer(srcAccountName, money);        int i = 10 / 0;         accountDao.tranfer(destAccountName, -money);        System.out.println(srcAccountName + " 向 " + destAccountName + " 转账 " + money + " 元");    }}</code></pre><p>测试代码：Heygo 给 Oneby 转账 1000 大洋</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("transaction-test.xml");        AccountService accountService = iocContainer.getBean(AccountService.class);        accountService.transfer("Heygo", "Oneby", 100);    }}</code></pre><p>程序抛出异常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/260646f7430d3b6dbcb480f7f5f7c959.png" alt="image"></p><p>Heygo 账户莫名其妙少了 100 块钱</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4295e2fdce7cefd760999a6d5d868fc1.png" alt="image"></p><blockquote><p><strong>编写 Service 层：添加声明式事务</strong></p></blockquote><p><code>AccountService</code> 类：也没啥，就加了一个 <code>@Transactional</code> 注解，表示为 <code>AccountService</code> 类中的所有方法都开启事务控制</p><pre><code>@Service@Transactionalpublic class AccountService {    @Autowired    private AccountDao accountDao;    public void transfer(String srcAccountName, String destAccountName, int money) {        accountDao.tranfer(srcAccountName, money);        int i = 10 / 0;         accountDao.tranfer(destAccountName, -money);        System.out.println(srcAccountName + " 向 " + destAccountName + " 转账 " + money + " 元");    }}</code></pre><p>程序抛出异常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6a3726ee6a3cc72176ad4f3fe27e01b2.png" alt="image"></p><p>Oneby 账户和 Heygo 账户余额都没有改变呢</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e06fb9766da20943c61e7848e1e5ecf.png" alt="image"></p><h3 id="6-4、事务相关参数"><a href="#6-4、事务相关参数" class="headerlink" title="6.4、事务相关参数"></a>6.4、事务相关参数</h3><h4 id="6-4-1、事务传播行为"><a href="#6-4-1、事务传播行为" class="headerlink" title="6.4.1、事务传播行为"></a>6.4.1、事务传播行为</h4><blockquote><p><strong>事务的传播行为概述</strong></p></blockquote><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能已经开启了一个新事务。事务的传播行为可以由传播属性指定。Spring 定义了 7 种类传播行为</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d4ddd79851da39bbec2047c24498d73b.png" alt="image"></p><blockquote><p><strong>REQUIRED 和 REQUIRES_NEW 传播行为</strong></p></blockquote><p>测试环境</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7ea40b8df27d882da80fe9020af95b98.png" alt="image"></p><p><strong>REQUIRED 传播行为</strong></p><p>当<code>bookService</code>的<code>purchase()</code>方法被另一个事务方法<code>checkout()</code>调用时，它默认会在现有的事务内运行。这个默认的传播行为就是<code>REQUIRED</code>。因此在<code>checkout()</code>方法的开始和终止边界内只有一个事务。这个事务只在<code>checkout()</code>方法结束的时候被提交，结果用户一本书都买不了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f7dd5641b10d448169c6b56524a4559e.png" alt="image"></p><p><strong>REQUIRES_NEW 传播行为</strong></p><p>表示该方法必须启动一个新事务，并在自己的事务内运行。如果有事务在运行，就应该先挂起它</p><p><img src="https://img-blog.csdnimg.cn/img_convert/75e654174c316a0bfdeb1e66ee8dc8a1.png" alt="image"></p><blockquote><p><strong>Spring 中配置事务的传播行为</strong></p></blockquote><p><strong>1、注解方式</strong></p><p>事务传播属性可以在<code>@Transactional</code>注解的<code>propagation</code>属性中定义</p><p><strong>2、XML 方式</strong></p><p>通过 <code>&lt;tx:method&gt;</code>元素的 <code>propagation</code> 属性设置事务的传播行为</p><p><img src="https://img-blog.csdnimg.cn/img_convert/855be1da22565a6a140deafb37668741.png" alt="image"></p><h4 id="6-4-2、事务隔离级别"><a href="#6-4-2、事务隔离级别" class="headerlink" title="6.4.2、事务隔离级别"></a>6.4.2、事务隔离级别</h4><blockquote><p><strong>数据库事务并发问题</strong></p></blockquote><p>假设现在有两个事务：Transaction01 和 Transaction02 并发执行。</p><p><strong>① 脏读</strong></p><p>[1]Transaction01 将某条记录的<code>AGE</code>值从 20 修改为 30。</p><p>[2]Transaction02 读取了 Transaction01 更新后的值：30。</p><p>[3]Transaction01 回滚，<code>AGE</code>值恢复到了 20。</p><p>[4]Transaction02 读取到的 30 就是一个无效的值。</p><p><strong>② 不可重复读</strong></p><p>[1]Transaction01 读取了<code>AGE</code>值为 20。</p><p>[2]Transaction02 将<code>AGE</code>值修改为 30。</p><p>[3]Transaction01 再次读取<code>AGE</code>值为 30，和第一次读取不一致。</p><p><strong>③ 幻读</strong></p><p>[1]Transaction01 读取了<code>STUDENT</code>表中的一部分数据。</p><p>[2]Transaction02 向<code>STUDENT</code>表中插入了新的行。</p><p>[3]Transaction01 读取了<code>STUDENT</code>表时，多出了一些行。</p><blockquote><p><strong>数据库的隔离级别</strong></p></blockquote><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL 标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p><strong>①读未提交</strong>：<code>READ UNCOMMITTED</code>，允许 Transaction01 读取 Transaction02 未提交的修改。</p><p><strong>②读已提交</strong>：<code>READ COMMITTED</code>，要求 Transaction01 只能读取 Transaction02 已提交的修改。</p><p><strong>③可重复读</strong>：<code>REPEATABLE READ</code>，确保 Transaction01 可以多次从一个字段中读取到相同的值，即 Transaction01 执行期间禁止其它事务对这个字段进行更新。</p><p><strong>④串行化</strong>：<code>SERIALIZABLE</code>，确保 Transaction01 可以多次从一个表中读取到相同的行，在 Transaction01 执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p><p><strong>各个隔离级别解决并发问题的能力见下表</strong></p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p><strong>各种数据库产品对事务隔离级别的支持程度</strong></p><table><thead><tr><th></th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><blockquote><p><strong>在 Spring 中指定事务隔离级别</strong></p></blockquote><p><strong>1、注解方式</strong></p><p>可以在<code>@Transactional</code>的<code>isolation</code>属性中设置隔离事务的级别</p><p><strong>2、XML 方式</strong></p><p>通过 <code>&lt;tx:method&gt;</code>元素的 <code>isolation</code> 属性设置传播事务的隔离级别</p><p><img src="https://img-blog.csdnimg.cn/img_convert/15bcb092d7ba49cfa6f5a1b5e1c17a3d.png" alt="image"></p><h4 id="6-4-3、事务是否回滚"><a href="#6-4-3、事务是否回滚" class="headerlink" title="6.4.3、事务是否回滚"></a>6.4.3、事务是否回滚</h4><blockquote><p><strong>事务回滚的默认触发条件</strong></p></blockquote><p>捕获到<code>RuntimeException</code>或<code>Error</code>时回滚，而捕获到编译时异常不回滚。</p><blockquote><p><strong>在 Spring 中设置事务的回滚</strong></p></blockquote><p><strong>1、注解方式</strong>：<code>@Transactional</code> 注解</p><p>[1]<code>rollbackFor</code>属性：指定遇到时必须进行回滚的异常类型，可以为多个</p><p>[2]<code>noRollbackFor</code>属性：指定遇到时不回滚的异常类型，可以为多个</p><p><img src="https://img-blog.csdnimg.cn/img_convert/17167950f7737d0797033289b0e2cee2.png" alt="image"></p><p><strong>2、XML 方式</strong></p><p>通过 <code>&lt;tx:method&gt;</code>元素的 <code>rollback-for</code> 和 <code>no-rollback-for</code> 属性设置事务的回滚</p><p><img src="https://img-blog.csdnimg.cn/img_convert/30c0b12a45d7aabf7ac8e6eedc3a90b1.png" alt="image"></p><h4 id="6-4-4、事务超时时间"><a href="#6-4-4、事务超时时间" class="headerlink" title="6.4.4、事务超时时间"></a>6.4.4、事务超时时间</h4><blockquote><p><strong>超时事务属性</strong></p></blockquote><p><strong>超时事务属性</strong>：事务在强制回滚之前可以保持多久。这样可以防止长期运行的事务占用资源。</p><blockquote><p><strong>在 Spring 中设置事务的超时时间</strong></p></blockquote><p><strong>1、注解方式</strong>：</p><p>通过 <code>@Transactional</code> 注解的 <code>timeout</code> 属性设置事务的超时时间，单位为 s</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2f6f11dad0d5ef77e67db3e0af2079a7.png" alt="image"></p><p><strong>2、XML 方式</strong></p><p>通过 <code>&lt;tx:method&gt;</code>元素的 <code>timeout</code> 属性设置事务的超时时间，单位为 s</p><p><img src="https://img-blog.csdnimg.cn/img_convert/618ce8a268d86038be332c0d0580950b.png" alt="image"></p><h4 id="6-4-5、事务只读属性"><a href="#6-4-5、事务只读属性" class="headerlink" title="6.4.5、事务只读属性"></a>6.4.5、事务只读属性</h4><blockquote><p><strong>事务的优化：事务的只读属性</strong></p></blockquote><p>由于事务可以在行和表上获得锁，因此长事务会占用资源，并对整体性能产生影响。如果一个事物只读取数据但不做修改，数据库引擎可以对这个事务进行优化。</p><p><strong>只读事务属性</strong>：表示这个事务只读取数据但不更新数据, 这样可以帮助数据库引擎优化事务。</p><blockquote><p><strong>在 Spring 中设置事务的只读属性</strong></p></blockquote><p><strong>1、注解方式</strong></p><p>通过 <code>@Transactional</code> 注解的 <code>readOnly</code> 属性设置事务是否只读</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c3c5b031c688b71e00a0eb068441b23c.png" alt="image"></p><p><strong>2、XML 方式</strong></p><p>通过 <code>&lt;tx:method&gt;</code>元素的 <code>read-only</code> 属性设置事务是否只读</p><p><img src="https://img-blog.csdnimg.cn/img_convert/47dcec5a0d8f53a49bedff5310b77857.png" alt="image"></p><h3 id="6-5、完全注解开发"><a href="#6-5、完全注解开发" class="headerlink" title="6.5、完全注解开发"></a>6.5、完全注解开发</h3><blockquote><p><strong>创建 Spring 配置类</strong></p></blockquote><ol><li><p><code>@Configuration</code> 标识这是一个配置类；<code>@ComponentScan(basePackages = "com.oneby")</code> 配置包扫描路径；<code>@EnableTransactionManagement</code> 开启注解事务管理；<code>@PropertySource(value = "classpath:jdbc.properties")</code> 标识 properties 配置文件的路径</p></li><li><p>使用 <code>@Value</code> 注解读取 jdbc.properties 配置文件中的内容，并用于配置数据库连接池 <code>DataSource</code></p></li><li><p>后面配置 <code>JdbcTemplate</code> 和 <code>DataSourceTransactionManager</code> 都需要向其指定属性中注入 <code>DataSource</code> 对象</p></li></ol><pre><code>@Configuration@ComponentScan(basePackages = "com.oneby")@EnableTransactionManagement@PropertySource(value = "classpath:jdbc.properties")public class TransactionConfig {    @Value("${prop.userName}")    private String userName;    @Value("${prop.password}")    private String password;    @Value("${prop.url}")    private String url;    @Value("${prop.driverClass}")    private String driverClass;    @Bean    public DruidDataSource getDruidDataSource() {        DruidDataSource dataSource = new DruidDataSource();        dataSource.setUsername(userName);        dataSource.setPassword(password);        dataSource.setUrl(url);        dataSource.setDriverClassName(driverClass);        return dataSource;    }    @Bean    public JdbcTemplate getJdbcTemplate(DataSource dataSource) {        JdbcTemplate jdbcTemplate = new JdbcTemplate();        jdbcTemplate.setDataSource(dataSource);        return jdbcTemplate;    }    @Bean    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) {        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();        transactionManager.setDataSource(dataSource);        return transactionManager;    }}</code></pre><blockquote><p><strong>代码测试</strong></p></blockquote><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void testAnnotation() {        ApplicationContext iocContainer =                new AnnotationConfigApplicationContext(TransactionConfig.class);        AccountService accountService = iocContainer.getBean(AccountService.class);        accountService.transfer("Heygo", "Oneby", 100);    }}</code></pre><p>程序执行抛出异常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1c77153bb84948671731375cf479a519.png" alt="image"></p><p>转账操作未成功，Oneby 和 Heygo 账户中的前分文未动，证明声明式事务配置成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f56e632cfa19acb754c51afb136d7dfd.png" alt="image"></p><h3 id="6-6、XML-事务管理"><a href="#6-6、XML-事务管理" class="headerlink" title="6.6、XML 事务管理"></a>6.6、XML 事务管理</h3><blockquote><p><strong>XML 事务管理的配置文件</strong></p></blockquote><p>XML 方式配置事务就三步：① 配置切入点表达式；② 配置通知与事务参数；③ 将切入点表达式与通知联系起来</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:tx="http://www.springframework.org/schema/tx"       xmlns:aop="http://www.springframework.org/schema/aop"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd                http://www.springframework.org/schema/tx                http://www.springframework.org/schema/tx/spring-tx.xsd                http://www.springframework.org/schema/aop                http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;    &lt;context:component-scan base-package="com.oneby"/&gt;    &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;    &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt;        &lt;property name="username" value="${prop.userName}"/&gt;        &lt;property name="password" value="${prop.password}"/&gt;        &lt;property name="url" value="${prop.url}"/&gt;        &lt;property name="driverClassName" value="${prop.driverClass}"/&gt;    &lt;/bean&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;aop:config&gt;        &lt;aop:pointcut id="txPointCut" expression="execution(* com.oneby.service.AccountService.*(..))"/&gt;    &lt;/aop:config&gt;    &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;        &lt;tx:attributes&gt;            &lt;tx:method name="transfer" propagation="REQUIRED"/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;aop:config&gt;        &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><p>测试代码</p><pre><code>public class SpringTest {    @Test    public void test() {        ApplicationContext iocContainer =                new ClassPathXmlApplicationContext("xml-transaction-config.xml");        AccountService accountService = iocContainer.getBean(AccountService.class);        accountService.transfer("Heygo", "Oneby", 100);    }}</code></pre><p>程序运行结果：程序运行后抛出异常，但 Oneby 和 Heygo 账户的余额一分不少，一分不多</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f869011c861b1756cf354c936d92aaa7.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒学院笔记</title>
      <link href="posts/39114.html"/>
      <url>posts/39114.html</url>
      
        <content type="html"><![CDATA[<h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><h2 id="一-项目功能点"><a href="#一-项目功能点" class="headerlink" title="一 项目功能点"></a>一 项目功能点</h2><p>项目采用B2C模式 有后台管理员系统和前台用户系统</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798090-db711472-8771-4e2a-b5d9-4b9ec0bcfbb7.png" alt="image"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798070-e35a09ab-542b-421a-a812-cebb19810194.png" alt="image"></p><h3 id="1-项目后台管理系统功能"><a href="#1-项目后台管理系统功能" class="headerlink" title="1 项目后台管理系统功能"></a>1 项目后台管理系统功能</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879797971-460cd2e6-78c2-4001-9489-438f2e428e0d.png" alt="image"></p><h4 id="1-1登陆功能"><a href="#1-1登陆功能" class="headerlink" title="1. 1登陆功能"></a>1. 1登陆功能</h4><p>集成SpringSecurity框架</p><h4 id="1-2-权限管理功能"><a href="#1-2-权限管理功能" class="headerlink" title="1.2 权限管理功能"></a>1.2 权限管理功能</h4><ul><li>菜单管理: 列表展示 添加 修改 删除</li><li>角色管理 : 列表展示 添加 修改 删除 批量删除 为角色分配菜单</li><li>用户管理 : 列表 添加 修改 删除 批量删除 为用户分配角色</li></ul><p>权限表的关系</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/8365543/1608879797985-3dcdc67d-692a-44c1-8463-b82c67d9163d.png" alt="image"></p><p>有五张表 分别是菜单表 菜单角色表 角色表  用户表  用户角色表</p><p>一个菜单可以对应多个角色 一个角色可以对应多个菜单 这两张表是多对多的关系 所以角色和菜单表是这两张表的中间表 来表示这种关系</p><p>一个用户对应多个角色      一个角色对应多个用户     这两张表也是多对多的关系 所以角色和用户表是这两张表的中间表 来表示这种关系</p><h4 id="1-3-讲师管理模块"><a href="#1-3-讲师管理模块" class="headerlink" title="1.3 讲师管理模块"></a>1.3 讲师管理模块</h4><p>条件查询分页列表.添加 修改 删除</p><h4 id="1-4-课程分类模块"><a href="#1-4-课程分类模块" class="headerlink" title="1.4 课程分类模块"></a>1.4 课程分类模块</h4><ol><li>添加课程分类<br>读取Excel里面的课程分类数据,添加到数据库中</li><li>课程分类列表<br>使用树形图结构显示课程分类列表</li></ol><h4 id="1-5-课程管理"><a href="#1-5-课程管理" class="headerlink" title="1.5 课程管理"></a>1.5 课程管理</h4><ol><li>课程列表功能</li><li>课程发布功能</li></ol><ul><li><ul><li>填写课程基本信息</li><li>添加课程大纲<br>课程大纲中有添加章节 每一章节下面可以添加小节 在添加小节中添加上传课程视频 每一小节只能添加一个视频</li><li>课程信息确认,最终发布</li></ul></li></ul><h4 id="1-6-统计分析模块"><a href="#1-6-统计分析模块" class="headerlink" title="1.6 统计分析模块"></a>1.6 统计分析模块</h4><ol><li>生成统计数据</li><li>统计数据图标显示</li></ol><h3 id="2-项目前台功能"><a href="#2-项目前台功能" class="headerlink" title="2 项目前台功能"></a>2 项目前台功能</h3><h4 id="2-1-首页数据显示"><a href="#2-1-首页数据显示" class="headerlink" title="2.1 首页数据显示"></a>2.1 首页数据显示</h4><ol><li>显示幻灯片功能</li><li>显示热门课程</li><li>显示名师</li></ol><h4 id="2-2-登陆注册退出功能"><a href="#2-2-登陆注册退出功能" class="headerlink" title="2.2 登陆注册退出功能"></a>2.2 登陆注册退出功能</h4><ol><li>获取手机验证码 进行注册</li><li>登陆登陆</li></ol><ul><li><ul><li>普通登陆<br><strong>SSO单点登陆</strong><br>使用token实现<br>登陆调用登陆接口,返回token字符串,把返回token字符串放到cookie里面,创建前端拦截器,进行判断,如果cookie里面包含token字符串,把token字符串放到header里面 调用接口根据token获取用户信息,把用户信息放到cookie里面,进行显示</li><li>第三方登陆<br>使用微信进行登陆<br>OAuth2 针对特定问题解决方案 主要有两个问题</li></ul></li></ul><ol><li><ol><li><ol><li>开放系统间授权</li><li>分布式访问</li></ol></li></ol></li></ol><p>流程图 </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798109-cbf6eaaf-a5f6-4baa-ba24-536a2a2fc401.png" alt="image"></p><h4 id="2-3-名师列表功能"><a href="#2-3-名师列表功能" class="headerlink" title="2.3 名师列表功能"></a>2.3 名师列表功能</h4><p>名师页面分页展示所以名师 点击名师可以进到名师详情页 得到名师详细信息</p><h4 id="2-4-课程列表功能"><a href="#2-4-课程列表功能" class="headerlink" title="2.4 课程列表功能"></a>2.4 课程列表功能</h4><ol><li>条件查询分页列表功能</li><li>课程详情页</li></ol><ul><li><ul><li>课程信息的显示 包含课程基本信息 分类 讲师 课程大纲 课程评论</li><li>判断课程是否购买</li><li>课程视频的在线播放</li></ul></li></ul><h4 id="2-5课程支付功能-微信支付"><a href="#2-5课程支付功能-微信支付" class="headerlink" title="2.5课程支付功能(微信支付)"></a>2.5课程支付功能(微信支付)</h4><ol><li><p>生成课程订单</p></li><li><p>生成微信支付的二维码</p></li><li><p>微信最终支付</p></li><li><ol><li>如果课程是收费课程,点击立即购买,生成课程订单</li><li>点击订单页面去支付,生成微信支付二维码</li><li>使用微信扫描支付二维码实现支付</li><li>支付之后,每隔三秒查询支付状态(是否支付成功),如果没有支付成功等待,如果支付成功支付,更新订单状态(已经支付状态),向支付记录表添加支付成功记录</li></ol></li></ol><h2 id="二-项目技术点"><a href="#二-项目技术点" class="headerlink" title="二 项目技术点"></a>二 项目技术点</h2><p>项目采用前后端分离开发</p><h3 id="1-项目中前端技术"><a href="#1-项目中前端技术" class="headerlink" title="1 项目中前端技术"></a>1 项目中前端技术</h3><h4 id="1-1-vue"><a href="#1-1-vue" class="headerlink" title="1.1 vue"></a>1.1 vue</h4><ol><li>基本语法</li><li>指令</li></ol><ul><li><ul><li>v-bind 单向绑定</li><li>v-model 双向绑定</li><li>v-if 判断</li><li>v-for 循环</li><li>v-html 把标签内容渲染为html</li></ul></li></ul><ol><li>生命周期</li></ol><ul><li><ul><li>created()<br>在页面渲染之前执行</li><li>mounted()<br>在页面渲染之后执行</li></ul></li></ul><p>ES6规范</p><h4 id="1-2-Element-ui"><a href="#1-2-Element-ui" class="headerlink" title="1.2 Element-ui"></a>1.2 Element-ui</h4><p>饿了么ui</p><h4 id="1-3-nodejs"><a href="#1-3-nodejs" class="headerlink" title="1.3 nodejs"></a>1.3 nodejs</h4><p>是JavaScript运行环境,不需要浏览器直接运行js代码,模拟服务器效果</p><h4 id="1-4-NPM"><a href="#1-4-NPM" class="headerlink" title="1.4 NPM"></a>1.4 NPM</h4><p>包管理工具,类似于maven</p><p>npm 命令</p><p>npm init 初始化</p><p>npm install 安装依赖</p><h4 id="1-5-Babel"><a href="#1-5-Babel" class="headerlink" title="1.5 Babel"></a>1.5 Babel</h4><p>转码器 ,可以把ES6代码转换成ES5执行</p><h4 id="1-6-前端模块化"><a href="#1-6-前端模块化" class="headerlink" title="1.6 前端模块化"></a>1.6 前端模块化</h4><p>通过一个页面或者一个js文件,调用另外一个js文件的方法</p><p>问题:ES6的模块化无法在Node.js中执行,需要用Babel编辑成ES5后再执行</p><p>后台系统使用的是vue-admin-template</p><p>​    基于vue+Element-ui</p><p>前台系统使用的Nuxt</p><p>基于vue</p><p>服务端渲染技术</p><h4 id="1-7-Echarts"><a href="#1-7-Echarts" class="headerlink" title="1.7 Echarts"></a>1.7 Echarts</h4><p>图表工具</p><h3 id="2-项目中后端技术"><a href="#2-项目中后端技术" class="headerlink" title="2 项目中后端技术"></a>2 项目中后端技术</h3><p>项目采用微服务架构</p><p>按照业务拆分成不同的模块 每个模块都可以独立部署 相互之间的关系通过远程调用来做到的</p><h4 id="2-1-Spring-Boot"><a href="#2-1-Spring-Boot" class="headerlink" title="2.1 Spring Boot"></a>2.1 Spring Boot</h4><ol><li>Spring boot 本质就是Spring ,只是快速构建Spring 工程脚手架</li><li>细节</li></ol><ul><li><ul><li>包扫描机制<br>默认扫描启动类当前包及其子包下<br>设置扫描规则 <a href="https://www.yuque.com/ComponentScan(basePackages">@ComponentScan(basePackages </a> = {“包路径”}) </li><li>配置类 <a href="https://www.yuque.com/Configuration">@Configuration </a></li><li>配置文件类型 有 yml yaml properties<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879799085-ff913035-6ca3-4be9-b5bf-28722732691a.png" alt="image"><br>加载顺序 bootstrap application application-dev</li></ul></li></ul><h4 id="2-2-SpringCloud"><a href="#2-2-SpringCloud" class="headerlink" title="2.2 SpringCloud"></a>2.2 SpringCloud</h4><ol><li><p>spring cloud 是很多框架总称 是微服务一整套解决方案 基于spring boot实现</p></li><li><p>相关组件<br><img src="https://cdn.nlark.com/yuque/0/2020/png/8365543/1608879798102-0a891e9b-68c5-485e-ad27-1cd459a76ac9.png" alt="image"><br>在项目中使用的是Nacos替代了Springcloud原生的一些组件</p></li><li><p>Nacos</p></li><li><ol><li>使用Nacos作为注册中心</li><li>使用Nacos作为配置中心</li></ol></li><li><p>Feign</p></li><li><ol><li>服务调用,一个微服务调用另一个服务实现远程调用</li></ol></li><li><p>Hystrix熔断器<br>类似于日常生活中的保险丝 当出现了问题保险丝会自动烧断,以保护电器,避免更大的损失<br>使用场景<br><strong>一个服务的失败，可能导致整条服务链的服务都失败的状况，我们称之为服务雪崩。</strong></p><pre><code>服务熔断和服务降级就是解决这个问题的方式之一</code></pre><p>服务熔断: 当下游的服务因为某种原因变得不可用或者响应过慢,上游服务为了保证自己整体服务的可用性,不再继续调用目标服务,<br>直接返回,快速释放资源,如果目标服务情况好转则恢复调用<br>服务降级:</p></li></ol><ul><li><ul><li>当下游的服务因为某种原因响应过慢,下游服务主动停掉一些不太重要的业务,释放出服务资源,增加响应速度</li><li>当下游的服务因为某种原因不可用的,上游主动调用本地的一些降级逻辑,避免卡顿,迅速返回给用户</li></ul></li></ul><ol><li>Gateway网关<br>spring cloud之前的zuul网关,目前Gateway网关</li><li>版本的使用<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798245-167fb21c-b8a9-4b5b-93f9-223bbcda1d57.png" alt="image"></li></ol><h4 id="2-3-Mybatis-Plus"><a href="#2-3-Mybatis-Plus" class="headerlink" title="2.3 Mybatis Plus"></a>2.3 Mybatis Plus</h4><ol><li>MybatisPlus就是对mybatis做增强</li><li>自动填充</li><li>乐观锁</li><li>逻辑删除</li><li>代码生成器</li></ol><h4 id="2-4-EasyExcel"><a href="#2-4-EasyExcel" class="headerlink" title="2.4 EasyExcel"></a>2.4 EasyExcel</h4><ol><li>阿里巴巴提供操作Excel工具,代码……………………………++</li><li>….简洁,效率很高</li><li>效率高的原因easy excel对poi进行封装,采用sax方式解析<br>一行一行的读取excel 重写了poi对excel的解析降低内存消耗,不会出现内存溢出问题,在上层做了模型转换的封装,让使用者更加简单方便</li><li>项目应用在添加课程分类,读取excel数据</li></ol><h4 id="2-5-Spring-security合实现权限管理"><a href="#2-5-Spring-security合实现权限管理" class="headerlink" title="2.5 Spring security合实现权限管理"></a>2.5 Spring security合实现权限管理</h4><ol><li>Spring security 框架组成: 认证和授权</li><li>Spring security 代码执行过程<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798132-fce3729c-49a8-4939-9492-91f5a6a4d2f1.png" alt="image"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/8365543/1608879798192-b3264479-081f-40ed-ae00-60a9308761cc.png?x-oss-process=image/resize,w_1500" alt="image"></li></ol><h4 id="2-6-Redis"><a href="#2-6-Redis" class="headerlink" title="2.6 Redis"></a>2.6 Redis</h4><pre><code>  1. 首页数据通过Redis进行缓存  2. Redis数据类型  3. 使用Redis作为缓存,不太重要或者不经常改变数据适合放到Redis作为缓存</code></pre><h4 id="2-7-Nginx"><a href="#2-7-Nginx" class="headerlink" title="2.7. Nginx"></a>2.7. Nginx</h4><pre><code>  1. 反向代理  2. 请求转发,负载均衡,动静分离</code></pre><h4 id="2-8-OAuth2-JWT"><a href="#2-8-OAuth2-JWT" class="headerlink" title="2.8. OAuth2+JWT"></a>2.8. OAuth2+JWT</h4><ol><li>OAuth2针对特定问题解决方案</li><li>JWT包含三部分<br>JWT令牌由三部分组成,每部分中间使用点(  .  ) 分隔,比如 : xxxx.yyyy.zzzz</li></ol><ul><li><p>Header<br>头部包括令牌的类型(既JWT ) 及使用的哈希算法 (如 HMAC SHA256或 RSA)<br>一个例子如下:<br>下边是Header部分的内容<br>{<br>“alg”: “HS256”,<br>“typ”: “JWT”<br>}<br>将上边的内容使用Base64Url编码，得到一个字符串就是JWT令牌的第一部分。</p></li><li><ul><li>Payload<br>第二部分是负载，内容也是一个json对象，它是存放有效信息的地方，它可以存放jwt提供的现成字段，比<br>如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。<br>此部分不建议存放敏感信息，因为此部分可以解码还原原始内容。<br>最后将第二部分负载使用Base64Url编码，得到一个字符串就是JWT令牌的第二部分。<br>一个例子：</li></ul></li></ul><pre><code>{         "sub": "1234567890",         "name": "456",         "admin": true }</code></pre><ul><li>Signature<br>第三部分是签名，此部分用于防止jwt内容被篡改。<br>这个部分使用base64url将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用header中声明<br>签名算法进行签名。<br>一个例子：<br>HMACSHA256(<br>base64UrlEncode(header) + “.” +<br>base64UrlEncode(payload),<br>secret)<br>base64UrlEncode(header)：jwt令牌的第一部分。<br>base64UrlEncode(payload)：jwt令牌的第二部分。<br>secret：签名所使用的密钥。</li></ul><h4 id="2-9-HttpClient"><a href="#2-9-HttpClient" class="headerlink" title="2.9.HttpClient"></a>2.9.HttpClient</h4><ol><li>发送请求返回响应的工具,不需要浏览器完成请求和响应的过程</li><li>应用场景: 微信登陆获取扫描人信息,微信支付查询支付状态</li></ol><h4 id="2-10-Cookie"><a href="#2-10-Cookie" class="headerlink" title="2.10 Cookie"></a>2.10 Cookie</h4><ol><li>Cookie特点: 客户端技术,每次发送请求带着cookie值进行发送</li><li>Cookie有默认有效时长,默认关闭浏览器cookie默认不存在了,可以设置cookie有效时效</li></ol><h4 id="2-11-阿里云OSS"><a href="#2-11-阿里云OSS" class="headerlink" title="2.11 阿里云OSS"></a>2.11 阿里云OSS</h4><ol><li>文件存储服务器</li><li>添加讲师时候上传讲师头像</li></ol><h4 id="2-12-阿里云视频播放"><a href="#2-12-阿里云视频播放" class="headerlink" title="2.12 阿里云视频播放"></a>2.12 阿里云视频播放</h4><ol><li>视频上传,删除,播放</li><li>整合阿里云视频播放器进行视频播放</li></ol><h4 id="2-13-阿里云短信服务"><a href="#2-13-阿里云短信服务" class="headerlink" title="2.13 阿里云短信服务"></a>2.13 阿里云短信服务</h4><p>注册时候发送验证码</p><h4 id="2-14-Git"><a href="#2-14-Git" class="headerlink" title="2.14 Git"></a>2.14 Git</h4><p>使用码云做版本仓库</p><p>代码提交到远程Git仓库</p><h4 id="2-15-Docker-Jenkins"><a href="#2-15-Docker-Jenkins" class="headerlink" title="2.15 Docker+Jenkins"></a>2.15 Docker+Jenkins</h4><ol><li>手动打包运行</li><li>idea打包</li><li>docker加jenkins自动化构建</li></ol><h2 id="三-开发中遇到项目问题"><a href="#三-开发中遇到项目问题" class="headerlink" title="三 开发中遇到项目问题"></a>三 开发中遇到项目问题</h2><h4 id="1-1-路由切换问题"><a href="#1-1-路由切换问题" class="headerlink" title="1.1 路由切换问题"></a>1.1 路由切换问题</h4><ol><li>对此路由跳转到同一个vue页面,页面中的created方法只会执行一次</li><li>解决方法使用vue监听<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798118-65508562-ff15-4790-9111-8b1ea23eb616.png" alt="image"></li></ol><h4 id="1-2-ES6模块化运行问题"><a href="#1-2-ES6模块化运行问题" class="headerlink" title="1.2 ES6模块化运行问题"></a>1.2 ES6模块化运行问题</h4><p>​    1. Node.js不能直接运行ES6模块化代码,需要使用Babel把Es6代码转换到ES5代码执行SpringS</p><h4 id="1-3-MybatisPlus生成19位id值"><a href="#1-3-MybatisPlus生成19位id值" class="headerlink" title="1.3 MybatisPlus生成19位id值"></a>1.3 MybatisPlus生成19位id值</h4><ol><li>mp生成id值是19位,JavaScript处理的数据类型只能处理16位,所以实体类的id位string类型</li></ol><h4 id="1-4-跨域问题"><a href="#1-4-跨域问题" class="headerlink" title="1.4 跨域问题"></a>1.4 跨域问题</h4><ol><li>访问协议 ip地址 端口号 ,这三个如果有任何一个不一样,产生跨域</li><li>解决在Controller添加注解<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798139-8427c723-31bf-4747-a1be-966a0b6fe195.png" alt="image"></li><li>通过网关解决<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798022-74114c8b-ef3b-4a29-9111-8ed6fa3745b3.png" alt="image"></li></ol><h4 id="1-5-413问题"><a href="#1-5-413问题" class="headerlink" title="1.5 413问题"></a>1.5 413问题</h4><ol><li>上传视频时候,因为Nginx有上传文件大小限制,如果超过Nginx大小,出现413</li><li>413错误: 请求体过大</li><li>在Nginx配置客户端大小</li><li>响应状态码: 413  403跨域 302重定向</li></ol><h4 id="1-6-maven不加载xml文件"><a href="#1-6-maven不加载xml文件" class="headerlink" title="1.6 maven不加载xml文件"></a>1.6 maven不加载xml文件</h4><ol><li>xml文件放到resource目录下</li><li>通过配置实现<br>application.yml中添加xml的路径<br>pom.xml中添加加载xml文件</li></ol><pre><code>    &lt;build&gt;        &lt;resources&gt;            &lt;resource&gt;                &lt;directory&gt;**/**.*&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.xml&lt;/include&gt;                    &lt;include&gt;**/*.yml&lt;/include&gt;                &lt;/includes&gt;                &lt;filtering&gt;false&lt;/filtering&gt;            &lt;/resource&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/resources&lt;/directory&gt;            &lt;/resource&gt;        &lt;/resources&gt;    &lt;/build&gt;</code></pre><h2 id="四-项目情况"><a href="#四-项目情况" class="headerlink" title="四 项目情况"></a>四 项目情况</h2><h3 id="1-在线教育系统"><a href="#1-在线教育系统" class="headerlink" title="1. 在线教育系统"></a>1. 在线教育系统</h3><p>分为前台网站系统,和后台运营平台,B2C模式</p><p>前台用户系统包括课程,讲师,问答,文章几大部分,使用了微服务技术架构,采用前后的分离开发</p><ul><li>后端的主要技术架构是: Spring Boot + Spring Cloud + Mybatis-Plus+ HttpClient+ MySQL+Maven+EasyExcel+Nginx</li><li>前端的主要技术: Node.js + Vue.js+element-ui+NUXT +ECharts</li><li>涉及到第三方中间间: 阿里云短信服务 阿里云OSS存储服务 阿里云视频点播  Redis</li><li>业务中使用了Echarts做图表展示,使用EasyExcel完成分类批量添加,注册 分布式单点登陆 使用了JWT</li></ul><p>功能描述 系统分为前台用户系统和后台管理系统两部分</p><ul><li>前台系统包括有: 首页 课程 名师 问答 文章</li><li>后台管理系统包括: 讲师管理 课程分类管理 课程管理 统计分析 Banner管理 订单管理 权限管理 等功能</li></ul><h3 id="2-这是项目还是产品"><a href="#2-这是项目还是产品" class="headerlink" title="2 这是项目还是产品"></a>2 这是项目还是产品</h3><pre><code>这是一个**产品**</code></pre><ul><li>1.0版本是单体应用: ssm</li><li>2.0版本加入了SpringCloud 并将一些关键业务和访问量比较大的部分分离了出去,目前独立出来的服务有教学服务,视频点播服务,用户服务,统计分析服务,网关服务</li></ul><h3 id="3-测试要求"><a href="#3-测试要求" class="headerlink" title="3. 测试要求"></a>3. 测试要求</h3><p>首页和视频详情页QPS单机要求2000+</p><p>经常用每秒查询率来衡量域名系统的服务器性能,就是QPS</p><p>QPS= 并发量/平均响应时间</p><h3 id="4-企业中的项目-产品-开发流程"><a href="#4-企业中的项目-产品-开发流程" class="headerlink" title="4. 企业中的项目(产品)开发流程"></a>4. 企业中的项目(产品)开发流程</h3><p>一个中大型项目的开发流程</p><p>1、需求调研（产品经理）</p><p>2、需求评审（产品/设计/前端/后端/测试/运营）</p><p>3、立项（项目经理、品管）</p><p>4、UI设计</p><p>5、开发</p><ul><li>架构、数据库设计、API文档、MOCK数据、开发、单元测试</li><li>前端</li><li>后端</li></ul><p>6、前端后端联调</p><p>7、项目提测：黑盒白盒、压力测试（qps）  loadrunner</p><p>8、bug修改</p><p>9、回归测试</p><p>10、运维和部署上线</p><p>11、灰度发布</p><p>12、全量发布</p><p>13、维护和运营</p><h3 id="5-系统中都有那些角色-数据库是怎么设计的"><a href="#5-系统中都有那些角色-数据库是怎么设计的" class="headerlink" title="5.系统中都有那些角色?数据库是怎么设计的?"></a>5.系统中都有那些角色?数据库是怎么设计的?</h3><p>前台: 会员(学员)</p><p>后台: 系统管理员 运营人员</p><p>后台分库 每个微服务一个独立的数据库,使用了分布式id生成器</p><h4 id="6-视频点播是怎么实现的"><a href="#6-视频点播是怎么实现的" class="headerlink" title="6 视频点播是怎么实现的"></a>6 视频点播是怎么实现的</h4><p>直接接入了阿里云的云视频点播,云平台上的功能包括视频上传,转码,加密,智能审核,监控统计</p><p>还包括视频播放功能,阿里云还提供了一个视频播放器</p><h3 id="7-前后端联调经常遇到的问题"><a href="#7-前后端联调经常遇到的问题" class="headerlink" title="7 前后端联调经常遇到的问题"></a>7 前后端联调经常遇到的问题</h3><p>1、请求方式post、get</p><p>2、json、x-wwww-form-urlencoded混乱的错误</p><p>3、后台必要的参数，前端省略了</p><p>4、数据类型不匹配</p><p>5、空指针异常</p><p>6、分布式系统中分布式id生成器生成的id 长度过大（19个字符长度的整数），js无法解析（js只能解析16个长度：2的53次幂）</p><p>   id策略改成 ID_WORKER_STR</p><h3 id="8-前后端分离项目中的跨域问题是如何解决的"><a href="#8-前后端分离项目中的跨域问题是如何解决的" class="headerlink" title="8 前后端分离项目中的跨域问题是如何解决的"></a>8 前后端分离项目中的跨域问题是如何解决的</h3><p>后端服务器配置 : 我们项目中是使用了网关来解决跨域问题 GateWay</p><p>也可以使用 nginx反向代理 httpClient <a href="https://www.yuque.com/CrossOrigin">@CrossOrigin </a></p><h3 id="9-分布式系统的CAP原理"><a href="#9-分布式系统的CAP原理" class="headerlink" title="9 分布式系统的CAP原理"></a>9 分布式系统的CAP原理</h3><p><strong>CAP定理</strong></p><p>指的是一个分布式系统中, Consistency(一致性) Availability(可用性) Partition tolerance(分区容错性) 三者不可同时获得</p><ul><li>一致性(C) : 在分布式系统中的所有数据备份 ,在同一个时刻是否同样的值(所有的节点在同一时间的数据完全一致,越多节点,数据同步越耗时</li><li>可用性(A) : 负载过大后,集群整体是否还能响应客户端的读写请求(服务一直可用,而且是正常响应时间)</li><li>分区容错性(P): 分区容错性,就是高可用性 一个节点崩了,并不影响其他的节点(100个节点,挂了几个,不影响服务,越多机器越好)</li></ul><p><strong>CA满足的情况下,P不能满足的原因</strong></p><p>数据同步(C)需要时间,也要正常的时间内响应(A) 那么机器的数量就要少,所以就P不满足</p><p><strong>CP满足的情况下 ,A不能满足的原因</strong></p><p>数据同步(C)需要时间,机器的数据也多(P),那么就不能在正常的响应时间内响应,所以A就不满足</p><p><strong>AP满足的情况下,C不能满足的原因</strong></p><p>机器的数量也多P,正常的时间内响应A,那么数据就不能及时同步到其他节点,所以C不能满足</p><p>注册中心选择的原则</p><p><strong>结论：</strong></p><p>分布式系统中P,肯定要满足，所以我们只能在一致性和可用性之间进行权衡</p><p>如果要求一致性，则选择zookeeper，如金融行业</p><p>如果要求可用性，则Eureka，如教育、电商系统</p><p>没有最好的选择，最好的选择是根据业务场景来进行架构设计</p><h3 id="10-前端渲染和后端渲染有什么区别吗"><a href="#10-前端渲染和后端渲染有什么区别吗" class="headerlink" title="10 前端渲染和后端渲染有什么区别吗"></a>10 前端渲染和后端渲染有什么区别吗</h3><p>前端渲染是返回json给前端,通过JavaScript将数据绑定到页面上</p><p>后端渲染是在服务器端将页面生成直接发送给服务端,有利于SEO的优化</p><h3 id="11-系统大概架构图"><a href="#11-系统大概架构图" class="headerlink" title="11 系统大概架构图"></a>11 系统大概架构图</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/1608879798136-137ee66e-750d-4ccb-96cd-de2e1bcedf0d.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 语法速成手册</title>
      <link href="posts/24906.html"/>
      <url>posts/24906.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-语法速成手册"><a href="#SQL-语法速成手册" class="headerlink" title="SQL 语法速成手册"></a>SQL 语法速成手册</h1><blockquote><p>来源：静默虚空</p></blockquote><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="数据库术语"><a href="#数据库术语" class="headerlink" title="数据库术语"></a>数据库术语</h3><ul><li><code>数据库（database）</code>&nbsp;- 保存有组织的数据的容器（通常是一个文件或一组文件）。</li><li><code>数据表（table）</code>&nbsp;- 某种特定类型数据的结构化清单。</li><li><code>模式（schema）</code>&nbsp;- 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。</li><li><code>列（column）</code>&nbsp;- 表中的一个字段。所有表都是由一个或多个列组成的。</li><li><code>行（row）</code>&nbsp;- 表中的一个记录。</li><li><code>主键（primary key）</code>&nbsp;- 一列（或一组列），其值能够唯一标识表中每一行。</li></ul><h3 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h3><blockquote><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p></blockquote><h4 id="SQL-语法结构"><a href="#SQL-语法结构" class="headerlink" title="SQL 语法结构"></a>SQL 语法结构</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20210129195436713.png" alt="image-20210129195436713"></p><p>SQL 语法结构包括：</p><ul><li><strong><code>子句</code></strong>&nbsp;- 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）</li><li><strong><code>表达式</code></strong>&nbsp;- 可以产生任何标量值，或由列和行的数据库表</li><li><strong><code>谓词</code></strong>&nbsp;- 给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。</li><li><strong><code>查询</code></strong>&nbsp;- 基于特定条件检索数据。这是 SQL 的一个重要组成部分。</li><li><strong><code>语句</code></strong>&nbsp;- 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。</li></ul><h4 id="SQL-语法要点"><a href="#SQL-语法要点" class="headerlink" title="SQL 语法要点"></a>SQL 语法要点</h4><ul><li><strong>SQL 语句不区分大小写</strong>，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。</li></ul><p>例如：<code>SELECT</code>&nbsp;与&nbsp;<code>select</code>&nbsp;、<code>Select</code>&nbsp;是相同的。</p><ul><li><strong>多条 SQL 语句必须以分号（<code>;</code>）分隔</strong>。</li><li>处理 SQL 语句时，<strong>所有空格都被忽略</strong>。SQL 语句可以写成一行，也可以分写为多行。</li><li><ul><li>一行 SQL 语句UPDATE user SET username=’robot’, password=’robot’ WHERE username = ‘root’;– 多行 SQL 语句UPDATE userSET username=’robot’, password=’robot’WHERE username = ‘root’;</li></ul></li><li>SQL 支持三种注释## 注释1– 注释2/_ 注释3 _/</li></ul><h4 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h4><h4 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a>数据定义语言（DDL）</h4><p>数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。</p><p>DDL 的主要功能是<strong>定义数据库对象</strong>。</p><p>DDL 的核心指令是&nbsp;<code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>。</p><h4 id="数据操纵语言（DML）"><a href="#数据操纵语言（DML）" class="headerlink" title="数据操纵语言（DML）"></a>数据操纵语言（DML）</h4><p>数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。</p><p>DML 的主要功能是&nbsp;<strong>访问数据</strong>，因此其语法都是以<strong>读写数据库</strong>为主。</p><p>DML 的核心指令是&nbsp;<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>SELECT</code>。这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查。</p><h4 id="事务控制语言（TCL）"><a href="#事务控制语言（TCL）" class="headerlink" title="事务控制语言（TCL）"></a>事务控制语言（TCL）</h4><p>事务控制语言 (Transaction Control Language, TCL) 用于<strong>管理数据库中的事务</strong>。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。</p><p>TCL 的核心指令是&nbsp;<code>COMMIT</code>、<code>ROLLBACK</code>。</p><h4 id="数据控制语言（DCL）"><a href="#数据控制语言（DCL）" class="headerlink" title="数据控制语言（DCL）"></a>数据控制语言（DCL）</h4><p>数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。</p><p>DCL 的核心指令是&nbsp;<code>GRANT</code>、<code>REVOKE</code>。</p><p>DCL 以<strong>控制用户的访问权限</strong>为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：<code>CONNECT</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>EXECUTE</code>、<code>USAGE</code>、<code>REFERENCES</code>。</p><p>根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。</p><p>（以下为 DML 语句用法）</p><h2 id="二、增删改查"><a href="#二、增删改查" class="headerlink" title="二、增删改查"></a>二、增删改查</h2><blockquote><p>增删改查，又称为 CRUD，数据库基本操作中的基本操作。</p></blockquote><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><blockquote><ul><li><code>INSERT INTO</code>&nbsp;语句用于向表中插入新记录。</li></ul></blockquote><p><strong>插入完整的行</strong></p><pre><code>INSERT INTO userVALUES (10, 'root', 'root', 'xxxx@163.com');</code></pre><p><strong>插入行的一部分</strong></p><pre><code>INSERT INTO user(username, password, email)VALUES ('admin', 'admin', 'xxxx@163.com');</code></pre><p><strong>插入查询出来的数据</strong></p><pre><code>INSERT INTO user(username)SELECT nameFROM account;</code></pre><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><blockquote><ul><li><code>UPDATE</code>&nbsp;语句用于更新表中的记录。</li></ul></blockquote><pre><code>UPDATE userSET username='robot', password='robot'WHERE username = 'root';</code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><ul><li><code>DELETE</code>&nbsp;语句用于删除表中的记录。</li><li><code>TRUNCATE TABLE</code>&nbsp;可以清空表，也就是删除所有行。</li></ul></blockquote><p><strong>删除表中的指定数据</strong></p><pre><code>DELETE FROM userWHERE username = 'robot';</code></pre><p><strong>清空表中的数据</strong></p><pre><code>TRUNCATE TABLE user;</code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><blockquote><ul><li><code>SELECT</code>&nbsp;语句用于从数据库中查询数据。</li><li><code>DISTINCT</code>&nbsp;用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。</li><li><code>LIMIT</code>&nbsp;限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</li><li><code>ASC</code>&nbsp;：升序（默认）</li><li><code>DESC</code>&nbsp;：降序</li></ul></blockquote><p><strong>查询单列</strong></p><pre><code>SELECT prod_nameFROM products;</code></pre><p><strong>查询多列</strong></p><pre><code>SELECT prod_id, prod_name, prod_priceFROM products;</code></pre><p><strong>查询所有列</strong></p><pre><code>ELECT *FROM products;</code></pre><p><strong>查询不同的值</strong></p><pre><code>SELECT DISTINCTvend_id FROM products;</code></pre><p><strong>限制查询结果</strong></p><pre><code>-- 返回前 5 行SELECT * FROM mytable LIMIT 5;SELECT * FROM mytable LIMIT 0, 5;-- 返回第 3 ~ 5 行SELECT * FROM mytable LIMIT 2, 3;</code></pre><h2 id="三、子查询"><a href="#三、子查询" class="headerlink" title="三、子查询"></a>三、子查询</h2><blockquote><p>子查询是嵌套在较大查询中的 SQL 查询。子查询也称为<strong>内部查询</strong>或<strong>内部选择</strong>，而包含子查询的语句也称为<strong>外部查询</strong>或<strong>外部选择</strong>。</p></blockquote><ul><li>子查询可以嵌套在&nbsp;<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>&nbsp;或&nbsp;<code>DELETE</code>&nbsp;语句内或另一个子查询中。</li><li>子查询通常会在另一个&nbsp;<code>SELECT</code>&nbsp;语句的&nbsp;<code>WHERE</code>&nbsp;子句中添加。</li><li>您可以使用比较运算符，如&nbsp;<code>&gt;</code>，<code>&lt;</code>，或&nbsp;<code>=</code>。比较运算符也可以是多行运算符，如&nbsp;<code>IN</code>，<code>ANY</code>&nbsp;或&nbsp;<code>ALL</code>。</li><li>子查询必须被圆括号&nbsp;<code>()</code>&nbsp;括起来。</li><li>内部查询首先在其父查询之前执行，以便可以将内部查询的结果传递给外部查询。执行过程可以参考下图：<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20210129194030280.png" alt="image-20210129194030280"></li></ul><p><strong>子查询的子查询</strong></p><pre><code>SELECT cust_name, cust_contactFROM customersWHERE cust_id IN (SELECT cust_id                  FROM orders                  WHERE order_num IN (SELECT order_num                                      FROM orderitems                                      WHERE prod_id = 'RGAN01'));</code></pre><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><ul><li><code>WHERE</code>&nbsp;子句用于过滤记录，即缩小访问数据的范围。</li><li><code>WHERE</code>&nbsp;后跟一个返回&nbsp;<code>true</code>&nbsp;或&nbsp;<code>false</code>&nbsp;的条件。</li><li><code>WHERE</code>&nbsp;可以与&nbsp;<code>SELECT</code>，<code>UPDATE</code>&nbsp;和&nbsp;<code>DELETE</code>&nbsp;一起使用。</li><li>可以在&nbsp;<code>WHERE</code>&nbsp;子句中使用的操作符<table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>\=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>IN</td><td>指定针对某个列的多个可能值</td></tr></tbody></table></li></ul><p><strong><code>SELECT</code>&nbsp;语句中的&nbsp;<code>WHERE</code>&nbsp;子句</strong></p><pre><code>SELECT * FROM CustomersWHERE cust_name = 'Kids Place';</code></pre><p><strong><code>UPDATE</code>&nbsp;语句中的&nbsp;<code>WHERE</code>&nbsp;子句</strong></p><pre><code>UPDATE CustomersSET cust_name = 'Jack Jones'WHERE cust_name = 'Kids Place';</code></pre><p><strong><code>DELETE</code>&nbsp;语句中的&nbsp;<code>WHERE</code>&nbsp;子句</strong></p><pre><code>DELETE FROM CustomersWHERE cust_name = 'Kids Place';</code></pre><h3 id="IN-和-BETWEEN"><a href="#IN-和-BETWEEN" class="headerlink" title="IN 和 BETWEEN"></a>IN 和 BETWEEN</h3><ul><li><code>IN</code>&nbsp;操作符在&nbsp;<code>WHERE</code>&nbsp;子句中使用，作用是在指定的几个特定值中任选一个值。</li><li><code>BETWEEN</code>&nbsp;操作符在&nbsp;<code>WHERE</code>&nbsp;子句中使用，作用是选取介于某个范围内的值。</li></ul><p><strong>IN 示例</strong></p><pre><code>SELECT *FROM productsWHERE vend_id IN ('DLL01', 'BRS01');</code></pre><p><strong>BETWEEN 示例</strong></p><pre><code>SELECT *FROM productsWHERE prod_price BETWEEN 3 AND 5;</code></pre><h3 id="AND、OR、NOT"><a href="#AND、OR、NOT" class="headerlink" title="AND、OR、NOT"></a>AND、OR、NOT</h3><ul><li><code>AND</code>、<code>OR</code>、<code>NOT</code>&nbsp;是用于对过滤条件的逻辑处理指令。</li><li><code>AND</code>&nbsp;优先级高于&nbsp;<code>OR</code>，为了明确处理顺序，可以使用&nbsp;<code>()</code>。</li><li><code>AND</code>&nbsp;操作符表示左右条件都要满足。</li><li><code>OR</code>&nbsp;操作符表示左右条件满足任意一个即可。</li><li><code>NOT</code>&nbsp;操作符用于否定一个条件。</li></ul><p><strong>AND 示例</strong></p><pre><code>SELECT prod_id, prod_name, prod_priceFROM productsWHERE vend_id = 'DLL01' AND prod_price &lt;= 4;</code></pre><p><strong>OR 示例</strong></p><pre><code>SELECT prod_id, prod_name, prod_priceFROM productsWHERE vend_id = 'DLL01' OR vend_id = 'BRS01';</code></pre><p><strong>NOT 示例</strong></p><pre><code>SELECT *FROM productsWHERE prod_price NOT BETWEEN 3 AND 5;</code></pre><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><ul><li><code>LIKE</code>&nbsp;操作符在&nbsp;<code>WHERE</code>&nbsp;子句中使用，作用是确定字符串是否匹配模式。</li><li>只有字段是文本值时才使用&nbsp;<code>LIKE</code>。</li><li><code>LIKE</code>&nbsp;支持两个通配符匹配选项：<code>%</code>&nbsp;和&nbsp;<code>_</code>。</li><li>不要滥用通配符，通配符位于开头处匹配会非常慢。</li><li><code>%</code>&nbsp;表示任何字符出现任意次数。</li><li><code>_</code>&nbsp;表示任何字符出现一次。</li></ul><p><strong>% 示例</strong></p><pre><code>SELECT prod_id, prod_name, prod_priceFROM productsWHERE prod_name LIKE '%bean bag%';</code></pre><p><strong>_ 示例</strong></p><pre><code>SELECT prod_id, prod_name, prod_priceFROM productsWHERE prod_name LIKE '__ inch teddy bear';</code></pre><h2 id="四、连接和组合"><a href="#四、连接和组合" class="headerlink" title="四、连接和组合"></a>四、连接和组合</h2><h3 id="连接（JOIN）"><a href="#连接（JOIN）" class="headerlink" title="连接（JOIN）"></a>连接（JOIN）</h3><blockquote><ul><li>如果一个&nbsp;<code>JOIN</code>&nbsp;至少有一个公共字段并且它们之间存在关系，则该&nbsp;<code>JOIN</code>&nbsp;可以在两个或多个表上工作。</li><li>连接用于连接多个表，使用&nbsp;<code>JOIN</code>&nbsp;关键字，并且条件语句使用&nbsp;<code>ON</code>&nbsp;而不是&nbsp;<code>WHERE</code>。</li><li><code>JOIN</code>&nbsp;保持基表（结构和数据）不变。</li><li><code>JOIN</code>&nbsp;有两种连接类型：内连接和外连接。</li><li>内连接又称等值连接，使用 INNER&nbsp;<code>JOIN</code>&nbsp;关键字。在没有条件语句的情况下返回笛卡尔积。</li><li>自连接可以看成内连接的一种，只是连接的表是自身而已。</li><li>自然连接是把同名列通过 = 测试连接起来的，同名列可以有多个。</li><li>内连接 vs 自然连接</li><li>内连接提供连接的列，而自然连接自动连接所有同名列。</li><li>外连接返回一个表中的所有行，并且仅返回来自次表中满足连接条件的那些行，即两个表中的列是相等的。外连接分为左外连接、右外连接、全外连接（Mysql 不支持）。</li><li>左外连接就是保留左表没有关联的行。</li><li>右外连接就是保留右表没有关联的行。</li><li>连接 vs 子查询</li><li>连接可以替换子查询，并且比子查询的效率一般会更快。</li></ul></blockquote><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20210129194101680.png" alt="image-20210129194101680"></p><h4 id="内连接（INNER-JOIN）"><a href="#内连接（INNER-JOIN）" class="headerlink" title="内连接（INNER JOIN）"></a>内连接（INNER JOIN）</h4><pre><code>SELECT vend_name, prod_name, prod_priceFROM vendors INNER JOIN productsON vendors.vend_id = products.vend_id;</code></pre><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><pre><code>SELECT c1.cust_id, c1.cust_name, c1.cust_contactFROM customers c1, customers c2</code></pre><h4 id="自然连接（NATURAL-JOIN）"><a href="#自然连接（NATURAL-JOIN）" class="headerlink" title="自然连接（NATURAL JOIN）"></a>自然连接（NATURAL JOIN）</h4><pre><code>SELECT *FROM ProductsNATURAL JOIN Customers;</code></pre><h4 id="左连接（LEFT-JOIN）"><a href="#左连接（LEFT-JOIN）" class="headerlink" title="左连接（LEFT JOIN）"></a>左连接（LEFT JOIN）</h4><pre><code>SELECT customers.cust_id, orders.order_numFROM customers LEFT JOIN ordersON customers.cust_id = orders.cust_id;</code></pre><h4 id="右连接（RIGHT-JOIN）"><a href="#右连接（RIGHT-JOIN）" class="headerlink" title="右连接（RIGHT JOIN）"></a>右连接（RIGHT JOIN）</h4><pre><code>SELECT customers.cust_id, orders.order_numFROM customers RIGHT JOIN ordersON customers.cust_id = orders.cust_id;</code></pre><h3 id="组合（UNION）"><a href="#组合（UNION）" class="headerlink" title="组合（UNION）"></a>组合（UNION）</h3><ul><li><code>UNION</code>&nbsp;运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自&nbsp;<code>UNION</code>&nbsp;中参与查询的提取行。</li><li><code>UNION</code>&nbsp;基本规则</li><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li><li>默认会去除相同行，如果需要保留相同行，使用&nbsp;<code>UNION ALL</code>。</li><li>只能包含一个&nbsp;<code>ORDER BY</code>&nbsp;子句，并且必须位于语句的最后。</li><li>应用场景</li><li>在一个查询中从不同的表返回结构数据。</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul><p><strong>组合查询</strong></p><pre><code>SELECT cust_name, cust_contact, cust_emailFROM customersWHERE cust_state IN ('IL', 'IN', 'MI')UNIONSELECT cust_name, cust_contact, cust_emailFROM customersWHERE cust_name = 'Fun4All';</code></pre><h3 id="JOIN-vs-UNION"><a href="#JOIN-vs-UNION" class="headerlink" title="JOIN vs UNION"></a>JOIN vs UNION</h3><ul><li>JOIN vs UNION</li><li><code>JOIN</code>&nbsp;中连接表的列可能不同，但在&nbsp;<code>UNION</code>&nbsp;中，所有查询的列数和列顺序必须相同。</li><li><code>UNION</code>&nbsp;将查询之后的行放在一起（垂直放置），但&nbsp;<code>JOIN</code>&nbsp;将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。</li></ul><h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><blockquote><p>🔔 注意：不同数据库的函数往往各不相同，因此不可移植。本节主要以 Mysql 的函数为例。</p></blockquote><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>LEFT()</code>、<code>RIGHT()</code></td><td>左边或者右边的字符</td></tr><tr><td><code>LOWER()</code>、<code>UPPER()</code></td><td>转换为小写或者大写</td></tr><tr><td><code>LTRIM()</code>、<code>RTIM()</code></td><td>去除左边或者右边的空格</td></tr><tr><td><code>LENGTH()</code></td><td>长度</td></tr><tr><td><code>SOUNDEX()</code></td><td>转换为语音值</td></tr></tbody></table><p>其中，&nbsp;<strong>SOUNDEX()</strong>&nbsp;可以将一个字符串转换为描述其语音表示的字母数字模式。</p><pre><code>SELECT *FROM mytableWHERE SOUNDEX(col1) = SOUNDEX('apple')</code></pre><h3 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h3><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td><code>AddDate()</code></td><td>增加一个日期（天、周等）</td></tr><tr><td><code>AddTime()</code></td><td>增加一个时间（时、分等）</td></tr><tr><td><code>CurDate()</code></td><td>返回当前日期</td></tr><tr><td><code>CurTime()</code></td><td>返回当前时间</td></tr><tr><td><code>Date()</code></td><td>返回日期时间的日期部分</td></tr><tr><td><code>DateDiff()</code></td><td>计算两个日期之差</td></tr><tr><td><code>Date_Add()</code></td><td>高度灵活的日期运算函数</td></tr><tr><td><code>Date_Format()</code></td><td>返回一个格式化的日期或时间串</td></tr><tr><td><code>Day()</code></td><td>返回一个日期的天数部分</td></tr><tr><td><code>DayOfWeek()</code></td><td>对于一个日期，返回对应的星期几</td></tr><tr><td><code>Hour()</code></td><td>返回一个时间的小时部分</td></tr><tr><td><code>Minute()</code></td><td>返回一个时间的分钟部分</td></tr><tr><td><code>Month()</code></td><td>返回一个日期的月份部分</td></tr><tr><td><code>Now()</code></td><td>返回当前日期和时间</td></tr><tr><td><code>Second()</code></td><td>返回一个时间的秒部分</td></tr><tr><td><code>Time()</code></td><td>返回一个日期时间的时间部分</td></tr><tr><td><code>Year()</code></td><td>返回一个日期的年份部分</td></tr></tbody></table></li></ul><pre><code>mysql&gt; SELECT NOW();2018-4-14 20:25:11</code></pre><h3 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SIN()</td><td>正弦</td></tr><tr><td>COS()</td><td>余弦</td></tr><tr><td>TAN()</td><td>正切</td></tr><tr><td>ABS()</td><td>绝对值</td></tr><tr><td>SQRT()</td><td>平方根</td></tr><tr><td>MOD()</td><td>余数</td></tr><tr><td>EXP()</td><td>指数</td></tr><tr><td>PI()</td><td>圆周率</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>返回某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>返回某列的行数</td></tr><tr><td><code>MAX()</code></td><td>返回某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>返回某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>返回某列值之和</td></tr></tbody></table><p><code>AVG()</code>&nbsp;会忽略 NULL 行。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p><pre><code>SELECT AVG(DISTINCT col1) AS avg_colFROM mytable</code></pre><h2 id="六、排序和分组"><a href="#六、排序和分组" class="headerlink" title="六、排序和分组"></a>六、排序和分组</h2><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><ul><li><code>ORDER BY</code>&nbsp;用于对结果集进行排序。</li><li><code>ASC</code>&nbsp;：升序（默认）</li><li><code>DESC</code>&nbsp;：降序</li><li>可以按多个列进行排序，并且为每个列指定不同的排序方式</li></ul><p><strong>指定多个列的排序方向</strong></p><pre><code>SELECT * FROM productsORDER BY prod_price DESC, prod_name ASC;</code></pre><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><ul><li><code>GROUP BY</code>&nbsp;子句将记录分组到汇总行中。</li><li><code>GROUP BY</code>&nbsp;为每个组返回一个记录。</li><li><code>GROUP BY</code>&nbsp;通常还涉及聚合：COUNT，MAX，SUM，AVG 等。</li><li><code>GROUP BY</code>&nbsp;可以按一列或多列进行分组。</li><li><code>GROUP BY</code>&nbsp;按分组字段进行排序后，<code>ORDER BY</code>&nbsp;可以以汇总字段来进行排序。</li></ul><p><strong>分组</strong></p><pre><code>SELECT cust_name, COUNT(cust_address) AS addr_numFROM Customers GROUP BY cust_name;</code></pre><p><strong>分组后排序</strong></p><pre><code>SELECT cust_name, COUNT(cust_address) AS addr_numFROM Customers GROUP BY cust_nameORDER BY cust_name DESC;</code></pre><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><ul><li><code>HAVING</code>&nbsp;用于对汇总的&nbsp;<code>GROUP BY</code>&nbsp;结果进行过滤。</li><li><code>HAVING</code>&nbsp;要求存在一个&nbsp;<code>GROUP BY</code>&nbsp;子句。</li><li><code>WHERE</code>&nbsp;和&nbsp;<code>HAVING</code>&nbsp;可以在相同的查询中。</li><li><code>HAVING</code>&nbsp;vs&nbsp;<code>WHERE</code></li><li><code>WHERE</code>&nbsp;和&nbsp;<code>HAVING</code>&nbsp;都是用于过滤。</li><li><code>HAVING</code>&nbsp;适用于汇总的组记录；而 WHERE 适用于单个记录。</li></ul><p><strong>使用 WHERE 和 HAVING 过滤数据</strong></p><pre><code>SELECT cust_name, COUNT(*) AS numFROM CustomersWHERE cust_email IS NOT NULLGROUP BY cust_nameHAVING COUNT(*) &gt;= 1;</code></pre><p>（以下为 DDL 语句用法）</p><h2 id="七、数据定义"><a href="#七、数据定义" class="headerlink" title="七、数据定义"></a>七、数据定义</h2><blockquote><p>DDL 的主要功能是定义数据库对象（如：数据库、数据表、视图、索引等）。</p></blockquote><h3 id="数据库（DATABASE）"><a href="#数据库（DATABASE）" class="headerlink" title="数据库（DATABASE）"></a>数据库（DATABASE）</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre><code>CREATE DATABASE test;</code></pre><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><pre><code>DROP DATABASE test;</code></pre><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><pre><code>USE test;</code></pre><h3 id="数据表（TABLE）"><a href="#数据表（TABLE）" class="headerlink" title="数据表（TABLE）"></a>数据表（TABLE）</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p><strong>普通创建</strong></p><pre><code>CREATE TABLE user (  id int(10) unsigned NOT NULL COMMENT 'Id',  username varchar(64) NOT NULL DEFAULT 'default' COMMENT '用户名',  password varchar(64) NOT NULL DEFAULT 'default' COMMENT '密码',  email varchar(64) NOT NULL DEFAULT 'default' COMMENT '邮箱') COMMENT='用户表';</code></pre><p><strong>根据已有的表创建新表</strong></p><pre><code>CREATE TABLE vip_user ASSELECT * FROM user;</code></pre><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><pre><code>DROP TABLE user;</code></pre><h4 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h4><p><strong>添加列</strong></p><pre><code>ALTER TABLE userADD age int(3);</code></pre><p><strong>删除列</strong></p><pre><code>ALTER TABLE userDROP COLUMN age;</code></pre><p><strong>修改列</strong></p><pre><code>ALTER TABLE `user`MODIFY COLUMN age tinyint;</code></pre><p><strong>添加主键</strong></p><pre><code>ALTER TABLE userADD PRIMARY KEY (id);</code></pre><p><strong>删除主键</strong></p><pre><code>ALTER TABLE userDROP PRIMARY KEY;</code></pre><h3 id="视图（VIEW）"><a href="#视图（VIEW）" class="headerlink" title="视图（VIEW）"></a>视图（VIEW）</h3><blockquote><ul><li>定义</li><li>视图是基于 SQL 语句的结果集的可视化的表。</li><li>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。</li><li>作用</li><li>简化复杂的 SQL 操作，比如复杂的联结；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul></blockquote><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><pre><code>CREATE VIEW top_10_user_view ASSELECT id, usernameFROM userWHERE id &lt; 10;</code></pre><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><pre><code>DROP VIEW top_10_user_view;</code></pre><h3 id="索引（INDEX）"><a href="#索引（INDEX）" class="headerlink" title="索引（INDEX）"></a>索引（INDEX）</h3><blockquote><ul><li>作用</li><li>通过索引可以更加快速高效地查询数据。</li><li>用户无法看到索引，它们只能被用来加速查询。</li><li>注意</li><li>更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</li><li>唯一索引</li><li>唯一索引表明此索引的每一个索引值只对应唯一的数据记录。</li></ul></blockquote><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><pre><code>CREATE INDEX user_indexON user (id);</code></pre><h4 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h4><pre><code>CREATE UNIQUE INDEX user_indexON user (id);</code></pre><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><pre><code>ALTER TABLE userDROP INDEX user_index;</code></pre><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><blockquote><p>SQL 约束用于规定表中的数据规则。</p></blockquote><ul><li>如果存在违反约束的数据行为，行为会被约束终止。</li><li>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</li><li>约束类型</li><li><code>NOT NULL</code>&nbsp;- 指示某列不能存储 NULL 值。</li><li><code>UNIQUE</code>&nbsp;- 保证某列的每行必须有唯一的值。</li><li><code>PRIMARY KEY</code>&nbsp;- NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li><code>FOREIGN KEY</code>&nbsp;- 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li><code>CHECK</code>&nbsp;- 保证列中的值符合指定的条件。</li><li><code>DEFAULT</code>&nbsp;- 规定没有给列赋值时的默认值。</li></ul><p>创建表时使用约束条件：</p><pre><code>CREATE TABLE Users (  Id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '自增Id',  Username VARCHAR(64) NOT NULL UNIQUE DEFAULT 'default' COMMENT '用户名',  Password VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '密码',  Email VARCHAR(64) NOT NULL DEFAULT 'default' COMMENT '邮箱地址',  Enabled TINYINT(4) DEFAULT NULL COMMENT '是否有效',  PRIMARY KEY (Id)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='用户表';</code></pre><p>（以下为 TCL 语句用法）</p><h2 id="八、事务处理"><a href="#八、事务处理" class="headerlink" title="八、事务处理"></a>八、事务处理</h2><blockquote><ul><li>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</li><li><strong>MySQL 默认是隐式提交</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现&nbsp;<code>START TRANSACTION</code>&nbsp;语句时，会关闭隐式提交；当&nbsp;<code>COMMIT</code>&nbsp;或&nbsp;<code>ROLLBACK</code>&nbsp;语句执行后，事务会自动关闭，重新恢复隐式提交。</li><li>通过&nbsp;<code>set autocommit=0</code>&nbsp;可以取消自动提交，直到&nbsp;<code>set autocommit=1</code>&nbsp;才会提交；autocommit 标记是针对每个连接而不是针对服务器的。</li><li>指令</li><li><code>START TRANSACTION</code>&nbsp;- 指令用于标记事务的起始点。</li><li><code>SAVEPOINT</code>&nbsp;- 指令用于创建保留点。</li><li><code>ROLLBACK TO</code>&nbsp;- 指令用于回滚到指定的保留点；如果没有设置保留点，则回退到&nbsp;<code>START TRANSACTION</code>&nbsp;语句处。</li><li><code>COMMIT</code>&nbsp;- 提交事务。</li></ul></blockquote><pre><code>-- 开始事务START TRANSACTION;-- 插入操作 A</code></pre><p>（以下为 DCL 语句用法）</p><h2 id="九、权限控制"><a href="#九、权限控制" class="headerlink" title="九、权限控制"></a>九、权限控制</h2><blockquote><ul><li>GRANT 和 REVOKE 可在几个层次上控制访问权限：</li><li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li><li>新创建的账户没有任何权限。</li><li>账户用 username<a href="/host">@host </a> 的形式定义，username@% 使用的是默认主机名。 </li><li>MySQL 的账户信息保存在 mysql 这个数据库中。```<br>USE mysql;SELECT user FROM user;复制代码</li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 创建账户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> myuser IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'mypassword'</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 修改账户名</span><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'newuser'</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'myuser'</span><span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 删除账户</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> myuser<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 查看权限</span><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> myuser<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 授予权限</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> myuser<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 删除权限</span><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> myuser<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 更改密码</span><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> myuser <span class="token operator">=</span> <span class="token string">'mypass'</span><span class="token punctuation">;</span></code></pre><pre class=" language-ddl"><code class="language-ddl">## 十、存储过程> - 存储过程可以看成是对一系列 SQL 操作的批处理；> - 使用存储过程的好处> - 代码封装，保证了一定的安全性；> - 代码复用；> - 由于是预先编译，因此具有很高的性能。> - 创建存储过程> - 命令行中创建存储过程需要自定义分隔符，因为命令行是以&nbsp;`;`&nbsp;为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。> - 包含 in、out 和 inout 三种参数。> - 给变量赋值都需要用 select into 语句。> - 每次只能给一个变量赋值，不支持集合的操作。### 创建存储过程DROP PROCEDURE IF EXISTS `proc_adder`;DELIMITER ;;CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_adder`(IN a int, IN b int, OUT sum int)BEGIN    DECLARE c int;    if a is null then set a = 0;    end if;    if b is null then set b = 0;    end if;    set sum  = a + b;END;;DELIMITER ;</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 使用存储过程</span><span class="token keyword">set</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">call</span> proc_adder<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">,</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token keyword">as</span> sum<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">## 十一、游标</span><span class="token operator">></span> <span class="token operator">-</span> 游标（<span class="token keyword">cursor</span>）是一个存储在 DBMS 服务器上的数据库查询，它不是一条 <span class="token keyword">SELECT</span> 语句，而是被该语句检索出来的结果集。<span class="token operator">></span> <span class="token operator">-</span> 在存储过程中使用游标可以对一个结果集进行移动遍历。<span class="token operator">></span> <span class="token operator">-</span> 游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。<span class="token operator">></span> <span class="token operator">-</span> 使用游标的四个步骤：<span class="token operator">></span> <span class="token operator">-</span> 声明游标，这个过程没有实际检索出数据；<span class="token operator">></span> <span class="token operator">-</span> 打开游标；<span class="token operator">></span> <span class="token operator">-</span> 取出数据；<span class="token operator">></span> <span class="token operator">-</span> 关闭游标；<span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span>  <span class="token keyword">PROCEDURE</span> getTotal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 创建接收游标数据的变量    DECLARE sid INT;    DECLARE sname VARCHAR(10);    -- 创建总数变量    DECLARE sage INT;    -- 创建结束标志变量</span></code></pre><h2 id="十二、触发器"><a href="#十二、触发器" class="headerlink" title="十二、触发器"></a>十二、触发器</h2><blockquote><p>触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。</p></blockquote><p>可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。</p><p>MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。</p><p><strong><code>BEGIN</code>&nbsp;和&nbsp;<code>END</code></strong></p><p>当触发器的触发条件满足时，将会执行&nbsp;<code>BEGIN</code>&nbsp;和&nbsp;<code>END</code>&nbsp;之间的触发器执行动作。</p><blockquote><p>🔔&nbsp;注意：在 MySQL 中，分号&nbsp;<code>;</code>&nbsp;是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL 可以开始执行了。因此，解释器遇到触发器执行动作中的分号后就开始执行，然后会报错，因为没有找到和 BEGIN 匹配的 END。<br>这时就会用到&nbsp;<code>DELIMITER</code>&nbsp;命令（DELIMITER 是定界符，分隔符的意思）。它是一条命令，不需要语句结束标识，语法为：<code>DELIMITER new_delemiter</code>。<code>new_delemiter</code>&nbsp;可以设为 1 个或多个长度的符号，默认的是分号&nbsp;<code>;</code>，我们可以把它修改为其他符号，如&nbsp;<code>$</code>&nbsp;-&nbsp;<code>DELIMITER $</code>&nbsp;。在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了&nbsp;<code>$</code>，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。</p></blockquote><p><strong><code>NEW</code>&nbsp;和&nbsp;<code>OLD</code></strong></p><ul><li>MySQL 中定义了&nbsp;<code>NEW</code>&nbsp;和&nbsp;<code>OLD</code>&nbsp;关键字，用来表示触发器的所在表中，触发了触发器的那一行数据。</li><li>在&nbsp;<code>INSERT</code>&nbsp;型触发器中，<code>NEW</code>&nbsp;用来表示将要（<code>BEFORE</code>）或已经（<code>AFTER</code>）插入的新数据；</li><li>在&nbsp;<code>UPDATE</code>&nbsp;型触发器中，<code>OLD</code>&nbsp;用来表示将要或已经被修改的原数据，<code>NEW</code>&nbsp;用来表示将要或已经修改为的新数据；</li><li>在&nbsp;<code>DELETE</code>&nbsp;型触发器中，<code>OLD</code>&nbsp;用来表示将要或已经被删除的原数据；</li><li>使用方法：&nbsp;<code>NEW.columnName</code>&nbsp;（columnName 为相应数据表某一列名）</li></ul><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><blockquote><p>提示：为了理解触发器的要点，有必要先了解一下创建触发器的指令。</p></blockquote><p><code>CREATE TRIGGER</code>&nbsp;指令用于创建触发器。</p><p>语法：</p><pre><code>CREATE TRIGGER trigger_nametrigger_timetrigger_eventON table_nameFOR EACH ROWBEGIN  trigger_statementsEND;</code></pre><p>说明：</p><ul><li>trigger_name：触发器名</li><li>trigger_time: 触发器的触发时机。取值为&nbsp;<code>BEFORE</code>&nbsp;或&nbsp;<code>AFTER</code>。</li><li>trigger_event: 触发器的监听事件。取值为&nbsp;<code>INSERT</code>、<code>UPDATE</code>&nbsp;或&nbsp;<code>DELETE</code>。</li><li>table_name: 触发器的监听目标。指定在哪张表上建立触发器。</li><li>FOR EACH ROW: 行级监视，Mysql 固定写法，其他 DBMS 不同。</li><li>trigger_statements: 触发器执行动作。是一条或多条 SQL 语句的列表，列表内的每条语句都必须用分号&nbsp;<code>;</code>&nbsp;来结尾。</li></ul><p>示例：</p><pre><code>DELIMITER $CREATE TRIGGER `trigger_insert_user`AFTER INSERT ON `user`FOR EACH ROWBEGIN    INSERT INTO `user_history`(user_id, operate_type, operate_time)    VALUES (NEW.id, 'add a user',  now());END $DELIMITER ;</code></pre><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><pre><code>SHOW TRIGGERS;</code></pre><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><p><code>DROP TRIGGER IF EXISTS trigger_insert_user;</code></p><p><strong><em>— END —</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒个人笔记</title>
      <link href="posts/62512.html"/>
      <url>posts/62512.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>视频地址 <a href="https://www.bilibili.com/video/BV1np4y1C7Yf">https://www.bilibili.com/video/BV1np4y1C7Yf</a></p></blockquote><h2 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h2><h2 id="二、分布式基础概念"><a href="#二、分布式基础概念" class="headerlink" title="二、分布式基础概念"></a>二、分布式基础概念</h2><p>集群是个物理形态，分布式是个工作方式。</p><p>远程调用：在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的相互调用，我们成为远程调用</p><p>springcloud中使用HTTP+JSON的方式完成远程调用</p><p><strong>服务注册/发现&amp;注册中心</strong></p><p>A服务调用B服务，A服务并不知道B服务当前在哪几台服务器有，那些是正常的，那些服务已经下线。解决这个问题可以引入注册中心。</p><p>配置中心用来几种管理微服务的配置信息。</p><p><strong>服务熔断&amp;服务降级</strong></p><p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，==当其中一个服务不可用时，有可能会造成雪崩效应==。要防止这样的情况，必须要有容错机制来保护服务。</p><p>rpc</p><p>情景：</p><p>订单服务 –&gt; 商品服务 –&gt; 库存服务</p><p>库存服务出现故障导致响应慢，导致商品服务需要等待，可能等到10s后库存服务才能响应。库存服务的不可用导致商品服务阻塞，商品服务等的期间，订单服务也处于阻塞。一个服务不可用导致整个服务链都阻塞。如果是高并发，第一个请求调用后阻塞10s得不到结果，第二个请求直接阻塞10s。更多的请求进来导致请求积压，全部阻塞，最终服务器的资源耗尽。导致雪崩</p><p>解决方案：</p><p>1 服务熔断</p><p>指定超时时间，库存服务3s没有响应就超时，如果经常失败，比如10s内100个请求都失败了。开启断路保护机制，下一次请求进来不调用库存服务了，因为上一次100%错误都出现了，我们直接在此中断，==商品服务直接返回，返回一些默认数据或者null，而不调用库存服务了，这样就不会导致请求积压==。</p><ul><li>设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据</li></ul><p>2 服务降级</p><ul><li>在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者处理简单【抛异常、返回NULL、调用Mock数据、调用Faaback处理逻辑】</li></ul><p><strong>API网关</strong></p><p>客户端发送请求到服务器路途中，设置一个网关，请求都先到达网关，网关对请求进行统一认证（合法非法）和处理等操作。他是安检。</p><p>在微服务架构中，API gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富的功能，帮助我们解决很多API管理难题。</p><p><img src="https://fermhan.oss-cn-qingdao.aliyuncs.com/img/20200622213003.jpg"></p><p>前后分离开发，分为内网部署和外网部署，外网是面向公众访问的，部署前端项目，可以有手机APP，电脑网页；内网部署的是后端集群，前端在页面上操作发送请求到后端，在这途中会经过Nginx集群，==Nginx把请求转交给API网关==(springcloud gateway)（网关可以根据当前请求动态地路由到指定的服务，看当前请求是想调用商品服务还是购物车服务还是检索），从路由过来如果请求很多，可以负载均衡地调用商品服务器中一台（商品服务复制了多份），当商品服务器出现问题也可以在网关层面对服务进行熔断或降级（使用阿里的sentinel组件），网关还有其他的功能如认证授权、限流（只放行部分到服务器）等。</p><p>到达服务器后进行处理（springboot为微服务），服务与服务可能会相互调用（使用feign组件），有些请求可能经过登录才能进行（基于OAuth2.0的认证中心。安全和权限使用springSecurity控制）</p><p>服务可能保存了一些数据或者需要使用缓存，我们使用redis集群（分片+哨兵集群）。持久化使用mysql，读写分离和分库分表。</p><p>服务和服务之间会使用消息队列（RabbitMQ），来完成异步解耦，分布式事务的一致性。有些服务可能需要全文检索，检索商品信息，使用ElaticSearch。</p><p>服务可能需要存取数据，使用阿里云的对象存储服务OSS。</p><p>项目上线后为了快速定位问题，使用ELK对日志进行处理，使用LogStash收集业务里的各种日志，把日志存储到ES中，用Kibana可视化页面从ES中检索出相关信息，帮助我们快速定位问题所在。</p><p>在分布式系统中，由于我们每个服务都可能部署在很多台机器，服务和服务可能相互调用，就得知道彼此都在哪里，所以需要将所有服务都注册到注册中心。服务从注册中心发现其他服务所在位置（使用阿里Nacos作为注册中心）。</p><p>每个服务的配置众多，为了实现改一处配置相同配置就同步更改，就需要配置中心，也使用阿里的Nacos，服务从配置中心中动态取配置。</p><p>服务追踪，追踪服务调用链哪里出现问题，使用springcloud提供的Sleuth、Zipkin、Metrics，把每个服务的信息交给开源的Prometheus进行聚合分析，再由Grafana进行可视化展示，提供Prometheus提供的AlterManager实时得到服务的告警信息，以短信/邮件的方式告知服务开发人员。</p><p>还提供了持续集成和持续部署。项目发布起来后，因为微服务众多，每一个都打包部署到服务器太麻烦，有了持续集成后开发人员可以将修改后的代码提交到github，运维人员可以通过自动化工具Jenkins Pipeline将github中获取的代码打包成docker镜像，最终是由k8s集成docker服务，将服务以docker容器的方式运行。</p><h5 id="微服务划分图"><a href="#微服务划分图" class="headerlink" title="微服务划分图"></a>微服务划分图</h5><p><img src="https://fermhan.oss-cn-qingdao.aliyuncs.com/img/20200624135254.png"></p><p>反映了需要创建的微服务以及相关技术。</p><p>前后分离开发。前端项目分为admin-vue（工作人员使用的后台管理系统）、shop-vue（面向公众访问的web网站）、app（公众）、小程序（公众）</p><ul><li>商品服务：商品的增删改查、商品的上下架、商品详情</li><li>支付服务</li><li>优惠服务</li><li>用户服务：用户的个人中心、收货地址</li><li>仓储服务：商品的库存</li><li>秒杀服务：</li><li>订单服务：订单增删改查</li><li>检索服务：商品的检索ES</li><li>中央认证服务：登录、注册、单点登录、社交登录</li><li>购物车服务：</li><li>后台管理系统：添加优惠信息等</li></ul><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>visualBox进行安装需要cpu开启虚拟化，在开机启动的时候设置主板，CPU configuration，然后点击Intel Vitualization Technology。重启电脑</p><p>普通安装linux虚拟机太麻烦，可以利用vagrant可以帮助我们快速地创建一个虚拟机。主要装了vitualbox，vagrant可以帮助我们快速创建出一个虚拟机。他有一个镜像仓库。</p><p>去<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a> 下载vagrant安装，安装后重启系统。cmd中输入vagrant有版本代表成功了。</p><p>输入<code>vagrant init centos/7</code>，即可初始化一个centos7系统。（注意这个命令在哪个目录下执行的，他的Vagrantfile就生成在哪里）</p><p><code>vagrant up</code>启动虚拟机环境。</p><p>启动后出现default folder:/cygdrive/c/User/… =&gt;/vagrant。然后ctrl+c退出</p><p>前面的页面中有ssh账号信息。</p><p><code>vagrant  ssh </code>就会连上虚拟机。可以使用exit退出</p><blockquote><p> 下次使用也可以直接vagrant up直接启动，但要确保当前目录在C:/用户/ 文件夹下，他下面有一个Vagrantfile，不过我们也可以配置环境变量。</p><p>启动后再次<code>vagrant  ssh </code>连上即可</p></blockquote><p>不过他使用的网络方式是网络地址转换NAT（端口转发），如果其他主机要访问虚拟机，必须由windows端口如3333断发给虚拟机端口如3306。这样每在linux里安一个软件都要进行端口映射，不方便，（也可以在virualBox里挨个设置）。我们想要给虚拟机一个固定的ip地址，windows和虚拟机可以互相ping通。方式1是在虚拟机中配置静态ip。也可以更改Vagrantfile更改虚拟机ip，修改其中的<code>config.vm.network "private_network",ip:"192.168.56.10"</code>，这个ip需要在windows的ipconfig中查到vitualbox的网卡ip，然后更改下最后一个数字就行（不能是1）。配置完后重启虚拟机。在虚拟机中<code>ip addr</code>就可以查看到地址了。互相ping也能ping通。</p><h5 id="虚拟机安装docker"><a href="#虚拟机安装docker" class="headerlink" title="虚拟机安装docker"></a>虚拟机安装docker</h5><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#卸载系统之前的docker </span><span class="token function">sudo</span> yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils<span class="token comment" spellcheck="true"># 配置镜像</span><span class="token function">sudo</span> yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token function">sudo</span> systemctl start docker<span class="token comment" spellcheck="true"># 设置开机自启动</span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> dockerdocker -v<span class="token function">sudo</span> docker images<span class="token comment" spellcheck="true"># 配置镜像加速</span></code></pre><p><a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">https://cr.console.aliyun.com/cn-qingdao/instances/mirrors</a></p><p>根据页面命令执行完命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://chqac97z.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><p>用docker安装上mysql，去docker仓库里搜索mysql</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker pull mysql:5.7<span class="token comment" spellcheck="true"># --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行</span><span class="token function">sudo</span> docker run -p 3306:3306 --name mysql \-v /mydata/mysql/log:/var/log/mysql \-v /mydata/mysql/data:/var/lib/mysql \-v /mydata/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>root \-d mysql:5.7</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">su</span> root 密码为vagrant，这样就可以不写sudo了</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost vagrant<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES6a685a33103f        mysql:5.7           <span class="token string">"docker-entrypoint.s…"</span>   32 seconds ago      Up 30 seconds       0.0.0.0:3306-<span class="token operator">></span>3306/tcp, 33060/tcp   mysql</code></pre><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it mysql bin/bash<span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token function">vi</span> /mydata/mysql/conf/my.conf <span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>init_connect<span class="token operator">=</span><span class="token string">'SET collation_connection = utf8_unicode_ci'</span>init_connect<span class="token operator">=</span><span class="token string">'SET NAMES utf8'</span>character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve保存<span class="token punctuation">(</span>collection而是collation<span class="token punctuation">)</span>docker restart mysql</code></pre><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p>如果直接挂载的话docker会以为挂载的是一个目录，所以我们先创建一个文件然后再挂载，在虚拟机中。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在虚拟机中</span><span class="token function">mkdir</span> -p /mydata/redis/conf<span class="token function">touch</span> /mydata/redis/conf/redis.confdocker pull redisdocker run -p 6379:6379 --name redis \-v /mydata/redis/data:/data \-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \-d redis redis-server /etc/redis/redis.conf<span class="token comment" spellcheck="true"># 直接进去redis客户端。</span>docker <span class="token function">exec</span> -it redis redis-cli</code></pre><p>默认是不持久化的。在配置文件中输入appendonly yes，就可以aof持久化了。修改完docker restart redis，docker -it redis redis-cli</p><pre class=" language-bash"><code class="language-bash">vim /mydata/redis/conf/redis.conf<span class="token comment" spellcheck="true"># 插入下面内容</span>appendonly <span class="token function">yes</span>保存docker restart redis</code></pre><p>开发环境</p><h5 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h5><p>在settins中配置阿里云镜像，配置jdk1.8。安装插件lombok，mybatisX。</p><h5 id="vsCode"><a href="#vsCode" class="headerlink" title="vsCode"></a>vsCode</h5><p>下载vsCode用于前端管理系统。在vsCode里安装插件。</p><ul><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>Chinese</li><li>ESlint</li><li>HTML CSS Support</li><li>HTML Snippets</li><li>JavaScript ES6</li><li>Live Server</li><li>open in brower</li><li>Vetur</li></ul><h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><p>下载git客户端，右键桌面Git GUI/bash Here。去bash，</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 配置用户名</span><span class="token function">git</span> config --global user.name <span class="token string">"weifeng"</span>  //<span class="token punctuation">(</span>名字，随意写<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置邮箱</span><span class="token function">git</span> config --global user.email <span class="token string">"1783246945@qq.com"</span> // 注册账号时使用的邮箱<span class="token comment" spellcheck="true"># 配置ssh免密登录</span>ssh-keygen -t rsa -C <span class="token string">"1783246945@qq.com"</span>三次回车后生成了密钥<span class="token function">cat</span> ~/.ssh/id_rsa.pub也可以查看密钥浏览器登录码云后，个人头像上点设置、然后点ssh公钥、随便填个标题，然后赋值ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6MWhGXSKdRxr1mGPZysDrcwABMTrxc8Va2IWZyIMMRHH9Qn/wy3PN2I9144UUqg65W0CDE/thxbOdn78MygFFsIG4j0wdT9sdjmSfzQikLHFsJ02yr58V6J2zwXcW9AhIlaGr+XIlGKDUy5mXb4OF+6UMXM6HKF7rY9FYh9wL6bun9f1jV4Ydlxftb/xtV8oQXXNJbI6OoqkogPKBYcNdWzMbjJdmbq2bSQugGaPVnHEqAD74Qgkw1G7SIDTXnY55gBlFPVzjLWUu74OWFCx4pFHH6LRZOCLlMaJ9haTwT2DB/sFzOG/Js+cEExx/arJ2rvvdmTMwlv/T+6xhrMS3 1783246945@qq.com<span class="token comment" spellcheck="true"># 测试</span><span class="token function">ssh</span> -T git@gitee.com测试成功</code></pre><h5 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h5><p>在码云新建仓库，仓库名gulimall，选择语言java，在.gitignore选中maven，许可证选Apache-2.0，开发模型选生成/开发模型，开发时在dev分支，发布时在master分支，创建。</p><p>在IDEA中New–Project from version control–git–复制刚才项目的地址，如<code>https://gitee.com/hanferm/gulimall.git</code></p><p>然后New Module–Spring Initializer–com.atguigu.gulimall ， Artifact填 gulimall-product。Next—选择web，springcloud routin里选中openFeign。</p><p>依次创建出以下服务</p><ul><li>商品服务product</li><li>存储服务ware</li><li>订单服务order</li><li>优惠券服务coupon</li><li>用户服务member</li></ul><p>共同点：</p><ul><li>导入web和openFeign</li><li>group：com.atguigu.gulimall</li><li>Artifact：gulimall-XXX</li><li>每一个服务，包名com.atguigu.gulimall.XXX{product/order/ware/coupon/member}</li><li>模块名：gulimall-XXX</li></ul><p>然后右下角显示了springboot的service选项，选择他</p><p>从某个项目粘贴个pom.xml粘贴到项目目录，修改他</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>聚合服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-member<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-ware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>在maven窗口刷新，并点击+号，找到刚才的pom.xml添加进来，发现多了个root。这样比如运行root的clean命令，其他项目也一起clean了。</p><p>修改总项目的.gitignore，把小项目里的垃圾文件在提交的时候忽略掉，比如HTLP.md。。。</p><p>在version control/local Changes，点击刷新看Unversioned Files，可以看到变化。</p><p>全选最后剩下21个文件，选择右键、Add to VCS。</p><p>在IDEA中安装插件：gitee，重启IDEA。</p><p>在D额fault changelist右键点击commit，去掉右面的勾选Perform code analysis、CHECK TODO，然后点击COMMIT，有个下拉列表，点击commit and push才会提交到云端。此时就可以在浏览器中看到了。</p><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p>因为已经有人贡献sql文件了，所以我们不理会下面引用部分的内容了</p><blockquote><p>安装powerDesigner软件。<a href="http://forspeed.onlinedown.net/down/powerdesigner1029.zip">http://forspeed.onlinedown.net/down/powerdesigner1029.zip</a></p><p>其他软件：<br><a href="https://www.lanzous.com/b015ag33e">https://www.lanzous.com/b015ag33e</a></p><p>密码:2wre</p><p>所有的数据库数据再复杂也不建立外键，因为在电商系统里，数据量大，做外键关联很耗性能。</p><p>name是给我们看的，code才是数据库里真正的信息。</p><p>选择primary和identity作为主键。然后点preview就可以看到生成这张表的语句。</p><p>点击菜单栏database–generate database—点击确定</p></blockquote><p>找到评论区的sql文件，打开sqlyog软件，链接192.168.56.10，账号密码root。</p><blockquote><p>注意重启虚拟机和docker后里面的容器就关了。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">ps</span><span class="token function">sudo</span> docker <span class="token function">ps</span> -a<span class="token comment" spellcheck="true"># 这两个命令的差别就是后者会显示  【已创建但没有启动的容器】</span><span class="token comment" spellcheck="true"># 我们接下来设置我们要用的容器每次都是自动启动</span><span class="token function">sudo</span> docker update redis --restart<span class="token operator">=</span>always<span class="token function">sudo</span> docker update mysql --restart<span class="token operator">=</span>always<span class="token comment" spellcheck="true"># 如果不配置上面的内容的话，我们也可以选择手动启动</span><span class="token function">sudo</span> docker start mysql<span class="token function">sudo</span> docker start redis<span class="token comment" spellcheck="true"># 如果要进入已启动的容器</span><span class="token function">sudo</span> docker <span class="token function">exec</span> -it mysql /bin/bash</code></pre><p>然后接着去sqlyog直接我们的操作，在左侧root上右键建立数据库：字符集选utf8mb4，他能兼容utf8且能解决一些乱码的问题。分别建立了下面数据库</p><pre><code>gulimall-omsgulimall-pmsgulimall-smsgulimall-umsgulimall-wms</code></pre><p>然后打开对应的sql在对应的数据库中执行。依次执行。(注意sql文件里没有建库语句)</p><h3 id="VSCode准备"><a href="#VSCode准备" class="headerlink" title="VSCode准备"></a>VSCode准备</h3><p>点击执行sql脚本，依次选择评论区给的压缩包里的sql语句</p><h5 id="人人"><a href="#人人" class="headerlink" title="人人"></a>人人</h5><p>在码云上搜索人人开源，我们使用renren-fast，renren-fast-vue项目。</p><p><a href="https://gitee.com/renrenio">https://gitee.com/renrenio</a></p><pre><code>git clone https://gitee.com/renrenio/renren-fast.gitgit clone https://gitee.com/renrenio/renren-fast-vue.git</code></pre><p>下载到了桌面，我们把renren-fast移动到我们的项目文件夹（删掉.git文件），而renren-vue是用VSCode打开的（后面再弄）</p><p>在项目里的pom.xml添加一个</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-member<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-ware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>renren-fast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><p>然后打开renren-fast/db/mysql.sql，复制全部，在sqlyog中创建库gulimall-admin，粘贴刚才的内容执行。</p><p>然后修改项目里renren-fast中的application.yml，修改application-dev.yml中的数库库的url，通常把localhost修改为192.168.56.10即可。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>admin<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai<span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">password</span><span class="token punctuation">:</span> root</code></pre><p>然后执行java下的RenrenApplication</p><p>浏览器输入<a href="http://localhost:8080/renren-fast/">http://localhost:8080/renren-fast/</a> 得到{“msg”:”invalid token”,”code”:401}就代表无误</p><h5 id="人人vue"><a href="#人人vue" class="headerlink" title="人人vue"></a>人人vue</h5><p>用VSCode打开renren-fast-vue</p><p>安装node：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a>  选择windows下载。下载完安装。</p><p>NPM是随同NodeJS一起安装的包管理工具，如JavaScript-NPM，java-Maven。</p><p>命令行输入<code>node -v</code> 检查配置好了，配置npm的镜像仓库地址，再执</p><pre class=" language-bash"><code class="language-bash">node -v<span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/</code></pre><p>然后取VScode的终端中输入 npm install，会报错，然后进行如下操作：</p><p>浏览器输入localhost:8001 就可以看到内容了，登录admin admin</p><h3 id="IDEA项目准备"><a href="#IDEA项目准备" class="headerlink" title="IDEA项目准备"></a>IDEA项目准备</h3><h5 id="逆向工程搭建"><a href="#逆向工程搭建" class="headerlink" title="逆向工程搭建"></a>逆向工程搭建</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/renrenio/renren-generator.git</code></pre><p>下载到桌面后，同样把里面的.git文件删除，然后移动到我们IDEA项目目录中，同样配置好pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-member<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>gulimall-ware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>renren-fast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>renren-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><p>在maven中刷新一下，让项目名变粗体，稍等下面进度条完成。</p><p>修改application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>pms<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai<span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">password</span><span class="token punctuation">:</span> root</code></pre><p>然后修改generator.properties（这里乱码的百度IDEA设置properties编码）</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 主目录</span><span class="token attr-name">mainPath</span><span class="token punctuation">=</span><span class="token attr-value">com.atguigu</span><span class="token comment" spellcheck="true">#包名</span><span class="token attr-name">package</span><span class="token punctuation">=</span><span class="token attr-value">com.atguigu.gulimall</span><span class="token comment" spellcheck="true">#模块名</span><span class="token attr-name">moduleName</span><span class="token punctuation">=</span><span class="token attr-value">product</span><span class="token comment" spellcheck="true">#作者</span><span class="token attr-name">author</span><span class="token punctuation">=</span><span class="token attr-value">weifeng</span><span class="token comment" spellcheck="true">#email</span><span class="token attr-name">email</span><span class="token punctuation">=</span><span class="token attr-value">1783246945@qq.com</span><span class="token comment" spellcheck="true">#表前缀(类名不会包含表前缀) # 我们的pms数据库中的表的前缀都pms</span><span class="token comment" spellcheck="true"># 如果写了表前缀，每一张表对于的javaBean就不会添加前缀了</span><span class="token attr-name">tablePrefix</span><span class="token punctuation">=</span><span class="token attr-value">pms_</span></code></pre><p>运行RenrenApplication。如果启动不成功，修改application中是port为801。访问<a href="http://localhost:801/">http://localhost:801/</a></p><p>在网页上下方点击每页显示50个（pms库中的表），以让全部都显示，然后点击全部，点击生成代码。下载了压缩包</p><p>解压压缩包，把main放到gulimall-product的同级目录下。</p><p>然后在项目上右击（在项目上右击很重要）new modules— maven—然后在name上输入gulimall-common。</p><p>在pom.xml中也自动添加了<code>&lt;module&gt;gulimall-common&lt;/module&gt;</code></p><p>在common项目的pom.xml中添加</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatisPLUS--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--简化实体类，用@Data代替getset方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- httpcomponent包https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpcore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们把每个微服务里公共的类和依赖放到common里。</p><blockquote><p>tips: shift+F6修改项目名</p></blockquote><p>然后在product项目中的pom.xml中加入下面内容</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>复制</p><ul><li><p>renren-fast—-utils包下的Query和PageUtils、R、Constant复制到common项目的java/com.atguigu.common.utils下</p></li><li><p>把@RequiresPermissions这些注解掉，因为是shiro的</p></li><li><p>复制renren-fast中的xss包粘贴到common的com.atguigu.common目录下。</p></li><li><blockquote><p>还复制了exception文件夹，对应的位置关系自己观察一下就行</p></blockquote></li><li><p>注释掉product项目下类中的<code>//import org.apache.shiro.authz.annotation.RequiresPermissions;</code>，他是shiro的东西</p></li><li><p>注释renren-generator\src\main\resources\template/Controller中所有的@RequiresPermissions。<code>## import org.apache.shiro.authz.annotation.RequiresPermissions;</code></p></li></ul><p>总之什么报错就去fast里面找。重启逆向工程。重新在页面上得到压缩包。重新解压出来，不过只把里面的controller复制粘贴到product项目对应的目录就行。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>测试与整合商品服务里的mybatisplus</p><p><a href="https://mp.baomidou.com/guide/quick-start.html#%E9%85%8D%E7%BD%AE">https://mp.baomidou.com/guide/quick-start.html#配置</a></p><p>在common的pom.xml中导入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 数据库驱动 https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--tomcat里一般都带--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>删掉common里xss/xssfiler和XssHttpServletRequestWrapper</p><p>在product项目的resources目录下新建application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>pms    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver<span class="token comment" spellcheck="true"># MapperScan</span><span class="token comment" spellcheck="true"># sql映射文件位置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/**/*.xml  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto</code></pre><blockquote><p>classpath 和 classpath* 区别：<br>classpath：只会到你的class路径中查找找文件;<br>classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找</p><p><code>classpath*</code>的使用：当项目中有多个classpath路径，并同时加载多个classpath路径下（此种情况多数不会遇到）的文件，<code>*</code>就发挥了作用，如果不加<code>*</code>，则表示仅仅加载第一个classpath路径。</p></blockquote><p>然而执行后能通过，但是数据库中文显示乱码，所以我模仿逆向工程，把上面的配置url改为</p><pre class=" language-xml"><code class="language-xml">url: jdbc:mysql://192.168.56.10:3306/gulimall-pms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</code></pre><p>正常了。</p><p>然后在主启动类上加上注解@MapperScan()</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.gulimall.product.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">gulimallProductApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>gulimallProductApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后去测试，先通过下面方法给数据库添加内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">gulimallProductApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    BrandService brandService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BrandEntity brandEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brandEntity<span class="token punctuation">.</span><span class="token function">setDescript</span><span class="token punctuation">(</span><span class="token string">"哈哈1哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brandEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"华为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brandEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在数据库中就能看到新增数据了</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">gulimallProductApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    BrandService brandService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BrandEntity brandEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brandEntity<span class="token punctuation">.</span><span class="token function">setBrandId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        brandEntity<span class="token punctuation">.</span><span class="token function">setDescript</span><span class="token punctuation">(</span><span class="token string">"修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brandService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>brandEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="coupon"><a href="#coupon" class="headerlink" title="coupon"></a>coupon</h4><p>重新打开generator逆向工程，修改generator.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 主目录</span><span class="token attr-name">mainPath</span><span class="token punctuation">=</span><span class="token attr-value">com.atguigu</span><span class="token comment" spellcheck="true">#包名</span><span class="token attr-name">package</span><span class="token punctuation">=</span><span class="token attr-value">com.atguigu.gulimall</span><span class="token comment" spellcheck="true">#模块名</span><span class="token attr-name">moduleName</span><span class="token punctuation">=</span><span class="token attr-value">coupon</span><span class="token comment" spellcheck="true">#作者</span><span class="token attr-name">author</span><span class="token punctuation">=</span><span class="token attr-value">weifeng</span><span class="token comment" spellcheck="true">#email</span><span class="token attr-name">email</span><span class="token punctuation">=</span><span class="token attr-value">1783246945@qq.com</span><span class="token comment" spellcheck="true">#表前缀(类名不会包含表前缀) # 我们的pms数据库中的表的前缀都pms</span><span class="token comment" spellcheck="true"># 如果写了表前缀，每一张表对于的javaBean就不会添加前缀了</span><span class="token attr-name">tablePrefix</span><span class="token punctuation">=</span><span class="token attr-value">sms_</span></code></pre><p>修改yml数据库信息</p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    username: root    password: root    url: jdbc:mysql://192.168.56.10:3306/gulimall-sms?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai    driver-class-name: com.mysql.cj.jdbc.Drivermybatis-plus:  mapper-locations: classpath:/mapper/**/*.xml  global-config:    db-config:      id-type: auto      logic-delete-value: 1      logic-not-delete-value: 0server:  port: 7000</code></pre><p>端口号后面会设置，这里提前设置好了</p><p>启动生成RenrenApplication.java，运行后去浏览器80端口查看，同样让他一页全显示后选择全部后生成。生成后解压复制到coupon项目对应目录下。</p><p>让coupon也依赖于common，修改pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>resources下src包先删除</p><p>添加application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>sms<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/**/*.xml  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span></code></pre><p>运行gulimallCouponApplication.java</p><p><a href="http://localhost:8080/coupon/coupon/list">http://localhost:8080/coupon/coupon/list</a></p><pre><code>{"msg":"success","code":0,"page":{"totalCount":0,"pageSize":10,"totalPage":0,"currPage":1,"list":[]}}</code></pre><h4 id="member"><a href="#member" class="headerlink" title="member"></a>member</h4><p>重新使用代码生成器生成ums</p><p>模仿上面修改下面两个配置</p><p>代码生成器里：</p><pre><code>    url: jdbc:mysql://192.168.56.10:3306/gulimall-ums?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</code></pre><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 主目录</span><span class="token attr-name">mainPath</span><span class="token punctuation">=</span><span class="token attr-value">com.atguigu</span><span class="token comment" spellcheck="true">#包名</span><span class="token attr-name">package</span><span class="token punctuation">=</span><span class="token attr-value">com.atguigu.gulimall</span><span class="token comment" spellcheck="true">#模块名</span><span class="token attr-name">moduleName</span><span class="token punctuation">=</span><span class="token attr-value">member</span><span class="token comment" spellcheck="true">#作者</span><span class="token attr-name">author</span><span class="token punctuation">=</span><span class="token attr-value">weifeng</span><span class="token comment" spellcheck="true">#email</span><span class="token attr-name">email</span><span class="token punctuation">=</span><span class="token attr-value">1783246945@qq.com</span><span class="token comment" spellcheck="true">#表前缀(类名不会包含表前缀) # 我们的pms数据库中的表的前缀都pms</span><span class="token comment" spellcheck="true"># 如果写了表前缀，每一张表对于的javaBean就不会添加前缀了</span><span class="token attr-name">tablePrefix</span><span class="token punctuation">=</span><span class="token attr-value">ums_</span></code></pre><p>重启RenrenApplication.java，然后同样去浏览器获取压缩包解压到对应member项目目录</p><p>member也导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>同样新建application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>ums<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/**/*.xml  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8000</span></code></pre><p>order端口是9000，product是10000，ware是11000。</p><p>以后比如order系统要复制多份，他的端口计算9001、9002。。。</p><p>重启web后，<a href="http://localhost:8000/member/growthchangehistory/list">http://localhost:8000/member/growthchangehistory/list</a></p><pre><code>{"msg":"success","code":0,"page":{"totalCount":0,"pageSize":10,"totalPage":0,"currPage":1,"list":[]}}</code></pre><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>修改代码生成器</p><pre><code>    url: jdbc:mysql://192.168.56.10:3306/gulimall-oms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</code></pre><pre class=" language-yml"><code class="language-yml">#代码生成器，配置信息# 主目录mainPath=com.atguigu#包名package=com.atguigu.gulimall#模块名moduleName=order#作者author=weifeng#emailemail=1783246945@qq.com#表前缀(类名不会包含表前缀) # 我们的pms数据库中的表的前缀都pms# 如果写了表前缀，每一张表对于的javaBean就不会添加前缀了tablePrefix=oms_</code></pre><p>运行RenrenApplication.java重新生成后去下载解压放置。</p><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>oms<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/**/*.xml  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span></code></pre><p>POMxml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>启动gulimallOrderApplication.java</p><p><a href="http://localhost:9000/order/order/list">http://localhost:9000/order/order/list</a></p><pre><code>{"msg":"success","code":0,"page":{"totalCount":0,"pageSize":10,"totalPage":0,"currPage":1,"list":[]}}</code></pre><h4 id="ware"><a href="#ware" class="headerlink" title="ware"></a>ware</h4><p>修改代码生成器</p><pre><code>    url: jdbc:mysql://192.168.56.10:3306/gulimall-wms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#代码生成器，配置信息</span><span class="token comment" spellcheck="true"># 主目录</span>mainPath=com.atguigu<span class="token comment" spellcheck="true">#包名</span>package=com.atguigu.gulimall<span class="token comment" spellcheck="true">#模块名</span>moduleName=ware<span class="token comment" spellcheck="true">#作者</span>author=weifeng<span class="token comment" spellcheck="true">#email</span>email=1783246945@qq.com<span class="token comment" spellcheck="true">#表前缀(类名不会包含表前缀) # 我们的pms数据库中的表的前缀都pms</span><span class="token comment" spellcheck="true"># 如果写了表前缀，每一张表对于的javaBean就不会添加前缀了</span>tablePrefix=wms_</code></pre><p>运行RenrenApplication.java重新生成后去下载解压放置。</p><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>wms<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/**/*.xml  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">11000</span></code></pre><p>POMxml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>启动gulimallWareApplication.java</p><p><a href="http://localhost:11000/ware/wareinfo/list">http://localhost:11000/ware/wareinfo/list</a></p><pre><code>{"msg":"success","code":0,"page":{"totalCount":0,"pageSize":10,"totalPage":0,"currPage":1,"list":[]}}</code></pre><h3 id="SpringCloud-Alibaba简介"><a href="#SpringCloud-Alibaba简介" class="headerlink" title="SpringCloud Alibaba简介"></a>SpringCloud Alibaba简介</h3><p>阿里18年开发的微服务一站式解决方案。<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><ul><li>注册中心：</li><li>配置中心：</li><li>网关：</li></ul><p>netflix把feign闭源了，spring cloud开了个open feign</p><p>在common的pom.xml中加入</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><p>上面是依赖管理，相当于以后再dependencies里引spring cloud alibaba就不用写版本号， 全用dependencyManagement进行管理</p><h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>作为我们的注册中心和配置中心。</p><p>注册中心文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example">https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example</a></p><p>其他文档在该项目上层即可找到，下面读一读官网给的介绍就会用了。流程：下载–解压–/bin/startup.cmd—在某个项目里properties里写<code> spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</code>（yaml同理）。</p><blockquote><p><strong>如何接入：</strong></p><p>在启动示例进行演示之前，我们先了解一下 Spring Cloud 应用如何接入 Nacos Discovery。 <strong>注意 本章节只是为了便于您理解接入方式，本示例代码中已经完成接入工作，您无需再进行修改。</strong></p><ol><li><p>首先，修改 pom.xml 文件，引入 Nacos Discovery Starter。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>放到common里</p></li><li><p>在应用的 /src/main/resources/application.properties 配置文件中配置 Nacos Server 地址（或在yaml中按格式配置）</p><pre><code>spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</code></pre><p>我们要配置nacos服务器的地址，也就是注册中心地址，但是我们还没有nacos服务器，所以我们先在下面按照”启动nacos server”创建nacos服务器</p></li><li><p>使用 @EnableDiscoveryClient 注解开启服务注册与发现功能</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@RestController</span>     <span class="token keyword">class</span> <span class="token class-name">EchoController</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/echo/{string}"</span><span class="token punctuation">)</span>         <span class="token keyword">public</span> String <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> string<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><p><strong>启动 Nacos Server：</strong></p><ol><li>首先需要获取 Nacos Server，支持直接下载和源码构建两种方式。<ol><li>直接下载：<a href="https://github.com/alibaba/nacos/releases">Nacos Server 下载页</a>。解压zip，双击bin里的startup.cmd就启动了。</li><li>源码构建：进入 Nacos <a href="https://github.com/alibaba/nacos">Github 项目页面</a>，将代码 git clone 到本地自行编译打包，<a href="https://nacos.io/zh-cn/docs/quick-start.html">参考此文档</a>。<strong>推荐使用源码构建方式以获取最新版本</strong></li></ol></li><li>启动 Server，进入解压后文件夹或编译打包好的文件夹，找到如下相对文件夹 nacos/bin，并对照操作系统实际情况之下如下命令。<ol><li>Linux/Unix/Mac 操作系统，执行命令 <code>sh startup.sh -m standalone</code></li><li>Windows 操作系统，执行命令 <code>cmd startup.cmd</code></li></ol></li></ol><h3 id="应用启动"><a href="#应用启动" class="headerlink" title="应用启动"></a>应用启动</h3><ol><li><p>增加配置，在 nacos-discovery-provider-example 项目的 /src/main/resources/application.properties 中添加基本配置信息</p><pre><code> spring.application.name=service-provider server.port=18082</code></pre></li><li><p>启动应用，支持 IDE 直接启动和编译打包后启动。</p><ol><li>IDE直接启动：找到 nacos-discovery-provider-example 项目的主类 <code>ProviderApplication</code>，执行 main 方法启动应用。</li><li>打包编译后启动：在 nacos-discovery-provider-example 项目中执行 <code>mvn clean package</code> 将工程编译打包，然后执行 <code>java -jar nacos-discovery-provider-example.jar</code>启动应用。</li></ol></li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="查询服务"><a href="#查询服务" class="headerlink" title="查询服务"></a>查询服务</h4><p>在浏览器输入此地址 <code>http://127.0.0.1:8848/nacos/v1/ns/catalog/instances?serviceName=service-provider&amp;clusterName=DEFAULT&amp;pageSize=10&amp;pageNo=1&amp;namespaceId=</code>，并点击跳转，可以看到服务节点已经成功注册到 Nacos Server。</p></blockquote><p>在coupon的gulimallCouponApplication.java加上@EnableDiscoveryClient，导入包，然后重开项目。</p><p><a href="http://127.0.0.1:8848/nacos/">http://127.0.0.1:8848/nacos/</a> 账号面nacos</p><p>最后application.yml内容，配置了服务中心名和当前模块名字</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall<span class="token punctuation">-</span>sms<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>coupon<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/**/*.xml  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7000</span></code></pre><p>然后依次给member、配置上面的yaml，改下name就行。再给每个项目配置类上加上注解@EnableDiscoveryClient</p><p><strong>测试member和coupon的远程调用</strong></p><p>想要获取当前会员领取到的所有优惠券。先去注册中心找优惠券服务，注册中心调一台优惠券服务器给会员，会员服务器发送请求给这台优惠券服务器，然后对方响应。</p><h5 id="Feign与注册中心"><a href="#Feign与注册中心" class="headerlink" title="Feign与注册中心"></a>Feign与注册中心</h5><p>spring cloud feign</p><p>声明式远程调用</p><p>feign是一个声明式的HTTP客户端，他的目的就是让远程调用更加简单。给远程服务发的是HTTP请求。</p><p>会员服务想要远程调用优惠券服务，只需要给会员服务里引入openfeign依赖，他就有了远程调用其他服务的能力。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们之前在member的pom.xml已经引用过了（微服务）。</p><p>在coupon中修改如下的内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"coupon/coupon"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CouponService couponService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/member/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">membercoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//全系统的所有返回都返回R</span>        <span class="token comment" spellcheck="true">// 应该去数据库查用户对于的优惠券，但这个我们简化了，不去数据库查了，构造了一个优惠券给他返回</span>        CouponEntity couponEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CouponEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        couponEntity<span class="token punctuation">.</span><span class="token function">setCouponName</span><span class="token punctuation">(</span><span class="token string">"满100-10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优惠券的名字</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"coupons"</span><span class="token punctuation">,</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>couponEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样我们准备好了优惠券的调用内容</p><p>在member的配置类上加注解@EnableDiscoveryClient，告诉member是一个远程调用客户端，member要调用东西的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>member<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>EnableFeignClients<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 想要远程调用的步骤：* 1 引入openfeign* 2 编写一个接口，接口告诉springcloud这个接口需要调用远程服务*     2.1 在接口里声明@FeignClient("gulimall-coupon")他是一个远程调用客户端且要调用coupon服务*     2.2 要调用coupon服务的/coupon/coupon/member/list方法* 3 开启远程调用功能 @EnableFeignClients，要指定远程调用功能放的基础包* */</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.atguigu.gulimall.member.feign"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">gulimallMemberApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>gulimallMemberApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么要调用什么东西呢？就是我们刚才写的优惠券的功能，复制函数部分，在member的com.atguigu.gulimall.member.feign包下新建类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>member<span class="token punctuation">.</span>feign<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"gulimall-coupon"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//告诉spring cloud这个接口是一个远程客户端，要调用coupon服务，再去调用coupon服务/coupon/coupon/member/list对应的方法</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupon/coupon/member/list"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意写全优惠券类上还有映射//注意我们这个地方不熟控制层，所以这个请求映射请求的不是我们服务器上的东西，而是nacos注册中心的</span>    <span class="token keyword">public</span> R <span class="token function">membercoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到一个R对象</span><span class="token punctuation">}</span></code></pre><p>然后我们在member的控制层写一个测试请求</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"member/member"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MemberService memberService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    CouponFeignService couponFeignService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupons"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MemberEntity memberEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memberEntity<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">"会员昵称张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R membercoupons <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">membercoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//假设张三去数据库查了后返回了张三的优惠券信息</span>        <span class="token comment" spellcheck="true">//打印会员和优惠券信息</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"member"</span><span class="token punctuation">,</span>memberEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"coupons"</span><span class="token punctuation">,</span>membercoupons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"coupons"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>重新启动服务</p><p><a href="http://localhost:8000/member/member/coupons">http://localhost:8000/member/member/coupons</a></p><pre><code>{"msg":"success","code":0,"coupons":[{"id":null,"couponType":null,"couponImg":null,"couponName":"满100-10","num":null,"amount":null,"perLimit":null,"minPoint":null,"startTime":null,"endTime":null,"useType":null,"note":null,"publishCount":null,"useCount":null,"receiveCount":null,"enableStartTime":null,"enableEndTime":null,"code":null,"memberLevel":null,"publish":null}],"member":{"id":null,"levelId":null,"username":null,"password":null,"nickname":"会员昵称张三","mobile":null,"email":null,"header":null,"gender":null,"birth":null,"city":null,"job":null,"sign":null,"sourceType":null,"integration":null,"growth":null,"status":null,"createTime":null}}</code></pre><p>coupon里的R.ok()是什么</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//R继承了HashMap</span>    <span class="token comment" spellcheck="true">// ok是个静态方法，new了一个R对象，并且</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">ok</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用了super.put(key, value);，即hashmap的put</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>coupon里的控制层就是new了个couponEntity然后放到hashmap（R）里而已。</p><h5 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h5><p>我们还可以用nacos作为配置中心。配置中心的意思是不在application.properties等文件中配置了，而是放到nacos配置中心公用，这样无需每台机器都改。</p><p>官方教程：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md</a></p><p>引入配置中心依赖，放到common中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在coupons项目中创建/src/main/resources/bootstrap.properties ，这个文件是springboot里规定的，他优先级别application.properties高</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 改名字，对应nacos里的配置文件名</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">gulimall-coupon</span><span class="token attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:8848</span></code></pre><p>原来的方式：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"coupon/coupon"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CouponService couponService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.name}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从application.properties中获取//不要写user.name，他是环境里的变量</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>浏览器去nacos里的配置列表，点击＋号，data ID：<code>gulimall-coupon.properties</code>，配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># gulimall-coupon.properties</span><span class="token attr-name">coupon.user.name</span><span class="token punctuation">=</span><span class="token attr-value">"配置中心"      </span><span class="token attr-name">coupon.user.age</span><span class="token punctuation">=</span><span class="token attr-value">12</span></code></pre><p>然后点击发布。重启coupon，<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p><pre><code>{"msg":"success","code":0,"name":"配置中心","age":12}</code></pre><p>但是修改肿么办？实际生产中不能重启应用。在coupon的控制层上加@RefreshScope</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"coupon/coupon"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CouponService couponService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.name}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从application.properties中获取//不要写user.name，他是环境里的变量</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${coupon.user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>重启后，在nacos浏览器里修改配置，修改就可以观察到能动态修改了</p><p>nacos的配置内容优先于项目本地的配置内容。</p><p><strong>配置中心进阶</strong></p><p>在nacos浏览器中还可以配置：</p><ul><li><p>命名空间：用作配置隔离。（一般每个微服务一个命名空间）</p><ul><li><p>默认public。默认新增的配置都在public空间下</p></li><li><p>开发、测试、开发可以用命名空间分割。properties每个空间有一份。</p></li><li><p>在bootstrap.properties里配置（测试完去掉，学习不需要）</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 可以选择对应的命名空间 # 写上对应环境的命名空间ID</span><span class="token attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token attr-value">b176a68a-6800-4648-833b-be10be8bab00</span></code></pre></li><li><p>也可以为每个微服务配置一个命名空间，微服务互相隔离</p></li></ul></li></ul><ul><li><p>配置集：一组相关或不相关配置项的集合。</p></li><li><p>配置集ID：类似于配置文件名，即Data ID</p></li><li><p>配置分组：默认所有的配置集都属于DEFAULT_GROUP。双十一，618，双十二</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 更改配置分组</span><span class="token attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token attr-value">DEFAULT_GROUP</span></code></pre></li></ul><p>最终方案：每个微服务创建自己的命名空间，然后使用配置分组区分环境（dev/test/prod）</p><p><strong>加载多配置集</strong></p><p>我们要把原来application.yml里的内容都分文件抽离出去。我们在nacos里创建好后，在coupons里指定要导入的配置即可。</p><p>bootstrap.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">gulimall-coupon</span><span class="token attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:8848</span><span class="token comment" spellcheck="true"># 可以选择对应的命名空间 # 写上对应环境的命名空间ID</span><span class="token attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token attr-value">b176a68a-6800-4648-833b-be10be8bab00</span><span class="token comment" spellcheck="true"># 更改配置分组</span><span class="token attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment" spellcheck="true">#新版本不建议用下面的了</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[0].data-id=datasource.yml</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[0].group=dev</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[0].refresh=true</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[1].data-id=mybatis.yml</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[1].group=dev</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[1].refresh=true</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[2].data-id=other.yml</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[2].group=dev</span><span class="token comment" spellcheck="true">#spring.cloud.nacos.config.ext-config[2].refresh=true</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[0].data-id</span><span class="token punctuation">=</span><span class="token attr-value">datasource.yml</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[0].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[0].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[1].data-id</span><span class="token punctuation">=</span><span class="token attr-value">mybatis.yml</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[1].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[1].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[2].data-id</span><span class="token punctuation">=</span><span class="token attr-value">other.yml</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[2].group</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.cloud.nacos.config.extension-configs[2].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>输出内容有</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">2020-06-25</span> <span class="token attr-value">00:04:13.677  WARN 17936 --- [           main] c.a.c.n.c.NacosPropertySourceBuilder     : Ignore the empty nacos configuration and get it based on dataId[gulimall-coupon] &amp; group[dev]</span><span class="token attr-name">2020-06-25</span> <span class="token attr-value">00:04:13.681  INFO 17936 --- [           main] b.c.PropertySourceBootstrapConfiguration :</span><span class="token attr-name">Located</span> <span class="token attr-value">property source: [</span><span class="token attr-name">BootstrapPropertySource</span> <span class="token attr-value">{name='bootstrapProperties-gulimall-coupon.properties,dev'}, </span><span class="token attr-name">BootstrapPropertySource</span> <span class="token attr-value">{name='bootstrapProperties-gulimall-coupon,dev'}, </span><span class="token attr-name">BootstrapPropertySource</span> <span class="token attr-value">{name='bootstrapProperties-other.yml,dev'}, </span><span class="token attr-name">BootstrapPropertySource</span> <span class="token attr-value">{name='bootstrapProperties-mybatis.yml,dev'}, </span><span class="token attr-name">BootstrapPropertySource</span> <span class="token attr-value">{name='bootstrapProperties-datasource.yml,dev'}]</span></code></pre><h5 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h5><p>发送请求需要知道商品服务的地址，如果商品服务器有123服务器，1号掉线后，还得改，所以需要网关动态地管理，他能从注册中心中实时地感知某个服务上线还是下线。</p><p>请求也要加上询问权限，看用户有没有权限访问这个请求，也需要网关。</p><p>所以我们使用spring cloud的gateway组件做网关功能。</p><p>网关是请求浏览的入口，常用功能包括路由转发，权限校验，限流控制等。springcloud gateway取到了zuul网关。</p><p><a href="https://spring.io/projects/spring-cloud-gateway">https://spring.io/projects/spring-cloud-gateway</a></p><p>参考手册：<a href="https://cloud.spring.io/spring-cloud-gateway/2.2.x/reference/html/">https://cloud.spring.io/spring-cloud-gateway/2.2.x/reference/html/</a></p><p>三大核心概念：</p><ul><li><strong>Route</strong>: The basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates断言, and a collection of filters. A route is matched if the aggregate predicate is true.发一个请求给网关，网关要将请求路由到指定的服务。路由有id，目的地uri，断言的集合，匹配了断言就能到达指定位置，</li><li><strong>Predicate</strong>断言: This is a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Java 8 Function Predicate</a>. The input type is a <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html">Spring Framework <code>ServerWebExchange</code></a>. This lets you match on anything from the HTTP request, such as headers or parameters.就是java里的断言函数，匹配请求里的任何信息，包括请求头等</li><li><strong>Filter</strong>: These are instances of <a href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/GatewayFilter.html">Spring Framework <code>GatewayFilter</code></a> that have been constructed with a specific factory. Here, you can modify requests and responses before or after sending the downstream request.过滤器请求和响应都可以被修改。</li></ul><p>客户端发请求给服务端。中间有网关。先交给映射器，如果能处理就交给handler处理，然后交给一系列filer，然后给指定的服务，再返回回来给客户端。</p><p><img src="https://cloud.spring.io/spring-cloud-gateway/2.2.x/reference/html/images/spring_cloud_gateway_diagram.png"></p><p>有很多断言。</p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    gateway:      routes:      - id: after_route        uri: https://example.org        predicates:        - Cookie=mycookie,mycookievalue</code></pre><p>代表数组。只有断言成功了，才路由到指定的地址。</p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    gateway:      routes:      - id: after_route        uri: https://example.org        predicates:        - name: Cookie          args:            name: mycookie            regexp: mycookievalue</code></pre><p>创建，使用initilizer，Group：com.atguigu.gulimall，Artifact： gulimall-gateway，package：com.atguigu.gulimall.gateway。 搜索gateway选中。</p><p>pom.xml里加上common依赖， 修改jdk版本，</p><p> 开启注册服务发现@EnableDiscoveryClient<br> 配置nacos注册中心地址applicaion.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:8848</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">gulimall-gateway</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">88</span></code></pre><p>bootstrap.properties  填写配置中心地址</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">gulimall-gateway</span><span class="token attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:8848</span><span class="token attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token attr-value">bfa85f10-1a9a-460c-a7dc-efa961b45cc1</span></code></pre><p>nacos里创建命名空间gateway，然后在命名空间里创建文件guilmall-gateway.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">application</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>gateway</code></pre><p>在项目里创建application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> test_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.baidu.com          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Query=url<span class="token punctuation">,</span>baidu        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> qq_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.qq.com          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Query=url<span class="token punctuation">,</span>qq        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>product          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/product/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.*)<span class="token punctuation">,</span>/$\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> third_party_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/thirdparty/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> RewritePath=/api/thirdparty/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.*)<span class="token punctuation">,</span>/$\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> member_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>member          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/member/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.*)<span class="token punctuation">,</span>/$\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> ware_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>ware          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/ware/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.*)<span class="token punctuation">,</span>/$\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> admin_route          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//renren<span class="token punctuation">-</span>fast          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/**          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.*)<span class="token punctuation">,</span>/renren<span class="token punctuation">-</span>fast/$\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">## 前端项目，/api</span><span class="token comment" spellcheck="true">## http://localhost:88/api/captcha.jpg   http://localhost:8080/renren-fast/captcha.jpg</span><span class="token comment" spellcheck="true">## http://localhost:88/api/product/category/list/tree http://localhost:10000/product/category/list/tree</span></code></pre><p>测试  localhost:8080/hello?url=baidu</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前后端对比</p><p><img src="https://fermhan.oss-cn-qingdao.aliyuncs.com/img/20200625134721.png"></p><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>ECMAScript6.0（以下简称ES6，ECMAScript是一种由Ecma国际通过ECMA-262标准化的脚本），是JavaScript语言的下一代标准，2015年6月正式发布，从ES6开始的版本号采用年号，如ES2015，就是ES6。ES2016就是ES7。</p><p>ECMAScript是规范，JS的规范的具体实现。</p><p>打开VSCode—打开文件夹—新建es6文件夹—新建文件1、let.html—shift+!+Enter生成模板。填入下面内容后，右键open with live server</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token comment" spellcheck="true">//&amp;nbsp;var&amp;nbsp;声明的变量往往会越域</span>       <span class="token comment" spellcheck="true">//&amp;nbsp;let&amp;nbsp;声明的变量有严格局部作用域</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;a&amp;nbsp;=&amp;nbsp;1;</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;b&amp;nbsp;=&amp;nbsp;2;</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(a);&amp;nbsp;&amp;nbsp;//&amp;nbsp;1</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(b);&amp;nbsp;&amp;nbsp;//&amp;nbsp;ReferenceError:&amp;nbsp;b&amp;nbsp;is&amp;nbsp;not&amp;nbsp;defined</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;var&amp;nbsp;可以声明多次</span>    <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;let&amp;nbsp;只能声明一次</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;m&amp;nbsp;=&amp;nbsp;1</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;m&amp;nbsp;=&amp;nbsp;2</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;n&amp;nbsp;=&amp;nbsp;3</span><span class="token comment" spellcheck="true">// // &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;n&amp;nbsp;=&amp;nbsp;4</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(m)&amp;nbsp;&amp;nbsp;//&amp;nbsp;2</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(n)&amp;nbsp;&amp;nbsp;//&amp;nbsp;Identifier&amp;nbsp;'n'&amp;nbsp;has&amp;nbsp;already&amp;nbsp;been&amp;nbsp;declared</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//&amp;nbsp;var&amp;nbsp;会变量提升</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;let&amp;nbsp;不存在变量提升</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(x);&amp;nbsp;&amp;nbsp;//&amp;nbsp;undefined</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var&amp;nbsp;x&amp;nbsp;=&amp;nbsp;10;</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(y);&amp;nbsp;&amp;nbsp;&amp;nbsp;//ReferenceError:&amp;nbsp;y&amp;nbsp;is&amp;nbsp;not&amp;nbsp;defined</span><span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;y&amp;nbsp;=&amp;nbsp;20;</span>        <span class="token comment" spellcheck="true">// let</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;1.&amp;nbsp;const声明之后不允许改变</span>        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;2.&amp;nbsp;一但声明必须初始化，否则会报错</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">const</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Uncaught&amp;nbsp;TypeError:&amp;nbsp;Assignment&amp;nbsp;to&amp;nbsp;constant&amp;nbsp;variable.</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>var在{}之外也起作用</li><li>let在{}不起作用</li><li>var多次声明同一变量不会报错，let多次声明会报错，只能声明一次。</li><li>var 会变量提升（打印和定义可以顺序反）。let 不存在变量提升（顺序不能反）</li><li>let的const声明之后不允许改变</li></ul><p>2、解构表达式.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//数组解构</span>        <span class="token comment" spellcheck="true">// let arr&amp;nbsp;=&amp;nbsp;[1,2,3];</span>        <span class="token comment" spellcheck="true">// // let a = arr[0];</span>        <span class="token comment" spellcheck="true">// // let b = arr[1];</span>        <span class="token comment" spellcheck="true">// // let c = arr[2];</span>        <span class="token comment" spellcheck="true">// let [a,b,c] = arr;</span>        <span class="token comment" spellcheck="true">// console.log(a,b,c)</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            language<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//         const&amp;nbsp;name&amp;nbsp;=&amp;nbsp;person.name;</span>        <span class="token comment" spellcheck="true">//         const&amp;nbsp;age&amp;nbsp;=&amp;nbsp;person.age;</span>        <span class="token comment" spellcheck="true">// &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const&amp;nbsp;language&amp;nbsp;=&amp;nbsp;person.language;</span>        <span class="token comment" spellcheck="true">//对象解构</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> abc<span class="token punctuation">,</span> age<span class="token punctuation">,</span> language <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">,</span> age<span class="token punctuation">,</span> language<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//4、字符串扩展</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello.vue"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">//字符串模板</span>        <span class="token keyword">let</span> ss <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span>hello&amp;nbsp;world&lt;span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div>`</span></span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;&amp;nbsp;//&amp;nbsp;2、字符串插入变量和表达式。变量名写在&amp;nbsp;${}&amp;nbsp;中，${}&amp;nbsp;中可以放入&amp;nbsp;JavaScript&amp;nbsp;表达式。</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"这是一个函数"</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token string">`我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>abc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">10</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">了, 我想说： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>支持<code>let arr = [1,2,3];     let [a,b,c] = arr;</code>这种语法</li><li>支持对象解析：<code>const { name: abc, age, language } = person;</code>    冒号代表改名</li><li>字符串函数</li><li>支持一个字符串为多行</li><li>占位符功能 ${}</li></ul><p>3、函数优化.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span>        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//&amp;nbsp;判断b是否为空，为空就给默认值1</span>            b <span class="token operator">=</span> b <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;传一个参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span>        <span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2）、不定参数</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>        <span class="token comment" spellcheck="true">//3）、箭头函数</span>        <span class="token comment" spellcheck="true">//以前声明一个方法</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;var&amp;nbsp;print&amp;nbsp;=&amp;nbsp;function&amp;nbsp;(obj)&amp;nbsp;{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;console.log(obj);</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;}</span>        <span class="token keyword">var</span> print <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> sum3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            language<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">hello</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,"</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//箭头函数+解构</span>        <span class="token keyword">var</span> hello2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,"</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">hello2</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>原来想要函数默认值得这么写<code>b = b || 1;</code>  现在可以直接写了<code>function add2(a, b = 1) {</code></li><li>函数不定参数<code>function fun(...values) {</code></li><li>支持箭头函数（lambda表达式），还支持使用{}结构传入对象的成员</li></ul><p>4、对象优化.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>            language<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["name",&amp;nbsp;"age",&amp;nbsp;"language"]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["jack",&amp;nbsp;21,&amp;nbsp;Array(3)]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Array(2),&amp;nbsp;Array(2),&amp;nbsp;Array(2)]</span>        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{a:1,b:2,c:3}</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["name",&amp;nbsp;"age",&amp;nbsp;"language"]</span>        <span class="token comment" spellcheck="true">//2）、声明对象简写</span>        <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">23</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"张三"</span>        <span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> age<span class="token punctuation">,</span> name<span class="token punctuation">:</span> name <span class="token punctuation">}</span>        <span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> name <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明对象简写</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3）、对象的函数属性简写</span>        <span class="token keyword">let</span> person3 <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//&amp;nbsp;以前：</span>            eat<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//箭头函数this不能使用，对象.属性</span>            eat2<span class="token punctuation">:</span> food <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person3<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">eat3</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        person3<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person3<span class="token punctuation">.</span><span class="token function">eat2</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span>        person3<span class="token punctuation">.</span><span class="token function">eat3</span><span class="token punctuation">(</span><span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4）、对象拓展运算符</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;1、拷贝对象（深拷贝）</span>        <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Amy"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">15</span> <span class="token punctuation">}</span>        <span class="token keyword">let</span> someone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>p1 <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someone<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{name:&amp;nbsp;"Amy",&amp;nbsp;age:&amp;nbsp;15}</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;2、合并对象</span>        <span class="token keyword">let</span> age1 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">15</span> <span class="token punctuation">}</span>        <span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Amy"</span> <span class="token punctuation">}</span>        <span class="token keyword">let</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>p2<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">}</span>        p2<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">...</span>age1<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">...</span>name1<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>可以获取map的键值对等<code>Object.keys()</code>、values、entries</li><li>Object.assgn(target,source1,source2)   合并</li><li>const person2 = { age, name }//声明对象简写</li><li>…代表取出该对象所有属性拷贝到当前对象。let someone = { …p1 }</li></ul><p>5、map和reduce.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//数组中新增了map和reduce方法。</span>        <span class="token comment" spellcheck="true">//map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</span>        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">let</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>arr<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">'20'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">'-5'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  arr = arr.map((item)=>{</span>        <span class="token comment" spellcheck="true">//     return item*2</span>        <span class="token comment" spellcheck="true">//  });</span>         arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，</span>        <span class="token comment" spellcheck="true">//[2, 40, -10, 6]</span>        <span class="token comment" spellcheck="true">//arr.reduce(callback,[initialValue])</span>        <span class="token comment" spellcheck="true">/**         1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））    2、currentValue （数组中当前被处理的元素）    3、index （当前元素在数组中的索引）    4、array （调用 reduce 的数组）*/</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"上一次处理后："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"当前正在处理："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>map处理，arr = arr.map(item=&gt; item*2);</li><li>reduce。arr.reduce((原来的值,处理后的值即return的值)=&gt;{</li></ul><p>6、promise.html</p><p>优化异步操作</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//1、查出当前用户信息</span>        <span class="token comment" spellcheck="true">//2、按照当前用户的id查出他的课程</span>        <span class="token comment" spellcheck="true">//3、按照当前课程id查出分数</span>        <span class="token comment" spellcheck="true">// $.ajax({</span>        <span class="token comment" spellcheck="true">//     url: "mock/user.json",</span>        <span class="token comment" spellcheck="true">//     success(data) {</span>        <span class="token comment" spellcheck="true">//         console.log("查询用户：", data);</span>        <span class="token comment" spellcheck="true">//         $.ajax({</span>        <span class="token comment" spellcheck="true">//             url: `mock/user_corse_${data.id}.json`,</span>        <span class="token comment" spellcheck="true">//             success(data) {</span>        <span class="token comment" spellcheck="true">//                 console.log("查询到课程：", data);</span>        <span class="token comment" spellcheck="true">//                 $.ajax({</span>        <span class="token comment" spellcheck="true">//                     url: `mock/corse_score_${data.id}.json`,</span>        <span class="token comment" spellcheck="true">//                     success(data) {</span>        <span class="token comment" spellcheck="true">//                         console.log("查询到分数：", data);</span>        <span class="token comment" spellcheck="true">//                     },</span>        <span class="token comment" spellcheck="true">//                     error(error) {</span>        <span class="token comment" spellcheck="true">//                         console.log("出现异常了：" + error);</span>        <span class="token comment" spellcheck="true">//                     }</span>        <span class="token comment" spellcheck="true">//                 });</span>        <span class="token comment" spellcheck="true">//             },</span>        <span class="token comment" spellcheck="true">//             error(error) {</span>        <span class="token comment" spellcheck="true">//                 console.log("出现异常了：" + error);</span>        <span class="token comment" spellcheck="true">//             }</span>        <span class="token comment" spellcheck="true">//         });</span>        <span class="token comment" spellcheck="true">//     },</span>        <span class="token comment" spellcheck="true">//     error(error) {</span>        <span class="token comment" spellcheck="true">//         console.log("出现异常了：" + error);</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">// });</span>        <span class="token comment" spellcheck="true">//1、Promise可以封装异步操作</span>        <span class="token comment" spellcheck="true">// let p = new Promise((resolve, reject) => { //传入成功解析，失败拒绝</span>        <span class="token comment" spellcheck="true">//     //1、异步操作</span>        <span class="token comment" spellcheck="true">//     $.ajax({</span>        <span class="token comment" spellcheck="true">//         url: "mock/user.json",</span>        <span class="token comment" spellcheck="true">//         success: function (data) {</span>        <span class="token comment" spellcheck="true">//             console.log("查询用户成功:", data)</span>        <span class="token comment" spellcheck="true">//             resolve(data);</span>        <span class="token comment" spellcheck="true">//         },</span>        <span class="token comment" spellcheck="true">//         error: function (err) {</span>        <span class="token comment" spellcheck="true">//             reject(err);</span>        <span class="token comment" spellcheck="true">//         }</span>        <span class="token comment" spellcheck="true">//     });</span>        <span class="token comment" spellcheck="true">// });</span>        <span class="token comment" spellcheck="true">// p.then((obj) => { //成功以后做什么</span>        <span class="token comment" spellcheck="true">//     return new Promise((resolve, reject) => {</span>        <span class="token comment" spellcheck="true">//         $.ajax({</span>        <span class="token comment" spellcheck="true">//             url: `mock/user_corse_${obj.id}.json`,</span>        <span class="token comment" spellcheck="true">//             success: function (data) {</span>        <span class="token comment" spellcheck="true">//                 console.log("查询用户课程成功:", data)</span>        <span class="token comment" spellcheck="true">//                 resolve(data);</span>        <span class="token comment" spellcheck="true">//             },</span>        <span class="token comment" spellcheck="true">//             error: function (err) {</span>        <span class="token comment" spellcheck="true">//                 reject(err)</span>        <span class="token comment" spellcheck="true">//             }</span>        <span class="token comment" spellcheck="true">//         });</span>        <span class="token comment" spellcheck="true">//     })</span>        <span class="token comment" spellcheck="true">// }).then((data) => { //成功以后干什么</span>        <span class="token comment" spellcheck="true">//     console.log("上一步的结果", data)</span>        <span class="token comment" spellcheck="true">//     $.ajax({</span>        <span class="token comment" spellcheck="true">//         url: `mock/corse_score_${data.id}.json`,</span>        <span class="token comment" spellcheck="true">//         success: function (data) {</span>        <span class="token comment" spellcheck="true">//             console.log("查询课程得分成功:", data)</span>        <span class="token comment" spellcheck="true">//         },</span>        <span class="token comment" spellcheck="true">//         error: function (err) {</span>        <span class="token comment" spellcheck="true">//         }</span>        <span class="token comment" spellcheck="true">//     });</span>        <span class="token comment" spellcheck="true">// })</span>        <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//自己定义一个方法整合一下</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>                    data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>                    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"mock/user.json"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用户查询成功~~~:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`mock/user_corse_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"课程查询成功~~~:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`mock/corse_score_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"课程成绩查询成功~~~:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//失败的话catch</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出现异常"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>corse_score_10.json 得分</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token property">"score"</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">}</span></code></pre><p>user.json 用户</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">}</span></code></pre><p>user_corse_1.json 课程</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"chinese"</span><span class="token punctuation">}</span></code></pre><p>以前嵌套ajax的时候很繁琐。</p><ul><li>把Ajax封装到Promise中，赋值给let p</li><li>在Ajax中成功使用resolve(data)，失败使用reject(err)</li><li>p.then().catch()</li></ul><p><strong>模块化</strong></p><p>模块化就是把代码进行拆分，方便重复利用。类似于java中的导包，而JS换了个概念，是导模块。</p><p>模块功能主要有两个命令构成 export 和import</p><ul><li>export用于规定模块的对外接口</li><li>import用于导入其他模块提供的功能</li></ul><p>user.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>name<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"jack"</span><span class="token keyword">var</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">23</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>add<span class="token punctuation">}</span></code></pre><p>hello.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// export const util = {</span><span class="token comment" spellcheck="true">//     sum(a, b) {</span><span class="token comment" spellcheck="true">//         return a + b;</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// export {util}</span><span class="token comment" spellcheck="true">//`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。</span></code></pre><p>main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> abc <span class="token keyword">from</span> <span class="token string">"./hello.js"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>add<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./user.js"</span>abc<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>因为这是前端的内容，代码多比较占用页面，所以另写到CSDN上。</p><p><a href="https://blog.csdn.net/hancoder/article/details/107007605">https://blog.csdn.net/hancoder/article/details/107007605</a></p><p>MVVM思想</p><ul><li>M：module 包括数据和一些基本操作</li><li>V：view 视图，页面渲染结果</li><li>VM：View-module，模型与视图间的双向操作（无需开发人员干涉）</li></ul><p>视图和数据通过VM绑定起来，模型里有变化会自动地通过Directives填写到视图中，视图表单中添加了内容也会自动地通过DOM Listeners保存到模型中。</p><p>教程：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></p><p>安装：</p><ul><li>直接下载并用 <code>&lt;script&gt;</code> 标签引入</li><li>或者在VScode控制台使用npm install vue导入。<ul><li>先np init -y初始化项目，生成了一个package.json文件，说明他是一个npm管理的项目</li><li>npm install vue，安装后在项目node_modules里既有vue</li></ul></li></ul><p>测试</p><p>index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cancle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> {{name}} ,非常帅，有{{num}}个人为他点赞{{hello()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 导入依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//1、vue声明式渲染</span>        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//生成vue对象</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//绑定元素 div id="app"</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//封装数据</span>                name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 也可以使用{} //表单中可以取出</span>                num<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//封装方法</span>                <span class="token function">cancle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">--</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"1"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、双向绑定,模型变化，视图变化。反之亦然。</span>        <span class="token comment" spellcheck="true">//3、事件处理</span>        <span class="token comment" spellcheck="true">//v-xx：指令</span>        <span class="token comment" spellcheck="true">//1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的</span>        <span class="token comment" spellcheck="true">//2、指令来简化对dom的一些操作。</span>        <span class="token comment" spellcheck="true">//3、声明方法来做更复杂的操作。methods里面可以封装方法。</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在VSCode中安装vue 2 snippets插件，在谷歌浏览器中安装</p><p>1、v-text、v-html.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{msg}}  {{1+1}}  {{hello()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                msg<span class="token punctuation">:</span><span class="token string">"&lt;h1>Hello&lt;/h1>"</span><span class="token punctuation">,</span>                link<span class="token punctuation">:</span><span class="token string">"http://www.baidu.com"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"World"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>插值表达式</p><p>花括号：只能写在标签体力（&lt;&gt;这里&lt;/&gt;）</p><p>插值闪烁</p><p>2、v-bind.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 给html标签的属性绑定 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>gogogo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- class,style  {class名：加上？}--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{active:isActive,<span class="token punctuation">'</span>text-danger<span class="token punctuation">'</span>:hasError}<span class="token punctuation">"</span></span>          <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> color<span class="token number">1</span>,<span class="token property">fontSize</span><span class="token punctuation">:</span> size<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                link<span class="token punctuation">:</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span>                isActive<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                hasError<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                color1<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">,</span>                size<span class="token punctuation">:</span><span class="token string">'36px'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>3、v-model.html</p><p>双向绑定</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 表单项，自定义组件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        精通的语言：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Python<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        选中了 {{language.join(",")}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                language<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>4、v-on.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>        <span class="token comment" spellcheck="true">&lt;!--事件中直接写js片段--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--事件指定一个回调函数，必须是Vue实例中定义的函数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cancle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>有{{num}}个赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 事件修饰符 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            大div            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                小div <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 按键修饰符： --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.up</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num+<span class="token punctuation">=</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.down</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num-<span class="token punctuation">=</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">=</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        提示：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>                num<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">cancle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击了"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>5、v-for.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(user,index) in users<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.name<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.gender <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>女<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 1、显示user信息：v-for="item in items" --></span>               当前索引：{{index}} ==> {{user.name}}  ==>   {{user.gender}} ==>{{user.age}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 2、获取数组下标：v-for="(item,index) in items" --></span>                <span class="token comment" spellcheck="true">&lt;!-- 3、遍历对象：                        v-for="value in object"                        v-for="(value,key) in object"                        v-for="(value,key,index) in object"                 --></span>                对象信息：                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(v,k,i) in user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{k}}=={{v}}=={{i}}；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 4、遍历的时候都加上:key来区分不同数据，提高vue渲染效率 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(num,index) in nums<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'柳岩'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'范冰冰'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'刘亦菲'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'古力娜扎'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                nums<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>6、v-if和v-show.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         v-if，顾名思义，条件判断。当得到结果为true时，所在的元素才会被渲染。        v-show，当得到结果为true时，所在的元素才会被显示。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show <span class="token punctuation">=</span> !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 1、使用v-if显示 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>if=看到我....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 2、使用v-show显示 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>show=看到我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                show<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>7、v-else和v-else-if.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>random<span class="token punctuation">=</span>Math.random()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{random}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>random<span class="token punctuation">></span><span class="token punctuation">=</span>0.75<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            看到我啦？！<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&gt;">&amp;gt;</span>=<span class="token entity" title="&nbsp;">&amp;nbsp;</span>0.75        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>random<span class="token punctuation">></span><span class="token punctuation">=</span>0.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            看到我啦？！<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&gt;">&amp;gt;</span>=<span class="token entity" title="&nbsp;">&amp;nbsp;</span>0.5        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>random<span class="token punctuation">></span><span class="token punctuation">=</span>0.2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            看到我啦？！<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&gt;">&amp;gt;</span>=<span class="token entity" title="&nbsp;">&amp;nbsp;</span>0.2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>            看到我啦？！<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&lt;">&amp;lt;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>0.2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span> random<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="2、计算属性和侦听器"><a href="#2、计算属性和侦听器" class="headerlink" title="2、计算属性和侦听器"></a>2、计算属性和侦听器</h5><p>1、计算属性和侦听器.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 某些结果是基于之前数据实时计算出来的，我们可以利用计算属性。来完成 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>西游记； 价格：{{xyjPrice}}，数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyjNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>水浒传； 价格：{{shzPrice}}，数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shzNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>总价：{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            {{msg}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//watch可以让我们监控一个值的变化。从而做出相应的反应。</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                xyjPrice<span class="token punctuation">:</span> <span class="token number">99.98</span><span class="token punctuation">,</span>                shzPrice<span class="token punctuation">:</span> <span class="token number">98.00</span><span class="token punctuation">,</span>                xyjNum<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                shzNum<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                msg<span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjPrice<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shzPrice<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>shzNum                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">xyjNum</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>newVal<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"库存超出限制"</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">=</span> <span class="token number">3</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>2、过滤器.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 过滤器常用来处理文本格式化的操作。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user in userList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                {{user.id}} ==> {{user.name}} ==> {{user.gender == 1?"男":"女"}} ==>                {{user.gender | genderFilter}} ==> {{user.gender | gFilter}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"gFilter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"男~~~"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"女~~~"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                userList<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'jacky'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'peter'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">////&amp;nbsp;filters&amp;nbsp;定义局部过滤器，只可以在当前vue实例中使用</span>                <span class="token function">genderFilter</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token string">"男"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token string">"女"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="3、组件化"><a href="#3、组件化" class="headerlink" title="3、组件化"></a>3、组件化</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我被点击了 {{count}} 次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//1、全局声明注册一个组件</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;button v-on:click="count++">我被点击了 {{count}} 次&lt;/button>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、局部声明一个组件</span>        <span class="token keyword">const</span> buttonCounter <span class="token operator">=</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;button v-on:click="count++">我被点击了 {{count}} 次~~~&lt;/button>`</span></span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                count<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'button-counter'</span><span class="token punctuation">:</span> buttonCounter            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="4、生命周期钩子函数"><a href="#4、生命周期钩子函数" class="headerlink" title="4、生命周期钩子函数"></a>4、生命周期钩子函数</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>赞！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{name}}，有{{num}}个人点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>                num<span class="token punctuation">:</span> <span class="token number">100</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========beforeCreate============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据模型未加载："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方法未加载："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板未加载："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========created============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据模型已加载："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方法已加载："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板已加载："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板未渲染："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========beforeMount============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板未渲染："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========mounted============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板已渲染："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========beforeUpdate============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据模型已更新："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板未更新："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=========updated============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据模型已更新："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html模板已更新："</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1.8 Foreach</title>
      <link href="posts/1467.html"/>
      <url>posts/1467.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://www.baeldung.com/foreach-java">https://www.baeldung.com/foreach-java</a></p></blockquote><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>在Java 8中引入的<em>forEach</em>循环为程序员提供了一种新的，简洁而有趣的迭代集合的方式。</p><p>在本文中，我们将看到如何将<em>forEach</em>与集合<em>一起</em>使用，它采用何种参数以及此循环与增强的<em>for</em>循环的不同之处。</p><h2 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2 基础知识"></a>2 基础知识</h2><pre class=" language-Java"><code class="language-Java">public interface Collection<E> extends Iterable<E></code></pre><p>Collection 接口实现了 Iterable 接口，而 Iterable 接口在 Java 8开始具有一个新的 API：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对 Iterable的每个元素执行给定的操作，直到所有元素都被处理或动作引发异常。</span></code></pre><p>使用<em>forEach</em>，我们可以迭代一个集合并对每个元素执行给定的操作，就像任何其他<em>迭代器一样。</em></p><p>例如，迭代和打印字符串集合<em>的</em>for循环版本：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们可以使用<em>forEach</em>写这个 ：</p><pre class=" language-java"><code class="language-java">names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-使用forEach方法"><a href="#3-使用forEach方法" class="headerlink" title="3.使用forEach方法"></a>3.使用forEach方法</h2><h3 id="3-1-匿名类"><a href="#3-1-匿名类" class="headerlink" title="3.1 匿名类"></a>3.1 匿名类</h3><p>我们使用  <em>forEach</em>迭代集合并对每个元素执行特定操作。<strong>要执行的操作包含在实现Consumer接口的类中，并作为参数传递给forEach 。</strong></p><p>所述<em>消费者</em>接口是一个功能接口(具有单个抽象方法的接口）。它接受输入并且不返回任何结果。</p><p>Consumer 接口定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>任何实现，例如，只是打印字符串的消费者：</p><pre class=" language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> printConsumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>可以作为参数传递给<em>forEach</em>：</p><pre class=" language-java"><code class="language-java">names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但这不是通过消费者和使用<em>forEach</em> API 创建操作的唯一方法。让我们看看我们将使用<em>forEach</em>方法的另外2种最流行的方式：</p><h3 id="3-2-Lambda表达式"><a href="#3-2-Lambda表达式" class="headerlink" title="3.2 Lambda表达式"></a>3.2 Lambda表达式</h3><p>Java 8功能接口的主要优点是我们可以使用Lambda表达式来实例化它们，并避免使用庞大的匿名类实现。</p><p>由于 Consumer 接口属于函数式接口，我们可以通过以下形式在Lambda中表达它：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> body <span class="token punctuation">}</span>name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-3-方法参考"><a href="#3-3-方法参考" class="headerlink" title="3.3 方法参考"></a>3.3 方法参考</h3><p>我们可以使用方法引用语法而不是普通的Lambda语法，其中已存在一个方法来对类执行操作：</p><pre class=" language-java"><code class="language-java">names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-forEach在集合中的使用"><a href="#4-forEach在集合中的使用" class="headerlink" title="4.forEach在集合中的使用"></a>4.forEach在集合中的使用</h2><h3 id="4-1-迭代集合"><a href="#4-1-迭代集合" class="headerlink" title="4.1.迭代集合"></a>4.1.迭代集合</h3><p><strong>任何类型Collection的可迭代  - 列表，集合，队列 等都具有使用forEach的相同语法。</strong></p><p>因此，正如我们已经看到的，迭代列表的元素：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Larry"</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样对于一组：</p><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> uniqueNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Larry"</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uniqueNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者让我们说一个<em>队列</em>也是一个<em>集合</em>：</p><pre class=" language-java"><code class="language-java">Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> namesQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Larry"</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namesQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-迭代Map-使用Map的forEach"><a href="#4-2-迭代Map-使用Map的forEach" class="headerlink" title="4.2.迭代Map - 使用Map的forEach"></a>4.2.迭代Map - 使用Map的forEach</h3><p>Map没有实现Iterable接口，但它<strong>提供了自己的forEach 变体，它接受BiConsumer</strong>。* </p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> namesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Larry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"James"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namesMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-3-迭代一个Map-通过迭代entrySet"><a href="#4-3-迭代一个Map-通过迭代entrySet" class="headerlink" title="4.3.迭代一个Map - 通过迭代entrySet"></a>4.3.迭代一个Map - 通过迭代entrySet</h3><pre class=" language-java"><code class="language-java">namesMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1.8 Tutorial</title>
      <link href="posts/64452.html"/>
      <url>posts/64452.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-8-Tutorial"><a href="#Java-8-Tutorial" class="headerlink" title="Java 8 Tutorial"></a>Java 8 Tutorial</h1><h3 id="接口的默认方法-Default-Methods-for-Interfaces"><a href="#接口的默认方法-Default-Methods-for-Interfaces" class="headerlink" title="接口的默认方法(Default Methods for Interfaces)"></a>接口的默认方法(Default Methods for Interfaces)</h3><p>Java 8使我们能够通过使用 <code>default</code> 关键字向接口添加非抽象方法实现。 此功能也称为<a href="http://stackoverflow.com/a/24102730">虚拟扩展方法</a>。</p><p>第一个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Formula</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Formula 接口中除了抽象方法计算接口公式还定义了默认方法 <code>sqrt</code>。 实现该接口的类只需要实现抽象方法 <code>calculate</code>。 默认方法<code>sqrt</code> 可以直接使用。当然你也可以直接通过接口创建对象，然后实现接口中的默认方法就可以了，我们通过代码演示一下这种方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过匿名内部类方式访问接口</span>    Formula formula <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Formula</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 100.0</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formula<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 4.0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> formula 是作为匿名对象实现的。该代码非常容易理解，6行代码实现了计算 <code>sqrt(a * 100)</code>。在下一节中，我们将会看到在 Java 8 中实现单个方法对象有一种更好更方便的方法。</p><p><strong>译者注：</strong> 不管是抽象类还是接口，都可以通过匿名内部类的方式访问。不能通过抽象类或者接口直接创建对象。对于上面通过匿名内部类方式访问接口，我们可以这样理解：一个内部类实现了接口里的抽象方法并且返回一个内部类对象，之后我们让接口的引用来指向这个对象。</p><h3 id="Lambda表达式-Lambda-expressions"><a href="#Lambda表达式-Lambda-expressions" class="headerlink" title="Lambda表达式(Lambda expressions)"></a>Lambda表达式(Lambda expressions)</h3><p>首先看看在老版本的Java中是如何排列字符串的：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"anna"</span><span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token string">"xenia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>只需要给静态方法<code> Collections.sort</code> 传入一个 List 对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给 <code>sort</code> 方法。</p><p>在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：</p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看出，代码变得更段且更具有可读性，但是实际上还可以写得更短：</p><pre class=" language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：</p><pre class=" language-java"><code class="language-java">names<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>List 类本身就有一个 <code>sort</code> 方法。并且Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。接下来我们看看lambda表达式还有什么其他用法。</p><h3 id="函数式接口-Functional-Interfaces"><a href="#函数式接口-Functional-Interfaces" class="headerlink" title="函数式接口(Functional Interfaces)"></a>函数式接口(Functional Interfaces)</h3><p><strong>译者注：</strong> 原文对这部分解释不太清楚，故做了修改！</p><p>Java 语言设计者们投入了大量精力来思考如何使现有的函数友好地支持Lambda。最终采取的方法是：增加函数式接口的概念。<strong>“函数式接口”是指仅仅只包含一个抽象方法,但是可以有多个非抽象方法(也就是上面提到的默认方法)的接口。</strong> 像这样的接口，可以被隐式转换为lambda表达式。<code>java.lang.Runnable</code> 与 <code>java.util.concurrent.Callable</code> 是函数式接口最典型的两个例子。Java 8增加了一种特殊的注解<code>@FunctionalInterface</code>,但是这个注解通常不是必须的(某些情况建议使用)，只要接口只包含一个抽象方法，虚拟机会自动判断该接口为函数式接口。一般建议在接口上使用<code>@FunctionalInterface</code> 注解进行声明，这样的话，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的，如下图所示</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/@FunctionalInterface.png" alt="@FunctionalInterface 注解"></p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>F<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>  T <span class="token function">convert</span><span class="token punctuation">(</span>F from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// TODO 将数字字符串转换为整数类型</span>    Converter<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> converter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//class java.lang.Integer</span></code></pre><p><strong>译者注：</strong> 大部分函数式接口都不用我们自己写，Java8都给我们实现好了，这些接口都在java.util.function包里。</p><h3 id="方法和构造函数引用-Method-and-Constructor-References"><a href="#方法和构造函数引用-Method-and-Constructor-References" class="headerlink" title="方法和构造函数引用(Method and Constructor References)"></a>方法和构造函数引用(Method and Constructor References)</h3><p>前一节中的代码还可以通过静态方法引用来表示：</p><pre class=" language-java"><code class="language-java">    Converter<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> converter <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">;</span>    Integer converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//class java.lang.Integer</span></code></pre><p>Java 8允许您通过<code>::</code>关键字传递方法或构造函数的引用。 上面的示例显示了如何引用静态方法。 但我们也可以引用对象方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Something</span> <span class="token punctuation">{</span>    String <span class="token function">startsWith</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Something something <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> converter <span class="token operator">=</span> something<span class="token operator">:</span><span class="token operator">:</span>startsWith<span class="token punctuation">;</span>String converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "J"</span></code></pre><p>接下来看看构造函数是如何使用<code>::</code>关键字来引用的，首先我们定义一个包含多个构造函数的简单类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String firstName<span class="token punctuation">;</span>    String lastName<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来我们指定一个用来创建Person对象的对象工厂接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonFactory</span><span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">></span> <span class="token punctuation">{</span>    P <span class="token function">create</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里我们使用构造函数引用来将他们关联起来，而不是手动实现一个完整的工厂：</p><pre class=" language-java"><code class="language-java">PersonFactory<span class="token operator">&lt;</span>Person<span class="token operator">></span> personFactory <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>Person person <span class="token operator">=</span> personFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Parker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们只需要使用 <code>Person::new</code> 来获取Person类构造函数的引用，Java编译器会自动根据<code>PersonFactory.create</code>方法的参数类型来选择合适的构造函数。</p><h3 id="Lamda-表达式作用域-Lambda-Scopes"><a href="#Lamda-表达式作用域-Lambda-Scopes" class="headerlink" title="Lamda 表达式作用域(Lambda Scopes)"></a>Lamda 表达式作用域(Lambda Scopes)</h3><h4 id="访问局部变量"><a href="#访问局部变量" class="headerlink" title="访问局部变量"></a>访问局部变量</h4><p>我们可以直接在 lambda 表达式中访问外部的局部变量：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3</span></code></pre><p>但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 3</span></code></pre><p>不过这里的 num 必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在lambda表达式中试图修改num同样是不允许的。</span></code></pre><h4 id="访问字段和静态变量"><a href="#访问字段和静态变量" class="headerlink" title="访问字段和静态变量"></a>访问字段和静态变量</h4><p>与局部变量相比，我们对lambda表达式中的实例字段和静态变量都有读写访问权限。 该行为和匿名对象是一致的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Lambda4</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> outerStaticNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> outerNum<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter1 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            outerNum <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Converter<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> stringConverter2 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            outerStaticNum <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="访问默认接口方法"><a href="#访问默认接口方法" class="headerlink" title="访问默认接口方法"></a>访问默认接口方法</h4><p>还记得第一节中的 formula 示例吗？ <code>Formula</code> 接口定义了一个默认方法<code>sqrt</code>，可以从包含匿名对象的每个 formula 实例访问该方法。 这不适用于lambda表达式。</p><p>无法从 lambda 表达式中访问默认方法,故以下代码无法编译：</p><pre class=" language-java"><code class="language-java">Formula formula <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="内置函数式接口-Built-in-Functional-Interfaces"><a href="#内置函数式接口-Built-in-Functional-Interfaces" class="headerlink" title="内置函数式接口(Built-in Functional Interfaces)"></a>内置函数式接口(Built-in Functional Interfaces)</h3><p>JDK 1.8 API包含许多内置函数式接口。 其中一些借口在老版本的 Java 中是比较常见的比如： <code>Comparator</code> 或<code>Runnable</code>，这些接口都增加了<code>@FunctionalInterface</code>注解以便能用在 lambda 表达式上。</p><p>但是 Java 8 API 同样还提供了很多全新的函数式接口来让你的编程工作更加方便，有一些接口是来自 <a href="https://code.google.com/p/guava-libraries/">Google Guava</a> 库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。</p><h4 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h4><p>Predicate 接口是只有一个参数的返回布尔类型值的 <strong>断言型</strong> 接口。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）：</p><p><strong>译者注：</strong> Predicate 接口源码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该方法是接受一个传入类型,返回一个布尔值.此方法应用于判断.</span>    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//and方法与关系型运算符"&amp;&amp;"相似，两边都成立才返回true</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">and</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 与关系运算符"!"相似，对判断进行取反</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//or方法与关系型运算符"||"相似，两边只要有一个成立就返回true</span>    <span class="token keyword">default</span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">or</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">||</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 该方法接收一个Object对象,返回一个Predicate类型.此方法用于判断第一个test的方法与第二个test方法相同(equal).</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Predicate<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">isEqual</span><span class="token punctuation">(</span>Object targetRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> targetRef<span class="token punctuation">)</span>                <span class="token operator">?</span> Objects<span class="token operator">:</span><span class="token operator">:</span>isNull                <span class="token operator">:</span> object <span class="token operator">-</span><span class="token operator">></span> targetRef<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java">Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// true</span>predicate<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>Predicate<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> nonNull <span class="token operator">=</span> Objects<span class="token operator">:</span><span class="token operator">:</span>nonNull<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> isNull <span class="token operator">=</span> Objects<span class="token operator">:</span><span class="token operator">:</span>isNull<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isEmpty <span class="token operator">=</span> String<span class="token operator">:</span><span class="token operator">:</span>isEmpty<span class="token punctuation">;</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isNotEmpty <span class="token operator">=</span> isEmpty<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h4><p>Function 接口接受一个参数并生成结果。默认方法可用于将多个函数链接在一起（compose, andThen）：</p><p><strong>译者注：</strong> Function  接口源码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将Function对象应用到输入的参数上，然后返回计算结果。</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将两个Function整合，并返回一个能够执行两个Function对象功能的Function对象。</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>V<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">compose</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>V v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// </span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> after<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> toInteger <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">;</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> backToString <span class="token operator">=</span> toInteger<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">;</span>backToString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "123"</span></code></pre><h4 id="Suppliers"><a href="#Suppliers" class="headerlink" title="Suppliers"></a>Suppliers</h4><p>Supplier 接口产生给定泛型类型的结果。 与 Function 接口不同，Supplier 接口不接受参数。</p><pre class=" language-java"><code class="language-java">Supplier<span class="token operator">&lt;</span>Person<span class="token operator">></span> personSupplier <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>personSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// new Person</span></code></pre><h4 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h4><p>Consumer 接口表示要对单个输入参数执行的操作。</p><pre class=" language-java"><code class="language-java">Consumer<span class="token operator">&lt;</span>Person<span class="token operator">></span> greeter <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>greeter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">,</span> <span class="token string">"Skywalker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h4><p>Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法：</p><pre class=" language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span>Person<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p1<span class="token punctuation">.</span>firstName<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Wonderland"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// > 0</span>comparator<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt; 0</span></code></pre><h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><p>Optionals不是函数式接口，而是用于防止 NullPointerException 的漂亮工具。这是下一节的一个重要概念，让我们快速了解一下Optionals的工作原理。</p><p>Optional 是一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是有时却什么也没有返回，而在Java 8中，你应该返回 Optional 而不是 null。</p><p>译者注：示例中每个方法的作用已经添加。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//of（）：为非null的值创建一个Optional</span>Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// isPresent（）： 如果值存在返回true，否则返回false</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">//get()：如果Optional有值则将其返回，否则抛出NoSuchElementException</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// "bam"</span><span class="token comment" spellcheck="true">//orElse（）：如果有值则将其返回，否则返回指定的其它值</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "bam"</span><span class="token comment" spellcheck="true">//ifPresent（）：如果Optional实例有值则为其调用consumer，否则不做处理</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "b"</span></code></pre><p>推荐阅读：<a href="https://blog.kaaass.net/archives/764">[Java8]如何正确使用Optional</a></p><h2 id="Streams-流"><a href="#Streams-流" class="headerlink" title="Streams(流)"></a>Streams(流)</h2><p><code>java.util.Stream</code> 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。Stream 的创建需要指定一个数据源，比如<code> java.util.Collection</code> 的子类，List 或者 Set， Map 不支持。Stream 的操作可以串行执行或者并行执行。</p><p>首先看看Stream是怎么用，首先创建实例代码的用到的数据List：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。下面几节将详细解释常用的Stream操作：</p><h3 id="Filter-过滤"><a href="#Filter-过滤" class="headerlink" title="Filter(过滤)"></a>Filter(过滤)</h3><p>过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于<strong>中间操作</strong>，所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作。</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 测试 Filter(过滤)</span>        stringList                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//aaa2 aaa1</span></code></pre><p>forEach 是为 Lambda 而设计的，保持了最紧凑的风格。而且 Lambda 表达式本身是可以重用的，非常方便。</p><h3 id="Sorted-排序"><a href="#Sorted-排序" class="headerlink" title="Sorted(排序)"></a>Sorted(排序)</h3><p>排序是一个 <strong>中间操作</strong>，返回的是排序好后的 Stream。<strong>如果你不指定一个自定义的 Comparator 则会使用默认排序。</strong></p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 测试 Sort (排序)</span>        stringList                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aaa1 aaa2</span></code></pre><p>需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringCollection是不会被修改的：</p><pre class=" language-java"><code class="language-java">    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1</span></code></pre><h3 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map(映射)"></a>Map(映射)</h3><p>中间操作 map 会将元素根据指定的 Function 接口来依次将元素转成另外的对象。</p><p>下面的示例展示了将字符串转换为大写字符串。你也可以通过map来将对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 测试 Map 操作</span>        stringList                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"</span></code></pre><h3 id="Match-匹配"><a href="#Match-匹配" class="headerlink" title="Match(匹配)"></a>Match(匹配)</h3><p>Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是 <strong>最终操作</strong> ，并返回一个 boolean 类型的值。</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 测试 Match (匹配)操作</span>        <span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span>                stringList                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span>        <span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span>                stringList                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span>        <span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span>                stringList                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="Count-计数"><a href="#Count-计数" class="headerlink" title="Count(计数)"></a>Count(计数)</h3><p>计数是一个 <strong>最终操作</strong>，返回Stream中元素的个数，<strong>返回值类型是 long</strong>。</p><pre class=" language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//测试 Count (计数)操作</span>        <span class="token keyword">long</span> startsWithB <span class="token operator">=</span>                stringList                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>startsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3</span></code></pre><h3 id="Reduce-规约"><a href="#Reduce-规约" class="headerlink" title="Reduce(规约)"></a>Reduce(规约)</h3><p>这是一个 <strong>最终操作</strong> ，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规约后的结果是通过Optional 接口表示的：</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//测试 Reduce (规约)操作</span>        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> reduced <span class="token operator">=</span>                stringList                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1 <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        reduced<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2</span></code></pre><p><strong>译者注：</strong> 这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce。例如 Stream 的 sum 就相当于<code>Integer sum = integers.reduce(0, (a, b) -&gt; a+b);</code>也有没有起始值的情况，这时会把 Stream 的前面两个元素组合起来，返回的是 Optional。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 字符串连接，concat = "ABCD"</span>String concat <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> String<span class="token operator">:</span><span class="token operator">:</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求最小值，minValue = -3.0</span><span class="token keyword">double</span> minValue <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> Double<span class="token operator">:</span><span class="token operator">:</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求和，sumValue = 10, 有起始值</span><span class="token keyword">int</span> sumValue <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 求和，sumValue = 10, 无起始值</span>sumValue <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 过滤，字符串连接，concat = "ace"</span>concat <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"Z"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> String<span class="token operator">:</span><span class="token operator">:</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码例如第一个示例的 reduce()，第一个参数（空白字符）即为起始值，第二个参数（String::concat）为 BinaryOperator。这类有起始值的 reduce() 都返回具体的对象。而对于第四个示例没有起始值的 reduce()，由于可能没有足够的元素，返回的是 Optional，请留意这个区别。更多内容查看： <a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html">IBM：Java 8 中的 Streams API 详解</a> </p><h2 id="Parallel-Streams-并行流"><a href="#Parallel-Streams-并行流" class="headerlink" title="Parallel Streams(并行流)"></a>Parallel Streams(并行流)</h2><p>前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。</p><p>下面的例子展示了是如何通过并行Stream来提升性能：</p><p>首先我们创建一个没有重复元素的大表：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们分别用串行和并行两种方式对其进行排序，最后看看所用时间的对比。</p><h3 id="Sequential-Sort-串行排序"><a href="#Sequential-Sort-串行排序" class="headerlink" title="Sequential Sort(串行排序)"></a>Sequential Sort(串行排序)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//串行排序</span><span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"sequential sort took: %d ms"</span><span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>1000000sequential sort took: 709 ms//串行排序所用的时间</code></pre><h3 id="Parallel-Sort-并行排序"><a href="#Parallel-Sort-并行排序" class="headerlink" title="Parallel Sort(并行排序)"></a>Parallel Sort(并行排序)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//并行排序</span><span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"parallel sort took: %d ms"</span><span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">1000000</span>parallel sort took<span class="token operator">:</span> <span class="token number">475</span> ms<span class="token comment" spellcheck="true">//串行排序所用的时间</span></code></pre><p>上面两个代码几乎是一样的，但是并行版的快了 50% 左右，唯一需要做的改动就是将 <code>stream()</code> 改为<code>parallelStream()</code>。</p><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>前面提到过，Map 类型不支持 streams，不过Map提供了一些新的有用的方法来处理一些日常任务。Map接口本身没有可用的 <code>stream（）</code>方法，但是你可以在键，值上创建专门的流或者通过 <code>map.keySet().stream()</code>,<code>map.values().stream()</code>和<code>map.entrySet().stream()</code>。</p><p>此外,Maps 支持各种新的和有用的方法来执行常见任务。</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"val"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//val0 val1 val2 val3 val4 val5 val6 val7 val8 val9</span></code></pre><p><code>putIfAbsent</code> 阻止我们在null检查时写入额外的代码;<code>forEach</code>接受一个 consumer 来对 map 中的每个元素操作。</p><p>此示例显示如何使用函数在 map 上计算代码：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> val <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val33</span>map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> num <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"val"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> num <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val33</span></code></pre><p>接下来展示如何在Map里删除一个键值全都匹配的项：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val33</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// null</span></code></pre><p>另外一个有用的方法：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// not found</span></code></pre><p>对Map的元素做合并也变得很容易了：</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"val9"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val9</span>map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"concat"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// val9concat</span></code></pre><p>Merge 做的事情是如果键名不存在则插入，否则则对原键对应的值做合并操作并重新插入到map中。</p><h2 id="Date-API-日期相关API"><a href="#Date-API-日期相关API" class="headerlink" title="Date API(日期相关API)"></a>Date API(日期相关API)</h2><p>Java 8在 <code>java.time</code> 包下包含一个全新的日期和时间API。新的Date API与Joda-Time库相似，但它们不一样。以下示例涵盖了此新 API 的最重要部分。译者对这部分内容参考相关书籍做了大部分修改。</p><p><strong>译者注(总结)：</strong></p><ul><li><p>Clock 类提供了访问当前日期和时间的方法，Clock 是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。某一个特定的时间点也可以使用 <code>Instant</code> 类来表示，<code>Instant</code> 类也可以用来创建旧版本的<code>java.util.Date</code> 对象。</p></li><li><p>在新API中时区使用 ZoneId 来表示。时区可以很方便的使用静态方法of来获取到。 抽象类<code>ZoneId</code>（在<code>java.time</code>包中）表示一个区域标识符。 它有一个名为<code>getAvailableZoneIds</code>的静态方法，它返回所有区域标识符。</p></li><li><p>jdk1.8中新增了 LocalDate 与 LocalDateTime等类来解决日期处理方法，同时引入了一个新的类DateTimeFormatter 来解决日期格式化问题。可以使用Instant代替 Date，LocalDateTime代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat。</p></li></ul><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>Clock 类提供了访问当前日期和时间的方法，Clock 是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。某一个特定的时间点也可以使用 <code>Instant</code> 类来表示，<code>Instant</code> 类也可以用来创建旧版本的<code>java.util.Date</code> 对象。</p><pre class=" language-java"><code class="language-java">Clock clock <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> millis <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1552379579043</span>Instant instant <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>Date legacyDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2019-03-12T08:46:42.588Z</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>legacyDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Mar 12 16:32:59 CST 2019</span></code></pre><h3 id="Timezones-时区"><a href="#Timezones-时区" class="headerlink" title="Timezones(时区)"></a>Timezones(时区)</h3><p>在新API中时区使用 ZoneId 来表示。时区可以很方便的使用静态方法of来获取到。 抽象类<code>ZoneId</code>（在<code>java.time</code>包中）表示一个区域标识符。 它有一个名为<code>getAvailableZoneIds</code>的静态方法，它返回所有区域标识符。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//输出所有区域标识符</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZoneId zone1 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZoneId zone2 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Brazil/East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone1<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ZoneRules[currentStandardOffset=+01:00]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zone2<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ZoneRules[currentStandardOffset=-03:00]</span></code></pre><h3 id="LocalTime-本地时间"><a href="#LocalTime-本地时间" class="headerlink" title="LocalTime(本地时间)"></a>LocalTime(本地时间)</h3><p>LocalTime 定义了一个没有时区信息的时间，例如 晚上10点或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：</p><pre class=" language-java"><code class="language-java">LocalTime now1 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone1<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime now2 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zone2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token keyword">long</span> hoursBetween <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> minutesBetween <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hoursBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// -3</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minutesBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// -239</span></code></pre><p>LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串.</p><pre class=" language-java"><code class="language-java">LocalTime late <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>late<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 23:59:59</span>DateTimeFormatter germanFormatter <span class="token operator">=</span>    DateTimeFormatter        <span class="token punctuation">.</span><span class="token function">ofLocalizedTime</span><span class="token punctuation">(</span>FormatStyle<span class="token punctuation">.</span>SHORT<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>GERMAN<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime leetTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"13:37"</span><span class="token punctuation">,</span> germanFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>leetTime<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 13:37</span></code></pre><h3 id="LocalDate-本地日期"><a href="#LocalDate-本地日期" class="headerlink" title="LocalDate(本地日期)"></a>LocalDate(本地日期)</h3><p>LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。</p><pre class=" language-java"><code class="language-java">LocalDate today <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取现在的日期</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天的日期: "</span><span class="token operator">+</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-03-12</span>LocalDate tomorrow <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明天的日期: "</span><span class="token operator">+</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-03-13</span>LocalDate yesterday <span class="token operator">=</span> tomorrow<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"昨天的日期: "</span><span class="token operator">+</span>yesterday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-03-11</span>LocalDate independenceDay <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>MARCH<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DayOfWeek dayOfWeek <span class="token operator">=</span> independenceDay<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是周几:"</span><span class="token operator">+</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TUESDAY</span></code></pre><p>从字符串解析一个 LocalDate 类型和解析 LocalTime 一样简单,下面是使用  <code>DateTimeFormatter</code> 解析字符串的例子：</p><pre class=" language-java"><code class="language-java">    String str1 <span class="token operator">=</span> <span class="token string">"2014==04==12 01时06分09秒"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据需要解析的日期、时间字符串定义解析所用的格式器</span>        DateTimeFormatter fomatter1 <span class="token operator">=</span> DateTimeFormatter                <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy==MM==dd HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime dt1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> fomatter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dt1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 2014-04-12T01:06:09</span>        String str2 <span class="token operator">=</span> <span class="token string">"2014$$$四月$$$13 20小时"</span><span class="token punctuation">;</span>        DateTimeFormatter fomatter2 <span class="token operator">=</span> DateTimeFormatter                <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyy$$$MMM$$$dd HH小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime dt2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> fomatter2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dt2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 2014-04-13T20:00</span></code></pre><p>再来看一个使用 <code>DateTimeFormatter</code> 格式化日期的示例</p><pre class=" language-java"><code class="language-java">LocalDateTime rightNow<span class="token operator">=</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String date<span class="token operator">=</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>rightNow<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-03-12T16:26:48.29</span>DateTimeFormatter formatter<span class="token operator">=</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>rightNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-03-12 16:26:48</span></code></pre><h3 id="LocalDateTime-本地日期时间"><a href="#LocalDateTime-本地日期时间" class="headerlink" title="LocalDateTime(本地日期时间)"></a>LocalDateTime(本地日期时间)</h3><p>LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime 和 LocalTime还有 LocalDate 一样，都是不可变的。LocalDateTime 提供了一些能访问具体字段的方法。</p><pre class=" language-java"><code class="language-java">LocalDateTime sylvester <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>DECEMBER<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DayOfWeek dayOfWeek <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// WEDNESDAY</span>Month month <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// DECEMBER</span><span class="token keyword">long</span> minuteOfDay <span class="token operator">=</span> sylvester<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>MINUTE_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minuteOfDay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1439</span></code></pre><p>只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的<code>java.util.Date</code>。</p><pre class=" language-java"><code class="language-java">Instant instant <span class="token operator">=</span> sylvester        <span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date legacyDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>legacyDate<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Wed Dec 31 23:59:59 CET 2014</span></code></pre><p>格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：</p><pre class=" language-java"><code class="language-java">DateTimeFormatter formatter <span class="token operator">=</span>    DateTimeFormatter        <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"MMM dd, yyyy - HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime parsed <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"Nov 03, 2014 - 07:13"</span><span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>String string <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Nov 03, 2014 - 07:13</span></code></pre><p>和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。<br>关于时间日期格式的详细信息在<a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html">这里</a>。</p><h2 id="Annotations-注解"><a href="#Annotations-注解" class="headerlink" title="Annotations(注解)"></a>Annotations(注解)</h2><p>在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。<br>首先定义一个包装类Hints注解用来放置一组具体的Hint注解：</p><pre class=" language-java"><code class="language-java">@<span class="token keyword">interface</span> <span class="token class-name">Hints</span> <span class="token punctuation">{</span>    Hint<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Hints<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Hint</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下<code>@Repeatable</code>即可。</p><p>例 1: 使用包装类当容器来存多个注解（老方法）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Hints</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>例 2：使用多重注解（新方法）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Hint</span><span class="token punctuation">(</span><span class="token string">"hint2"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息：</p><pre class=" language-java"><code class="language-java">Hint hint <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Hint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// null</span>Hints hints1 <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Hints<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hints1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>Hint<span class="token punctuation">[</span><span class="token punctuation">]</span> hints2 <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span>Hint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hints2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2</span></code></pre><p>即便我们没有在 <code>Person</code>类上定义 <code>@Hints</code>注解，我们还是可以通过 <code>getAnnotation(Hints.class) </code>来获取 <code>@Hints</code>注解，更加方便的方法是使用 <code>getAnnotationsByType</code> 可以直接获取到所有的<code>@Hint</code>注解。<br>另外Java 8的注解还增加到两种新的target上了：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE_PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要写博客?</title>
      <link href="posts/21454.html"/>
      <url>posts/21454.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>1972年前,D.M.Ritchie 用C语言写出了世界上第一个C语言程序”Hello World”!</p><p>2020年的今天,我也来”Hello World”一下</p></blockquote><p><strong>Write the Code ， Change the world ！</strong></p><h2 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h2><p>这里引用一下刘伟鹏大佬的一篇文章: <a href="https://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">为什么你应该(从现在开始就)写博客</a></p><ul><li>能交到很多志同道合的朋友</li><li>书写为了更好的思考</li><li>“教”是最好的”学”</li><li>讨论是绝佳的反思</li><li>激励你去持续学习和思考</li><li>学会持之以恒的做一件事</li><li>一个长期的价值博客是一份很好的简历</li></ul><p>个人而言觉得博客可以积累自己的成长,也是对自己的一种见证(weistuday.com这个要至少存在十年)</p><blockquote><p>没有完美的人,但是可以做到不断向完美去接近</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防_工具(五)</title>
      <link href="posts/45005.html"/>
      <url>posts/45005.html</url>
      
        <content type="html"><![CDATA[<h2 id="dnsmap的使用"><a href="#dnsmap的使用" class="headerlink" title="dnsmap的使用"></a>dnsmap的使用</h2><p><strong>DNS域名暴力穷举工具</strong></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><pre class=" language-sh"><code class="language-sh">-w  后加字典文件-r  指定结果用常规格式输出文件-c  指定结果用csv去输出-d  设置延迟-i  设置忽略ip(当你遇到一个虚假ip时很有用)</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112210857825.png" alt="image-20201112210857825"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class=" language-sh"><code class="language-sh">dnsmap example.comdnsmap wxample.com -w yourwordlist.txt -r /tmp/domainbf_results.txtdnsmap example.com -r /tmp/ -d 300dnsmap example.com -r ./domainbf_results.txt</code></pre><p>以baidu.com 为例 不加参数 用的是默认</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112211254705.png" alt="image-20201112211254705"></p><p>将扫描的结果输出</p><pre class=" language-sh"><code class="language-sh">dnsmap baidu.com -r /home/weifeng/res.txt</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112211818557.png" alt="image-20201112211818557"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112211949316.png" alt="image-20201112211949316"></p><h2 id="DMitry域名查询工具"><a href="#DMitry域名查询工具" class="headerlink" title="DMitry域名查询工具"></a>DMitry域名查询工具</h2><blockquote><p>Dmitry工具是用来查询IP或域名WHOIS信息的,WHIOS是用来的查询域名是否已经被注册,以及被注册域名的详情的数据库(或域名所有人和域名注册商).使用该工具可以查询到域名的注册商和过期时间等</p></blockquote><p><strong>常用参数:</strong></p><pre class=" language-sh"><code class="language-sh">-o 将输出保存到%host.txt 或由-o文件指定的文件-i 对主机的IP地址执行whois查找-w 对主机的域名执行whois查找-n 在主机上检索Netcraft.com信息-s 执行搜索可能的子域-e 执行搜索可能的电子邮件地址-p 在主机上执行TCP端口的扫描-f 在显示输出报告过滤端口的主机上执行TCP端口扫描-b 读取从扫描端口接收的banner-t 0-9扫描TCP端口时设置TTL(默认为2)Requires the -p 需要-p标记才能传递</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112214924040.png" alt="image-20201112214924040"></p><h2 id="网站防火墙探测工具-Wafw00f"><a href="#网站防火墙探测工具-Wafw00f" class="headerlink" title="网站防火墙探测工具 Wafw00f"></a>网站防火墙探测工具 Wafw00f</h2><blockquote><p> 现在网站为了自身安全,通常都会安装各类防火墙,这些防火墙往往会拦截各种扫描请求,使得测试人员无法正确判断网站得相关信息,  Kali Linux 提供了一款网站防火墙探测工具Wafw00f,它可以通过发送正常和带恶意代码的HTTP请求,以探测网站是否存在防火墙,并识别防火墙的类型.</p></blockquote><h3 id="WAFW00F是怎么样工作的"><a href="#WAFW00F是怎么样工作的" class="headerlink" title="WAFW00F是怎么样工作的?"></a><strong>WAFW00F是怎么样工作的?</strong></h3><p>为了实现这一目的,WAFW00F会执行如下操作:</p><ol><li>发送正常的HTTP请求,然后分析响应,这可以识别出很多WAF</li><li>发送不成功,它会发送一些(可能是恶意)HTTP请求,使用简单的逻辑推断是哪一个WAF</li><li>如果这也不成功,它会分析之前返回的响应,使用其它简单的算法猜测是否,有某个WAF或者安全解决方案响应了我们的攻击</li></ol><p><strong>它能检测什么?</strong></p><p>它可以检测很多WAF.想要查看它能检测那些WAF,以 -I 参数执行WAFW00F</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112220142961.png" alt="image-20201112220142961"></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><pre class=" language-sh"><code class="language-sh">wafw00f -a baidu.com</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112221037671.png" alt="image-20201112221037671"></p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><p><strong>Nmap是什么?</strong></p><blockquote><p>诸神之眼,Nmap是主机扫描工具,图形化界面是Zenmap,分布式框架为Dnamp</p></blockquote><ul><li>主机探测</li><li>端口扫描</li><li>版本检测</li><li>系统检测</li><li>支持探测脚本的编写</li></ul><p><strong>Nmap在实际中应用场合</strong></p><ul><li>通过对设备或者防火墙的探测来审计它的安全性</li><li>探测目标主机所开放的端口</li><li>通过识别新的服务器审计网络的安全性</li><li>探测网络上的主机</li></ul><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112222349989.png" alt="image-20201112222349989"></p><h3 id="Nmap的基本操作"><a href="#Nmap的基本操作" class="headerlink" title="Nmap的基本操作"></a>Nmap的基本操作</h3><ol><li><p>对单个主机的扫描</p><pre class=" language-sh"><code class="language-sh">nmap <IP></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112222546137.png" alt="image-20201112222546137"></p></li><li><p>对多个不连续的主机进行扫描</p><pre class=" language-sh"><code class="language-sh">nmap 58.57.47.100 47.93.121.57 47.93.121.58#不同的ip之间用空格分开</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112223217499.png" alt="image-20201112223217499"></p></li><li><p>对多个连续的主机进行扫描</p><pre class=" language-sh"><code class="language-sh">nmap 192.168.153.10-160</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112224549189.png" alt="image-20201112224549189"></p></li><li><p>对整个子网进行扫描</p><pre class=" language-sh"><code class="language-sh">nmap 192.168.153.1-255nmap 192.168.153.0/24</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112224733438.png" alt="image-20201112224733438"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201112224857309.png" alt="image-20201112224857309"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防_工具(四)</title>
      <link href="posts/43417.html"/>
      <url>posts/43417.html</url>
      
        <content type="html"><![CDATA[<h2 id="Arping"><a href="#Arping" class="headerlink" title="Arping"></a>Arping</h2><blockquote><p>ARP协议是”Address Resolution Protocol”(地址解析协议)的缩写,在同一个以太网中,通过地址解析协议,源主机可以通过目标主机的IP地址获取目的主机的MAC地址.</p></blockquote><p><strong>arping,用来向局域网内的其他主机发送ARP请求的指令,它可以用来测试局域网的某个IP是否已经被使用.也可以用这种方式测目标主机是否在线,只要有MAC地址说明这个主机就是在线的,反之就是不在线</strong></p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p><strong>靶机 : WIndows7  IP : 192.168.153.150</strong></p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="查看某个IP的MAC地址"><a href="#查看某个IP的MAC地址" class="headerlink" title="查看某个IP的MAC地址"></a>查看某个IP的MAC地址</h4><pre class=" language-sh"><code class="language-sh">sudo arping 192.168.153.150</code></pre><p> kali扫描的MAC地址</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111211616122.png" alt="arping"></p><p>查看靶机的MAC地址 和扫描的一致</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111211908844.png" alt="靶机"></p><h4 id="发送指定次数"><a href="#发送指定次数" class="headerlink" title="发送指定次数"></a>发送指定次数</h4><pre class=" language-sh"><code class="language-sh">sudo arping -c 10 192.168.153.150</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111212235824.png" alt="image-20201111212235824"></p><h4 id="扫描设定时间-单位秒"><a href="#扫描设定时间-单位秒" class="headerlink" title="扫描设定时间 单位秒"></a>扫描设定时间 单位秒</h4><pre class=" language-sh"><code class="language-sh">sudo arping -w 20 192.168.153.150</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111212504373.png" alt="image-20201111212504373"></p><h2 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h2><blockquote><p>hping是面向命令行的用于生成和解析TCP/IP协议数据包汇编/分析的开源工具</p></blockquote><p>目前最新版的是hping3,它支持TCP,UDP,ICMP和RAW-IP协议,具有跟踪路由模式,能够在覆盖的信道之间发送文件以及其他许多功能.</p><p>hping3是安全审计,防火墙测试等工作的标配工具,hping优势在于能够定制数据包的各个部分,因此用户可以灵活对目标机进行细致的探测</p><h3 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h3><p><strong>Metasploitable2  IP: 192.168.153.149</strong></p><p><strong>Windows7            IP: 192.168.153.150</strong></p><h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><pre class=" language-sh"><code class="language-sh">sudo hping3 --help</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111213350662.png" alt="image-20201111213350662"></p><pre class=" language-sh"><code class="language-sh">-H --help 显示帮助。-v -VERSION 版本信息。-c --count count 发送数据包的次数 关于countreached_timeout 可以在hping2.h里编辑。-i --interval 包发送间隔时间（单位是毫秒）缺省时间是1秒,此功能在增加传输率上很重要,在idle/spoofing扫描时此功能也会被用到,你可以参考hping-howto获得更多信息-fast 每秒发10个数据包。-n -nmeric 数字输出，象征性输出主机地址。-q -quiet 退出。-I --interface interface name 无非就是eth0之类的参数。-v --verbose 显示很多信息，TCP回应一般如：len=46 ip=192.168.1.1 flags=RADF seq=0 ttl=255 id=0 win=0 rtt=0.4ms tos=0 iplen=40 seq=0 ack=1380893504 sum=2010 urp=0-D --debug 进入debug模式当你遇到麻烦时，比如用HPING遇到一些不合你习惯的时候，你可以用此模式修改HPING，（INTERFACE DETECTION,DATA LINK LAYER ACCESS,INTERFACE SETTINGS,.......）-z --bind 快捷键的使用。-Z --unbind 消除快捷键。-O --rawip RAWIP模式，在此模式下HPING会发送带数据的IP头。-1 --icmp ICMP模式，此模式下HPING会发送IGMP应答报，你可以用--ICMPTYPE --ICMPCODE选项发送其他类型/模式的ICMP报文。-2 --udp UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用--baseport --destport --keep选项指定其模式。-9 --listen signatuer hping的listen模式，用此模式，HPING会接收指定的数据。-a --spoof hostname 伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。-t --ttl time to live 可以指定发出包的TTL值。-H --ipproto 在RAW IP模式里选择IP协议。-w --WINID UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。-r --rel 更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。-F --FRAG 更改包的FRAG，这可以测试对方对于包碎片的处理能力，缺省的“virtual mtu”是16字节。-x --morefrag 此功能可以发送碎片使主机忙于恢复碎片而造成主机的拒绝服务。-y -dontfrag 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。-G --fragoff fragment offset value set the fragment offset-m --mtu mtu value 用此项后ID数值变得很大，50000没指定此项时3000-20000左右。-G --rroute 记录路由，可以看到详悉的数据等等，最多可以经过9个路由，即使主机屏蔽了ICMP报文。-C --ICMPTYPE type 指定ICMP类型，缺省是ICMP echo REQUEST。-K --ICMPCODE CODE 指定ICMP代号，缺省0。--icmp-ipver 把IP版本也插入IP头。--icmp-iphlen 设置IP头的长度，缺省为5（32字节）。--icmp-iplen 设置IP包长度。--icmp-ipid 设置ICMP报文IP头的ID，缺省是RANDOM。--icmp-ipproto 设置协议的，缺省是TCP。-icmp-cksum 设置校验和。-icmp-ts alias for --icmptype 13 (to send ICMP timestamp requests)--icmp-addr Alias for --icmptype 17 (to send ICMP address mask requests)-s --baseport source port hping 用源端口猜测回应的包，它从一个基本端口计数，每收一个包，端口也加1，这规则你可以自己定义。-p --deskport [+][+]desk port 设置目标端口，缺省为0，一个加号设置为:每发送一个请求包到达后，端口加1，两个加号为：每发一个包，端口数加1。--keep 上面说过了。-w --win 发的大小和windows一样大，64BYTE。-O --tcpoff Set fake tcp data offset. Normal data offset is tcphdrlen / 4.-m --tcpseq 设置TCP序列数。-l --tcpck 设置TCP ack。-Q --seqnum 搜集序列号的，这对于你分析TCP序列号有很大作用。</code></pre><h4 id="端口扫描功能"><a href="#端口扫描功能" class="headerlink" title="端口扫描功能"></a>端口扫描功能</h4><pre class=" language-sh"><code class="language-sh">sudo hping3 -I eth0 -S 192.168.153.149 -p 80#-I 后指定使用的网卡#-S 扫描的ip地址#-p 扫描的端口</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111214259698.png" alt="Metasploitable2"></p><p>这就说明Windows没有开启80端口</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111214351565.png" alt="Windows7"></p><h4 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h4><blockquote><p>使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.153.148，并使用1000微秒的间隔发送各个SYN包。</p></blockquote><pre class=" language-sh"><code class="language-sh">sudo hping3 -I eth0 -a192.168.153.148 -S 192.168.153.149 -p 80 -i u1000</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111215012205.png" alt="image-20201111215012205"></p><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><blockquote><p>命令用于查询DNS的记录,查看域名解析是否正常,在网络故障的时候用来诊断网络问题</p></blockquote><p>使用这款工具时,大家用到最多的就是查询一个域名的A记录</p><pre class=" language-sh"><code class="language-sh">nslookup domain [dns-server]#如果没有指定dns-server,用系统默认的dns服务器</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111215451063.png" alt="image-20201111215451063"></p><h3 id="查询其他记录类型"><a href="#查询其他记录类型" class="headerlink" title="查询其他记录类型"></a>查询其他记录类型</h3><pre class=" language-sh"><code class="language-sh">A 地址记录AAAA 地址记录AFSDB Andrew文件系统数据库服务器记录ATMA ATM地址记录CNAME 别名记录HINFO 硬件配置记录，包括CPU、操作系统信息ISDN 域名对应的ISDN号码MB 存放指定邮箱的服务器MG 邮件组记录MINFO 邮件组和邮箱的信息记录MR 改名的邮箱记录MX 邮件服务器记录NS 名字服务器记录PTR 反向记录RP 负责人记录RT 路由穿透记录SRV TCP服务器信息记录TXT 域名对应的文本信息X25 域名对应的X.25地址记录</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111220450410.png" alt="image-20201111220450410"></p><h2 id="dnsenum"><a href="#dnsenum" class="headerlink" title="dnsenum"></a>dnsenum</h2><blockquote><p>是一款域名信息收集工具</p></blockquote><p>dnsenum的目的是尽可能的收集一个域的信息,它能够通过谷歌或者字典文件猜测可能存在的域名,以及对一个网段进行反向查询,它可以查询网站的主机地址信息,域名服务器等信息</p><p>可以查询网站的主机地址信息,域名服务器,mx record(函件交换记录)</p><p>DNS信息劫持</p><p>DNS 重定向</p><p>ARP 欺骗</p><h3 id="dnsenum文档"><a href="#dnsenum文档" class="headerlink" title="dnsenum文档"></a>dnsenum文档</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111222154708.png" alt="image-20201111222154708"></p><pre class=" language-sh"><code class="language-sh">dnsenum中文说明：常规选项:--dnsserver     <server> 使用指定DNS服务器查询A记录（注释1），NS记录（注释2），MX记录（注释3）。  --enum 枚举快捷选项 等效于 --threads 5 -s 15 -w。  -h, --help        打印这个帮助信息。  --noreverse        跳过反向查找操作。  --nocolor        禁用ANSIColor（注释4）输出。  --private        在domain_ips.txt文件结尾显示和保存私有ip。  --subfile <file>    将所有有效子域写入此文件。  -t, --timeout <value>    TCP和UDP超时值(默认值: 10s)。  --threads <value>    执行不同查询的线程数。  -v, --verbose        详细信息:显示所有的进度和错误信息。GOOGLE SCRAPING OPTIONS（google抓取选项）:  -p, --pages <value>    在抓取域名时要处理的谷歌搜索页面的数量，默认为5页，必须指定-s参数.  -s, --scrap <value>    从谷歌搜索中清除子域的最大数目（默认为15）.BRUTE FORCE OPTIONS（暴力破解选项）:  -f, --file <file>    从该文件中读取子域进行暴力破解.  -u, --update    <a|g|r|z> 使用文件中指定有效的子域更新- f参数中的文件。    a (all)        使用所有的结果更新。    g        只使用谷歌抓取结果更新。    r        只使用反向查找结果更新。    z        只使用区域传送（注释5）结果更新。  -r, --recursion    在子域上递归查询，暴力破解过所有拥有NS记录的子域。WHOIS NETRANGE OPTIONS（WHOIS 网络区间选项）:  -d, --delay <value>    在whois查询之间延时等待时间的最大值，该值是随机定义的，默认为3s。  -w, --whois        在C类网络范围内执行whois查询。             **警告**: 者可以产生非常大的网络区间，并且需要大量时间进行反向查找。REVERSE LOOKUP OPTIONS（反向查询选项）:  -e, --exclude    <regexp>            排除域regexp表达式匹配的反向查找结果的PTR记录（注释6），对无效的主机名有用。OUTPUT OPTIONS（输出选项）:  -o --output <file>   输出为XML格式文件。可导入MagicTree (www.gremwell.com)</code></pre><pre class=" language-text"><code class="language-text">注释：注释1：A（Address）记录是用来指定主机名或域名对应的IP得知记录。注释2：NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。注释3：MX（Mail Exchanger）记录是邮件交换记录，他指向一个邮件服务器，用于电子邮件系统发送邮件时根据收信人的地址后缀来定位邮件服务器。注释4：ANSIColor，ANSI是一种字符代码，是扩展ASCII编码，ANSIColor是添加特定的ANSI标示符的字符就可以显示不同的颜色。注释5：DNS区域传送（DNS zone transfer）指的是一台备用服务器使用来自主服务器的数据刷新自己的域（zone）数据库。注释6：PTR记录用于将一个IP地址映射到对应的域名，也可以看成是A记录的反向，IP地址的反向解析。</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class=" language-sh"><code class="language-sh">dnsenum weistuday.com</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201111222557373.png" alt="image-20201111222557373"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防_安装靶机(二)</title>
      <link href="posts/13365.html"/>
      <url>posts/13365.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装靶机-二"><a href="#安装靶机-二" class="headerlink" title="安装靶机(二)"></a>安装靶机(二)</h2><p><a href="https://sourceforge.net/projects/metasploitable/files/latest/download">靶机安装地址</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>点击Download</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108172503068.png" alt="image-20201108172503068"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108172535456.png" alt="image-20201108172535456"></p><h3 id="将下载后的软件解压放到kali的文件目录里"><a href="#将下载后的软件解压放到kali的文件目录里" class="headerlink" title="将下载后的软件解压放到kali的文件目录里"></a>将下载后的软件解压放到kali的文件目录里</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108181944566.png" alt="image-20201108181944566"></p><h3 id="进入到文件目录里-点击-vmx后缀的文件"><a href="#进入到文件目录里-点击-vmx后缀的文件" class="headerlink" title="进入到文件目录里 点击 vmx后缀的文件"></a>进入到文件目录里 点击 vmx后缀的文件</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182051433.png" alt="image-20201108182051433"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182130694.png" alt="image-20201108182130694"></p><h3 id="进入系统后登陆"><a href="#进入系统后登陆" class="headerlink" title="进入系统后登陆"></a>进入系统后登陆</h3><p>用户名和密码都是msfadmin</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182250106.png" alt="image-20201108182250106"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182403204.png" alt="登陆成功"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182441965.png" alt="输入ifconfig得到ip地址"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182640887.png" alt="打开火狐浏览器 访问靶机地址"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108182758578.png" alt="输入靶机ip 得到靶机服务"></p><h2 id="安装靶机windows7"><a href="#安装靶机windows7" class="headerlink" title="安装靶机windows7"></a>安装靶机windows7</h2><p>系统镜像 <a href="https://msdn.itellyou.cn/">下载连接</a> </p><p>复制红框中的连接 迅雷会自动下载</p><p>win7和win10还有winxp的安装方式几乎相同</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108183507280.png" alt="image-20201108183507280"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108183541683.png" alt="image-20201108183541683"></p><h3 id="安装win7镜像"><a href="#安装win7镜像" class="headerlink" title="安装win7镜像"></a>安装win7镜像</h3><h4 id="1-新建虚拟机-选典型"><a href="#1-新建虚拟机-选典型" class="headerlink" title="1 新建虚拟机 选典型"></a>1 新建虚拟机 选典型</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108195129443.png" alt="1 新建虚拟机 选典型 "></p><h4 id="2-选择下载的镜像"><a href="#2-选择下载的镜像" class="headerlink" title="2 选择下载的镜像"></a>2 选择下载的镜像</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108195253368.png" alt="2 选择下载的镜像"></p><h4 id="3-不用管密钥-直接下一步即可"><a href="#3-不用管密钥-直接下一步即可" class="headerlink" title="3 不用管密钥 直接下一步即可"></a>3 不用管密钥 直接下一步即可</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108195402484.png" alt="不用管密钥 直接下一步即可"></p><h4 id="4-取名-下一步"><a href="#4-取名-下一步" class="headerlink" title="4 取名 下一步"></a>4 取名 下一步</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108195644897.png" alt="取好名字 下一步"></p><h4 id="5-选择硬件配置"><a href="#5-选择硬件配置" class="headerlink" title="5 选择硬件配置"></a>5 选择硬件配置</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108200644544.png" alt="5 选择硬件配置"></p><h4 id="6-根据自己物理机情况进行调节"><a href="#6-根据自己物理机情况进行调节" class="headerlink" title="6 根据自己物理机情况进行调节"></a>6 根据自己物理机情况进行调节</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108202102200.png" alt="6 根据自己物理机情况进行调节"></p><h2 id="安装靶机-owasp"><a href="#安装靶机-owasp" class="headerlink" title="安装靶机 owasp"></a>安装靶机 owasp</h2><p>下载链接 复制后迅雷自动下载</p><p><a href="https://nchc.dl.sourceforge.net/project/owaspbwa/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z">https://nchc.dl.sourceforge.net/project/owaspbwa/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z</a></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108202410320.png" alt="image-20201108202410320"></p><h4 id="下载后解压放到-之前kali的目录下-打开后缀vmx的文件"><a href="#下载后解压放到-之前kali的目录下-打开后缀vmx的文件" class="headerlink" title="下载后解压放到 之前kali的目录下 打开后缀vmx的文件"></a>下载后解压放到 之前kali的目录下 打开后缀vmx的文件</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108205458100.png" alt="image-20201108205458100"></p><h4 id="运行后-用户名为-root-密码-owaspbwa"><a href="#运行后-用户名为-root-密码-owaspbwa" class="headerlink" title="运行后 用户名为 root 密码 owaspbwa"></a>运行后 用户名为 root 密码 owaspbwa</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108205721990.png" alt="image-20201108205721990"></p><h4 id="ifconfig-查看ip地址-使用kali访问ip"><a href="#ifconfig-查看ip地址-使用kali访问ip" class="headerlink" title="ifconfig 查看ip地址 使用kali访问ip"></a>ifconfig 查看ip地址 使用kali访问ip</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108205916238.png" alt="image-20201108205916238"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108210046416.png" alt="image-20201108210046416"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防_kali常用命令(三)</title>
      <link href="posts/39855.html"/>
      <url>posts/39855.html</url>
      
        <content type="html"><![CDATA[<h2 id="Kali-Linux-常用命令-三"><a href="#Kali-Linux-常用命令-三" class="headerlink" title="Kali Linux 常用命令(三)"></a>Kali Linux 常用命令(三)</h2><h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><pre class=" language-sh"><code class="language-sh">sudo# 系统管理员的身份执行指令,也就是说,经由sudo所执行的指令就好像是root亲自执行sudo service apache2 start# 开启apache服务</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108211924965.png" alt="打开终端 输入命令"></p><h3 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h3><pre class=" language-sh"><code class="language-sh">ifconfig #查看ip 非root用户需要加上 sudo</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108212140449.png" alt="image-20201108212140449"></p><p>复制ip地址访问看到apache服务</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108212255428.png" alt="image-20201108212255428"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108212401875.png" alt="image-20201108212401875"></p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class=" language-sh"><code class="language-sh">sudo passwd root# 修改root用户密码</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108212544816.png" alt="image-20201108212544816"></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201108212655269.png" alt="image-20201108212655269"></p><p>使用root用户登陆</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108212720718.png" alt="image-20201108212720718"></p><p>现在不用添加sudo 也可以执行</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108212804733.png" alt="image-20201108212804733"></p><h3 id="更新文件"><a href="#更新文件" class="headerlink" title="更新文件"></a>更新文件</h3><pre class=" language-sh"><code class="language-sh">sudo apt update#更新sudo apt dist-upgrade#先执行update在执行dist-upgrade</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108213229211.png" alt="image-20201108213229211"></p><pre class=" language-sh"><code class="language-sh">sudo apt install 软件名# 安装软件</code></pre><p>其他常用命令</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ls</td><td>展示文件夹内容</td></tr><tr><td>-a</td><td>ls -a 显示全部的文件,连同隐藏文件一起展示出来</td></tr><tr><td>-l</td><td>ls -l 显示文件和目录的详细资料</td></tr><tr><td>pwd</td><td>查看当前工作目录的完整路径</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>cd /home</td><td>进入到/home目录</td></tr><tr><td>cd ..</td><td>返回上一级目录</td></tr><tr><td>cd ../..</td><td>返回上两级目录</td></tr><tr><td>cp</td><td>命令,复制</td></tr><tr><td>cp demo ./usr</td><td>cp 源文件 到 指定目录下</td></tr><tr><td>rm</td><td>删除</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防_大概介绍(一)</title>
      <link href="posts/36363.html"/>
      <url>posts/36363.html</url>
      
        <content type="html"><![CDATA[<h2 id="网络安全事件"><a href="#网络安全事件" class="headerlink" title="网络安全事件"></a>网络安全事件</h2><ul><li>澳大利亚维多利亚州3万名政府雇员个人信息泄露</li><li>云存储服务商MEGA泄漏87GB数据含7.7亿个邮箱</li><li>委内瑞拉两次大规模停电</li><li>Facebook被曝明文存储6亿用户密码,已被查看900万次</li><li>亚特兰大市政府遭勒索软件袭击，重回纸质办公时代</li><li>世界最大飞机零件供应商ASCO遭受黑客攻击</li><li>各种“邮件门”事件</li><li>徐玉玉电信诈骗</li></ul><h2 id="黑客技术"><a href="#黑客技术" class="headerlink" title="黑客技术"></a>黑客技术</h2><blockquote><p>正确认识黑客,黑客分为好几种,比如红客,白帽黑客,灰帽黑客,黑帽黑客;我们常说的黑客其实特指就是黑帽黑客,只有黑帽黑客才会做窃取隐私,违法乱纪的不法行为</p></blockquote><p>==防御黑客就需要了解黑客技术,才能做到知己知彼,百战不殆==</p><p><strong>黑客技术的合法利用: 渗透测试,网络安全运维等等</strong></p><p>  对个人而言了解这些,尤其是在移动互联网时代,手机作为类似个人电脑,集成了很多比如摄像头,麦克风等硬件;网络安全不只是和公司,政府有关,而是和我们每一个人有关,就比如徐玉玉电信诈骗事件,了解这些可以增强自己的反黑客能力,对常见的恶意攻击有防御意识,比如不明的连接,图片,不要轻易打开,避免个人设备上的信息泄漏</p><h2 id="kali系统"><a href="#kali系统" class="headerlink" title="kali系统"></a>kali系统</h2><blockquote><h1 id="刚刚说的那些黑客技术离不开kali系统-此系统是Linux的一个发行版-不过内置了的很多黑客工具"><a href="#刚刚说的那些黑客技术离不开kali系统-此系统是Linux的一个发行版-不过内置了的很多黑客工具" class="headerlink" title="刚刚说的那些黑客技术离不开kali系统,此系统是Linux的一个发行版,不过内置了的很多黑客工具"></a>刚刚说的那些黑客技术离不开kali系统,此系统是Linux的一个发行版,不过内置了的很多黑客工具</h1></blockquote><p>kali系统对于我们来说内置了很多工具,避免我们把关注放在软件安装上去,对于新手而言工具软件的安装难度可能大于使用这些工具的难度</p><p><a href="http://www.kali.org/downloads/">安装地址</a></p><p>百度网盘镜像地址</p><p>链接：<a href="https://pan.baidu.com/s/1Sui69t9tXQL1Y8Fk-YHqVw">https://pan.baidu.com/s/1Sui69t9tXQL1Y8Fk-YHqVw</a><br>提取码：rtbg<br>复制这段内容后打开百度网盘手机App，操作更方便哦–来自百度网盘超级会员V4的分享</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108121244462.png" alt="image-20201108121244462"></p><h3 id="安装普通的installer"><a href="#安装普通的installer" class="headerlink" title="安装普通的installer"></a>安装普通的installer</h3><p>点击下载后会有一个种子文件 解析种子得到文件下载路径 开始下载</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108122618341.png" alt="image-20201108122618341"></p><h3 id="虚拟机安装镜像"><a href="#虚拟机安装镜像" class="headerlink" title="虚拟机安装镜像"></a>虚拟机安装镜像</h3><h4 id="打开VM"><a href="#打开VM" class="headerlink" title="打开VM"></a>打开VM</h4><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201108124718442.png" alt="image-20201108124718442"></p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>​    </p><h5 id="1-文件-gt-新建虚拟机"><a href="#1-文件-gt-新建虚拟机" class="headerlink" title="1 文件 = > 新建虚拟机"></a>1 文件 = &gt; 新建虚拟机</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108124821677.png" alt="image-20201108124821677"></p><h5 id="2-点击下一步-gt"><a href="#2-点击下一步-gt" class="headerlink" title="2 点击下一步 =>"></a>2 点击下一步 =&gt;</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108125010685.png" alt="image-20201108125010685"></p><h5 id="3-找到刚刚下载的镜像文件地址"><a href="#3-找到刚刚下载的镜像文件地址" class="headerlink" title="3 找到刚刚下载的镜像文件地址"></a>3 找到刚刚下载的镜像文件地址</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108125200058.png" alt="image-20201108125200058"></p><h5 id="4-点击下一步-选择Linux-选择版本为Deban8-x-64位"><a href="#4-点击下一步-选择Linux-选择版本为Deban8-x-64位" class="headerlink" title="4 点击下一步 选择Linux 选择版本为Deban8.x 64位"></a>4 点击下一步 选择Linux 选择版本为Deban8.x 64位</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108125430481.png" alt="image-20201108125430481"></p><h5 id="5-取个名字"><a href="#5-取个名字" class="headerlink" title="5 取个名字"></a>5 取个名字</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108125553070.png" alt="image-20201108125553070"></p><h5 id="6-指定硬件配置-根据自己电脑配置来-一般40个G就可以-选好后下一步"><a href="#6-指定硬件配置-根据自己电脑配置来-一般40个G就可以-选好后下一步" class="headerlink" title="6 指定硬件配置 根据自己电脑配置来 一般40个G就可以 选好后下一步"></a>6 指定硬件配置 根据自己电脑配置来 一般40个G就可以 选好后下一步</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108125704396.png" alt="image-20201108125704396"></p><h5 id="7-点击自定义硬件-进行配置"><a href="#7-点击自定义硬件-进行配置" class="headerlink" title="7 点击自定义硬件 进行配置"></a>7 点击自定义硬件 进行配置</h5><p>我是给了 8G的内存 2个处理器 每个处理器2个核心(这个根据自己的物理机配置来定 不要超过物理机的配置即可)</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108125825258.png" alt="image-20201108125825258"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108130036432.png" alt="image-20201108130036432"></p><h5 id="8-出现-虚拟机-打开weifeng"><a href="#8-出现-虚拟机-打开weifeng" class="headerlink" title="8 出现 虚拟机 打开weifeng"></a>8 出现 虚拟机 打开weifeng</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108130234732.png" alt="image-20201108130234732"></p><h5 id="9-进入后-键盘控制点击第一个即可-鼠标离开虚拟机-Ctrl-Alt-之后就是配置安装位置-语言"><a href="#9-进入后-键盘控制点击第一个即可-鼠标离开虚拟机-Ctrl-Alt-之后就是配置安装位置-语言" class="headerlink" title="9 进入后 键盘控制点击第一个即可 (鼠标离开虚拟机 Ctrl+Alt ) 之后就是配置安装位置 语言"></a>9 进入后 键盘控制点击第一个即可 (鼠标离开虚拟机 Ctrl+Alt ) 之后就是配置安装位置 语言</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108130353143.png" alt="image-20201108130353143"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108130535070.png" alt="选择中文简体 这样安装完直接就是汉化的"></p><p>点击Continue 点击中国=&gt; 汉语 之后会检查安装介质</p><p>之后默认即可 点击下一步 </p><h5 id="10-配置用户管理-2020之后开始官方为了安全考虑-建议不用root用户名"><a href="#10-配置用户管理-2020之后开始官方为了安全考虑-建议不用root用户名" class="headerlink" title="10 配置用户管理 (2020之后开始官方为了安全考虑 建议不用root用户名)"></a>10 配置用户管理 (2020之后开始官方为了安全考虑 建议不用root用户名)</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108130818983.png" alt="image-20201108130818983"></p><p>11 配置密码</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108131032506.png" alt="image-20201108131032506"></p><h5 id="11-选择分区-默认即可-到一下界面-选择-是"><a href="#11-选择分区-默认即可-到一下界面-选择-是" class="headerlink" title="11 选择分区 默认即可 到一下界面 选择 是"></a>11 选择分区 默认即可 到一下界面 选择 是</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108131218364.png" alt="image-20201108131218364"></p><h5 id="12-后续默认即可-到下面界面时-把最后一个勾上"><a href="#12-后续默认即可-到下面界面时-把最后一个勾上" class="headerlink" title="12 后续默认即可 到下面界面时 把最后一个勾上"></a>12 后续默认即可 到下面界面时 把最后一个勾上</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108131520012.png" alt="image-20201108131520012"></p><h5 id="13-开始安装"><a href="#13-开始安装" class="headerlink" title="13 开始安装"></a>13 开始安装</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108132507583.png" alt="image-20201108132507583"></p><p>选择是</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108132950300.png" alt="image-20201108132950300"></p><p>一定不要选手动输入 不然重启后开不了机 选择下面的那个</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108133026014.png" alt="image-20201108133026014"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108133119100.png" alt="image-20201108133119100"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108133427806.png" alt="image-20201108133427806"></p><p>重启后输入用户名密码进入即可</p><h5 id="14-安装完成"><a href="#14-安装完成" class="headerlink" title="14 安装完成"></a>14 安装完成</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108133529179.png" alt="image-20201108133529179"></p><h5 id="15-界面展示-安装完成"><a href="#15-界面展示-安装完成" class="headerlink" title="15 界面展示 安装完成"></a>15 界面展示 安装完成</h5><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201108133624736.png" alt="image-20201108133624736"></p><h2 id="网络安全法"><a href="#网络安全法" class="headerlink" title="网络安全法"></a>网络安全法</h2><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/u=1133556433,1348473472&amp;fm=26&amp;gp=0.jpg" alt="网络安全法"></p><p> 建议买一本看看 避免做出让自己悔恨终生的事情</p><p> 技术来维护自己的隐私安全 ==一定要把握好尺度 不能踩到红线==</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1.8新特性</title>
      <link href="posts/26293.html"/>
      <url>posts/26293.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java1-8新特性"><a href="#Java1-8新特性" class="headerlink" title="Java1.8新特性"></a>Java1.8新特性</h1><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Lambda表达式的使用     * 1. 举例: (o1,o2) -> Integer.compare(o1,o2)     * 2. 格式:     *          -> : Lambda操作符 或 箭头操作符     *          -> : 左边 lambda形参列表 (其实就是接口中的抽象方法的形参列表)     *          -> : lambda体 (其实就是重写的抽象方法的方法体)     * 3. lambda表达式的使用 : ( 分为六种情况)     *        总结:     *          -> 左边 : Lambda形参列表的参数类型可以省略(类型推断);如果lambda形参列表只有一个参数,其一对小括号可以省略     *          -> 右边 : Lambda体应该使用一对{} 包裹; 如果lambda体只有一条执行语句(可能是 return 语句),可以省略这一对{}和return关键字;     * 4. lambda表达式的本质 : 做为函数式接口的实例     *     * 5. 如果一个接口中,只声明了一个抽象方法,则此接口就称为函数式接口     *     * 6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。     */</span>    <span class="token comment" spellcheck="true">/**     * java内置的四大核心函数式接口     *     * 消费型接口 Consumer&lt;T>    void accept(T t)     * 供给型接口 Supplier&lt;T>    T get()     * 函数式接口 Function&lt;T,R>  R apply(T t)     * 断定型接口 Predicate&lt;T>   boolean test(T t)     */</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20200908224820020.png" alt="image-20200908224820020"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20200908224927171.png" alt="image-20200908224927171"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20200908230105152.png" alt="image-20200908230105152"></p><h4 id="1-无参-无返回值"><a href="#1-无参-无返回值" class="headerlink" title="1.无参,无返回值"></a>1.无参,无返回值</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         Runnable r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token annotation punctuation">@Override</span>             <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我爱北京天猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>         r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Runnable runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我爱添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-需要一个参数-但是没有返回值"><a href="#2-需要一个参数-但是没有返回值" class="headerlink" title="2.需要一个参数,但是没有返回值"></a>2.需要一个参数,但是没有返回值</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"谎言和誓言的区别是什么?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer1 <span class="token operator">=</span> <span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        consumer1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"一个是听得人当真了,一个是说的人当真了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-数据类型可以省略-因为可以由编译器推断得出-称为类型推断"><a href="#3-数据类型可以省略-因为可以由编译器推断得出-称为类型推断" class="headerlink" title="3.数据类型可以省略,因为可以由编译器推断得出,称为类型推断"></a>3.数据类型可以省略,因为可以由编译器推断得出,称为类型推断</h4><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"今天不学习,明天变垃圾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-Lambda-若只需要一个参数时-参数的小括号可以省略"><a href="#4-Lambda-若只需要一个参数时-参数的小括号可以省略" class="headerlink" title="4 Lambda 若只需要一个参数时,参数的小括号可以省略"></a>4 Lambda 若只需要一个参数时,参数的小括号可以省略</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"学是学不进去了,睡又不敢睡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="5-Lambda-需要两个或以上的参数-多条执行语句-并且可以有返回值"><a href="#5-Lambda-需要两个或以上的参数-多条执行语句-并且可以有返回值" class="headerlink" title="5.Lambda 需要两个或以上的参数,多条执行语句,并且可以有返回值"></a>5.Lambda 需要两个或以上的参数,多条执行语句,并且可以有返回值</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator1 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="6-当Lambda体只有一条语句时-return-与大括号-若有-都可以省略"><a href="#6-当Lambda体只有一条语句时-return-与大括号-若有-都可以省略" class="headerlink" title="6. 当Lambda体只有一条语句时,return 与大括号 若有,都可以省略"></a>6. 当Lambda体只有一条语句时,return 与大括号 若有,都可以省略</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator1 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201030210811771.png" alt="image-20201030210811771"></p><h4 id="7-消费型接口"><a href="#7-消费型接口" class="headerlink" title="7. 消费型接口"></a>7. 消费型接口</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">happyTime</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Double aDouble<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习太累了,去天上人间买了瓶矿泉水,价格为: "</span> <span class="token operator">+</span> aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">happyTime</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>money <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习太累了,去天上人间买了瓶矿泉水,价格为: "</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">happyTime</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span>Consumer<span class="token operator">&lt;</span>Double<span class="token operator">></span> con<span class="token punctuation">)</span><span class="token punctuation">{</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="8-自定义函数式接口"><a href="#8-自定义函数式接口" class="headerlink" title="8.自定义函数式接口"></a>8.自定义函数式接口</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author caoweifeng * @version 1.00 * @date 2020/10/30 21:04 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的简单使用</title>
      <link href="posts/53788.html"/>
      <url>posts/53788.html</url>
      
        <content type="html"><![CDATA[<h1 id="maven的一些简单使用"><a href="#maven的一些简单使用" class="headerlink" title="maven的一些简单使用"></a>maven的一些简单使用</h1><h2 id="1-maven介绍"><a href="#1-maven介绍" class="headerlink" title="1 maven介绍"></a>1 maven介绍</h2><h3 id="1-1-maven是什么"><a href="#1-1-maven是什么" class="headerlink" title="1.1 maven是什么"></a>1.1 maven是什么</h3><p>maven是项目管理工具,主要对项目进行管理,通过安装和配置maven,就可以在项目中使用maven.</p><p><img src="https://img-blog.csdnimg.cn/20200419214527480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-2-为什么使用maven"><a href="#1-2-为什么使用maven" class="headerlink" title="1.2 为什么使用maven"></a>1.2 为什么使用maven</h3><p>项目中需要依赖很多jar包,怎么解决这个问题,maven可以通过创建仓库,保存jar包,然后通过pom.xml配置文件,来配置jar包依赖</p><p><img src="https://img-blog.csdnimg.cn/2020041921470263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="1-3-maven的生命周期"><a href="#1-3-maven的生命周期" class="headerlink" title="1.3 maven的生命周期"></a>1.3 maven的生命周期</h3><p><img src="https://img-blog.csdnimg.cn/2020041921463390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-maven的安装与配置"><a href="#2-maven的安装与配置" class="headerlink" title="2 maven的安装与配置"></a>2 maven的安装与配置</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><ol><li>下载maven<br>链接：<a href="https://pan.baidu.com/s/1D_w_CbS0lcRQvakGd8npPg">https://pan.baidu.com/s/1D_w_CbS0lcRQvakGd8npPg</a><br>提取码：7q0h </li></ol><ol start="2"><li><p>解压到指定目录   (路径上尽量不要有中文)</p></li><li><p>配置环境变量</p><p><img src="https://img-blog.csdnimg.cn/20200419215025522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击高级系统设置   点击环境变量  新建环境变量 </p><p>变量名 : MAVEN_HOME</p><p>变量值: D:\software\apache-maven-3.5.2</p><p>(变量值为你的maven安装目录)</p></li><li><p>点击path讲maven环境变量加入进去</p><p>%MAVEN_HOME%\bin</p><p><img src="https://img-blog.csdnimg.cn/20200419215101367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>测试maven是否安装好</p><p>运行cmd 输入 mvn -v</p><p>如果显示如图则已经安装好了</p><p><img src="https://img-blog.csdnimg.cn/20200419215149200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>常用配置</p><p>打开maven安装目录下的conf目录</p><p>打开setting.xml文件  (这个是maven的基本配置文件)<br>(注意本地仓库直接复制放到setting.xml就行,远程仓库在mirrors节点下,jdk全局配置在profiles下)</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--本地仓库配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>F:\my_java\maven_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--远程仓库配置--></span>    <span class="token comment" spellcheck="true">&lt;!--阿里云仓库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--jdk全局配置--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre><pre><code>&lt;!--完整配置--&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;    &lt;localRepository&gt;F:\my_java\maven_repository&lt;/localRepository&gt;&lt;interactiveMode&gt;true&lt;/interactiveMode&gt;  &lt;pluginGroups&gt;  &lt;/pluginGroups&gt;  &lt;proxies&gt;  &lt;/proxies&gt;  &lt;servers&gt;  &lt;/servers&gt;  &lt;mirrors&gt;     &lt;mirror&gt;      &lt;id&gt;alimaven&lt;/id&gt;      &lt;name&gt;aliyun maven&lt;/name&gt;      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;            &lt;/mirror&gt;      &lt;!--        &lt;mirror&gt;          &lt;id&gt;nexus-index&lt;/id&gt;          &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;            &lt;name&gt;Nexus index&lt;/name&gt;          &lt;url&gt;http://120.77.158.110:8585/maven2&lt;/url&gt;      &lt;/mirror&gt;         --&gt; &lt;/mirrors&gt;  &lt;profiles&gt;        &lt;profile&gt;            &lt;id&gt;jdk-1.8&lt;/id&gt;            &lt;activation&gt;                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;                &lt;jdk&gt;1.8&lt;/jdk&gt;            &lt;/activation&gt;            &lt;properties&gt;                &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;                &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;                &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;            &lt;/properties&gt;        &lt;/profile&gt;  &lt;/profiles&gt;&lt;/settings&gt;</code></pre><h3 id="2-3在idea中的配置"><a href="#2-3在idea中的配置" class="headerlink" title="2.3在idea中的配置"></a>2.3在idea中的配置</h3><p>打开setting–&gt;Build–&gt;Build Tools–&gt;Maven</p><ol><li>添加本地maven</li></ol><p><img src="https://img-blog.csdnimg.cn/2020041921524928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li><p>设置</p><p> -DarchetypeCatalog=internal</p><p><img src="https://img-blog.csdnimg.cn/20200419215340912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><p>完事后点击apply然后ok</p><ol start="4"><li><p>把第三方 jar 包放入本地仓库或私服</p><p>随便找一个 jar 包测试，可以先 CMD 进入到 jar 包所在位置，运行 </p><pre class=" language-cmd"><code class="language-cmd">mvn  install:install-file  -DgroupId=com.alibaba  -DartifactId=fastjson -Dversion=1.1.37-Dfile=  fastjson-1.1.37.jar  -Dpackaging=jar<!--DgroupId 和 DartifactId 构成了该 jar 包在 pom.xml 的坐标，项目就是依靠这两个属性定位。 自己起名字也行。Dfile 表示需要上传的 jar 包的绝对路径。Dversion  表示版本信息，Dfile jar包名字关于 jar   包准确的版本： 包的名字上一般会带版本号，如果没有那可以解压该包，会发现一个叫  MANIFEST.MF   的文件，</code></pre></li></ol><p>   –&gt;</p><pre><code>![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215526907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215535946.png)##  3 maven项目的创建idea中maven项目创建(idea版本为2017)简单的讲maven 分为使用骨架和不使用骨架File--&gt;new--&gt;project### 3.1不使用骨架创建1. 点击maven --&gt;next![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215700340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)2. Groupld:公司组织的名称artifactId:项目的名称version:版本号![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215724858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)3. 输入完后点next4. 继续点finish5. 创建项目结构![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215801129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)### 3.2 使用骨架1. File--&gt;new--&gt;project点击maven 选中Create from archetype找到maven-archetype-webapp(此时注意有两个webapp不要选错了) ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215821193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)2. Groupld:公司组织的名称artifactId:项目的名称version:版本号  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215835394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)3![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215850119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)4. 点击next--&gt;点击finish就创建一个webapp项目5. ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419215910534.png)但此时缺少文件需要手动添加在main目录下添加 Java 和 resources在src下添加text并分别配置java --&gt;右键--&gt;Mark Directory as --&gt;Sources  Rootresources --&gt;右键--&gt;Mark Directory as --&gt;Resources  Roottext --&gt;右键--&gt;Mark Directory as --&gt; Text Sources Root6. 项目结构 和 resources在src下添加text并分别配置java --&gt;右键--&gt;Mark Directory as --&gt;Sources  Rootresources --&gt;右键--&gt;Mark Directory as --&gt;Resources  Roottext --&gt;右键--&gt;Mark Directory as --&gt; Text Sources Root6. 项目结构![在这里插入图片描述](https://img-blog.csdnimg.cn/20200419220001360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="posts/18155.html"/>
      <url>posts/18155.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Dubbo整合"><a href="#SpringBoot-Dubbo整合" class="headerlink" title="SpringBoot+Dubbo整合"></a>SpringBoot+Dubbo整合</h1><h2 id="一、创建用户微服务"><a href="#一、创建用户微服务" class="headerlink" title="一、创建用户微服务"></a>一、创建用户微服务</h2><h3 id="1、新建SpringBoot-jar工程"><a href="#1、新建SpringBoot-jar工程" class="headerlink" title="1、新建SpringBoot jar工程"></a>1、新建SpringBoot jar工程</h3><p>创建SpringBoot项目。支持SSM+Thymeleaf模版页面。</p><p>实现功能：</p><p><strong>根据用户ID查询用户信息</strong></p><h3 id="2、完整POM-xml"><a href="#2、完整POM-xml" class="headerlink" title="2、完整POM.xml"></a>2、完整POM.xml</h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.qfjy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>boot-user-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>boot-user-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring web mvc--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mysql 驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- druid 数据源连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 热部署 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 支持非严格语法的neko --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sourceforge.nekohtml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nekohtml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Swagger2 Begin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Swagger2 End --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h3><pre class=" language-yml"><code class="language-yml">#server config infoserver:  port: 8080  servlet:    context-path: /boot-user-servicespring:  #thymeleaf info  thymeleaf:    encoding: UTF-8    cache: false    prefix: classpath:/templates/    suffix: .html    mode: LEGACYHTML5    servlet:      content-type: text/html  #datasource connect info  datasource:    name: test    type: com.alibaba.druid.pool.DruidDataSource    druid:      url: jdbc:mysql://localhost:3306/qfdnj?serverTimezone=GMT%2B8      driver-class-name: com.mysql.cj.jdbc.Driver      username: root      password: root      filters: stat      initial-size: 1      min-idle: 1      max-active: 20      max-wait: 60000      time-between-eviction-runs-millis: 60000      min-evictable-idle-time-millis: 300000      validation-query: SELECT 'x'      test-while-idle: true      test-on-borrow: false      test-on-return: false      pool-prepared-statements: false      max-pool-prepared-statement-per-connection-size: 20# mybatis config infomybatis:  mapper-locations: classpath:mapper/*.xml  type-aliases-package: com.qfjy.bean</code></pre><h3 id="4、发送请求"><a href="#4、发送请求" class="headerlink" title="4、发送请求"></a>4、发送请求</h3><p><a href="http://localhost:8080/boot-user-service/user/1">http://localhost:8080/boot-user-service/user/1</a></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"威风"</span><span class="token punctuation">,</span>    <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"telephone"</span><span class="token operator">:</span> <span class="token string">"17635296034"</span><span class="token punctuation">,</span>    <span class="token property">"province"</span><span class="token operator">:</span> <span class="token string">"北京市"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"河南省"</span><span class="token punctuation">,</span>    <span class="token property">"zone"</span><span class="token operator">:</span> <span class="token string">"驻马店"</span><span class="token punctuation">,</span>    <span class="token property">"rid"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"createdate"</span><span class="token operator">:</span> <span class="token string">"2020-10-12 13:41:12"</span><span class="token punctuation">,</span>    <span class="token property">"wid"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span></code></pre><h2 id="二、创建会议微服务"><a href="#二、创建会议微服务" class="headerlink" title="二、创建会议微服务"></a>二、创建会议微服务</h2><h3 id="1、新建SpringBoot-jar工程-1"><a href="#1、新建SpringBoot-jar工程-1" class="headerlink" title="1、新建SpringBoot jar工程"></a>1、新建SpringBoot jar工程</h3><p>创建SpringBoot项目。支持SSM+Thymeleaf模版页面。</p><p>实现功能：</p><p><strong>根据会议编号，查询用户信息</strong></p><h2 id="三、服务最佳化实践"><a href="#三、服务最佳化实践" class="headerlink" title="三、服务最佳化实践"></a>三、服务最佳化实践</h2><p><a href="http://dubbo.apache.org/zh-cn/docs/user/best-practice.html">http://dubbo.apache.org/zh-cn/docs/user/best-practice.html</a></p><p><strong>创建Maven普通jar项目：boot-interface-api</strong></p><p><img src="https://img-blog.csdnimg.cn/202005152252015.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="两个微服务分别引入依赖"><a href="#两个微服务分别引入依赖" class="headerlink" title="两个微服务分别引入依赖"></a>两个微服务分别引入依赖</h4><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.qfjy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>boot-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="四、SpringBoot配置Dubbo"><a href="#四、SpringBoot配置Dubbo" class="headerlink" title="四、SpringBoot配置Dubbo"></a>四、SpringBoot配置Dubbo</h2><h3 id="1、dubbo配置服务提供者"><a href="#1、dubbo配置服务提供者" class="headerlink" title="1、dubbo配置服务提供者"></a>1、dubbo配置服务提供者</h3><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring boot 整合dubbo 导入zookeeper-3.4.9.jar 同时还将curator-client.jar相关导入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yml"><code class="language-yml"># spring dubbo configdubbo:  application:    name: boot-user-service  registry:    address: zookeeper://127.0.0.1:2181  protocol:    name: dubbo    port: 20880</code></pre><h5 id="声明需要暴露的服务-Service"><a href="#声明需要暴露的服务-Service" class="headerlink" title="声明需要暴露的服务@Service"></a>声明需要暴露的服务@Service</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@com</span><span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h5 id="启动-EnableDubbo"><a href="#启动-EnableDubbo" class="headerlink" title="启动 EnableDubbo"></a>启动 EnableDubbo</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.qfjy.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDubbo</span> <span class="token comment" spellcheck="true">// 启动基于Dubbo注解功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootUserServiceApplication</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="2、dubbo配置服务消费者"><a href="#2、dubbo配置服务消费者" class="headerlink" title="2、dubbo配置服务消费者"></a>2、dubbo配置服务消费者</h3><h5 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring boot 整合dubbo 导入zookeeper-3.4.9.jar 同时还将curator-client.jar相关导入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yml"><code class="language-yml"># spring dubbo configdubbo:  application:    name: boot-user-service  registry:    address: zookeeper://127.0.0.1:2181  protocol:    name: dubbo    port: 20880 dubbo:  application:    name: boot-meeting-service  registry:    address: zookeeper://127.0.0.1:2181</code></pre><h5 id="声明需要引用的服务-Reference"><a href="#声明需要引用的服务-Reference" class="headerlink" title="声明需要引用的服务@Reference"></a>声明需要引用的服务@Reference</h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Reference</span>  <span class="token comment" spellcheck="true">//声明引用的远程服务接口。在注册中心发现</span>   <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span></code></pre><h5 id="启动-EnableDubbo-1"><a href="#启动-EnableDubbo-1" class="headerlink" title="启动 EnableDubbo"></a>启动 EnableDubbo</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.qfjy.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDubbo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootMeetingServiceApplication</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>新的需求：</p><p> 根据用户的 手机号码 查询用户的余额信息。（显示当前用户信息）</p><p>1、根据用户手机号查询用户信息 （user-service）</p><p>2、根据手机号码查询余额信息（pay-service)</p><h2 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h2><h3 id="1、启动时检查"><a href="#1、启动时检查" class="headerlink" title="1、启动时检查"></a>1、启动时检查</h3><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check="true"</code>。</p><p>可以通过 <code>check="false"</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check="false"</code>，总是会返回引用，当服务恢复时，能自动连上。</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>check <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>   MeetingPubService meetingPubService<span class="token punctuation">;</span></code></pre><h3 id="2、-容错与屏蔽"><a href="#2、-容错与屏蔽" class="headerlink" title="2、 容错与屏蔽"></a>2、 容错与屏蔽</h3><h4 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h4><p>顾名思义就是当服务提供者出现异常时，消费者是否能够正常处理，在这里，我们关闭掉服务提供者，再进行调用，观察是否会报错</p><p><img src="https://img-blog.csdnimg.cn/20200515225327877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以观察到前端报异常了。</p><p><strong>我们进入</strong>dubbo-admin在消费者中把服务容错开启，如下</p><p><img src="https://img-blog.csdnimg.cn/20200515225355513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>再进行调用可以看到返回为null  容错配置生效</p><h4 id="屏蔽"><a href="#屏蔽" class="headerlink" title="屏蔽"></a>屏蔽</h4><p>当对某个服务启动屏蔽时，此时消费者调用该服务时均会返回空对象。首先我们需要确保提供者与消费者均已启动，然后在消费者中对提供者进行屏蔽，如下图 </p><p><img src="https://img-blog.csdnimg.cn/20200515225436625.png" alt="在这里插入图片描述"></p><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>其实屏蔽与容错还有更高级的配置。基本的屏蔽是返回空对象，我们甚至可以自定义返回内容。<br><strong>进入动态配置，选择新增</strong></p><p><img src="https://img-blog.csdnimg.cn/20200515225457751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200515225516253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>再次访问网页。</strong></p><p>屏蔽成功，并返回我们自定义的内容。此时并未调用到提供者服务。</p><h2 id="六、-高可用场景"><a href="#六、-高可用场景" class="headerlink" title="六、  高可用场景"></a>六、  高可用场景</h2><h4 id="1、现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务"><a href="#1、现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务" class="headerlink" title="1、现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务"></a>1、现象：zookeeper注册中心宕机，还可以消费dubbo暴露的服务</h4><p>原因：</p><p><strong>健壮性</strong></p><p>监控中心宕掉不影响使用，只是丢失部分采样数据</p><p>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</p><p>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</p><p>注册中心全部宕掉后，<strong>服务提供者和服务消费者仍能通过本地缓存通讯</strong></p><p>服务提供者无状态，任意一台宕掉后，不影响使用</p><p>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p><p><strong>2、DUBBO直连</strong><br><img src="https://img-blog.csdnimg.cn/20200515225543412.png" alt="在这里插入图片描述"></p><h2 id="七、负载均衡"><a href="#七、负载均衡" class="headerlink" title="七、负载均衡"></a>七、负载均衡</h2><p><strong>dubbo提供了三个基本的负载均衡策略</strong>，分别是 <strong>随机访问、轮询、最少并发</strong>，一致性hash等。</p><p><a href="http://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html">http://dubbo.apache.org/zh-cn/docs/user/demos/loadbalance.html</a></p><p>演示一下轮询的负载均衡策略。在dubbo-admin中，选择负载均衡功能，</p><p>查询，但不能注册新服务</p><p>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</p><p>注册中心全部宕掉后，<strong>服务提供者和服务消费者仍能通过本地缓存通讯</strong></p><p>服务提供者无状态，任意一台宕掉后，不影响使用</p><p>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD简介语法说明</title>
      <link href="posts/9410.html"/>
      <url>posts/9410.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-简洁语法说明"><a href="#Markdown-简洁语法说明" class="headerlink" title="Markdown 简洁语法说明"></a>Markdown 简洁语法说明</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>一直以来都是以word文档做笔记，存在很多问题，比如代码格式、高亮等。这次公司要求使用markdown，感觉眼前一亮，以前word的问题都得到了解决，而且可以生成电子书，或者直接通过gitbook放到网络中，非常棒。</p><p>但是很多的朋友可能与我一样，之前对markdown并不熟悉，所以对语法、typora的快捷键都不太熟悉，因此就有了本文。</p><h2 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h2><h3 id="1-1-多级标题"><a href="#1-1-多级标题" class="headerlink" title="1.1 多级标题"></a>1.1 多级标题</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>在Markdown中，如果想将一段文字定义为标题，只需要在这段文字前面加上 <code>#</code>，<strong>再在 <code>#</code> 后加一个空格</strong>即可。还可增加二、三、四、五、六级标题，总共六级。每多一级 ，增加一个 <code>#</code> ，标题字号相应降低一级。如图：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/title.png"></p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>在typora中，1级标题对应的快捷键是：<code>CTRL + 1</code> ，其它级别分别对应2~6的数字即可</p><h3 id="1-2-列表"><a href="#1-2-列表" class="headerlink" title="1.2 列表"></a>1.2 列表</h3><h4 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h4><p>列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 <code>-</code> 就可以了；如果你希望是有序列表，在文字前面加上 <code>1. 或2. 或3.</code> 即可。</p><p>注意：无论是<code>-</code> 还是 <code>1.</code>都需要在后面跟上一个空格</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/list.png" alt="多级列表"></p><h4 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h4><p>typora中并没有对应快捷键，不过在菜单中有对应选项：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/list-menu.png" alt="1523755334687"></p><h3 id="1-3-引用"><a href="#1-3-引用" class="headerlink" title="1.3 引用"></a>1.3 引用</h3><h4 id="语法说明-1"><a href="#语法说明-1" class="headerlink" title="语法说明"></a>语法说明</h4><p>如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。</p><p>在引用文字前加上 <code>&gt;</code> 并与文字保留一个字符的空格即可。如图：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/other.png" alt="1523754363834"></p><h4 id="快捷键-2"><a href="#快捷键-2" class="headerlink" title="快捷键"></a>快捷键</h4><p>typora中的快捷键是：<code>CTRL+SHIFT+Q</code></p><h3 id="1-4-粗体和斜体"><a href="#1-4-粗体和斜体" class="headerlink" title="1.4 粗体和斜体"></a>1.4 粗体和斜体</h3><h4 id="语法说明-2"><a href="#语法说明-2" class="headerlink" title="语法说明"></a>语法说明</h4><p>Markdown 的粗体和斜体也非常简单：</p><p>用两个 <code>*</code> 包含一段文本就是粗体的语法；</p><p>用一个 <code>*</code> 包含一段文本就是斜体的语法。</p><p>如图：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/bold.png" alt="1523754426178"></p><h4 id="快捷键-3"><a href="#快捷键-3" class="headerlink" title="快捷键"></a>快捷键</h4><p>typora中的快捷键：</p><p>​    粗体：<code>Ctrl + B</code></p><p>​    斜体：<code>Ctrl + I</code></p><p>​    下划线：<code>Ctrl + U</code></p><h3 id="1-5-链接"><a href="#1-5-链接" class="headerlink" title="1.5 链接"></a>1.5 链接</h3><h4 id="语法说明-3"><a href="#语法说明-3" class="headerlink" title="语法说明"></a>语法说明</h4><p>在 Markdown 中，插入链接的语法如下：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">[链接文本](链接地址)</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201010133900285.png" alt="image-20201010133900285"></p><h4 id="快捷键-4"><a href="#快捷键-4" class="headerlink" title="快捷键"></a>快捷键</h4><p>typora中的快捷键是：<code>Ctrl + K</code></p><h3 id="1-6-图片"><a href="#1-6-图片" class="headerlink" title="1.6 图片"></a>1.6 图片</h3><h4 id="语法说明-4"><a href="#语法说明-4" class="headerlink" title="语法说明"></a>语法说明</h4><p>在 Markdown 中，插入图片的语法如下：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">![图片说明文字](链接地址)</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/image-20201010133920605.png" alt="image-20201010133920605"></p><h4 id="快捷键-5"><a href="#快捷键-5" class="headerlink" title="快捷键"></a>快捷键</h4><p>typora中的快捷键是：<code>Ctrl + Shift + I</code></p><h3 id="1-7-分割线"><a href="#1-7-分割线" class="headerlink" title="1.7 分割线"></a>1.7 分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 *** 即可分割两段文字内容。</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/divider.png" alt="1523755021744"></p><h3 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h3><p>表格输入相对复杂，推荐使用工具自带功能实现</p><h4 id="语法说明-5"><a href="#语法说明-5" class="headerlink" title="语法说明"></a>语法说明</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/table.png" alt="1523755747300"></p><h4 id="快捷键-6"><a href="#快捷键-6" class="headerlink" title="快捷键"></a>快捷键</h4><p>typora的快捷键：<code>Ctrl + T</code></p><p>弹出菜单：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/table-menu.png"></p><p>生成的表格：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/table-image.png"></p><h3 id="1-9-代码高亮"><a href="#1-9-代码高亮" class="headerlink" title="1.9 代码高亮"></a>1.9 代码高亮</h3><h4 id="语法说明-6"><a href="#语法说明-6" class="headerlink" title="语法说明"></a>语法说明</h4><p>行内代码块：</p><pre class=" language-markdow"><code class="language-markdow">`代码`</code></pre><p>段落代码块：</p><pre class=" language-markdwon"><code class="language-markdwon">​```语言类型代码​```</code></pre><p>示例：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/code.png" alt="1523757176213"></p><h4 id="快捷键-7"><a href="#快捷键-7" class="headerlink" title="快捷键"></a>快捷键</h4><p>行内代码：</p><pre class=" language-markdown"><code class="language-markdown">Ctrl + Shift + `</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作软技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作软技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上安装solr及简单配置</title>
      <link href="posts/11794.html"/>
      <url>posts/11794.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装solr"><a href="#安装solr" class="headerlink" title="安装solr"></a>安装solr</h2><h3 id="1-直接安装solr"><a href="#1-直接安装solr" class="headerlink" title="1 直接安装solr"></a>1 直接安装solr</h3><p>此次安装的版本为solr 7.3  LInux为cetos 7</p><ol><li><p>下载solr<br>本地安装solr  连接<br>链接：<a href="https://pan.baidu.com/s/1ZjQY5sAABPacfYPD_N5JSQ">https://pan.baidu.com/s/1ZjQY5sAABPacfYPD_N5JSQ</a><br>提取码：xezh</p><p>在线安装<br>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/7.7.3/solr-7.7.3.tgz">https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/7.7.3/solr-7.7.3.tgz</a></p><p>   <img src="https://img-blog.csdnimg.cn/20200505155645119.png" alt="在这里插入图片描述"></p></li><li><p>解压到指定目录并进入</p><pre><code>tar -zxf solr-7.7.3.tgzmv solr-7.7.3 /usr/local/solrcd /usr/local/solr/</code></pre><p>   <img src="https://img-blog.csdnimg.cn/20200505160729451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>关掉防火墙<br>  systemctl stop firewalld</p></li><li><p>启动solr<br>bin/solr start -force    (注意因为root用户默认不能启动solr所以在后面加上 -force)<img src="https://img-blog.csdnimg.cn/20200505161042781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>访问solr</p><p><img src="https://img-blog.csdnimg.cn/20200505161331114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>创建一个core<br>bin/solr create -c demo<br><img src="https://img-blog.csdnimg.cn/20200506081038156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>刷新页面<br><img src="https://img-blog.csdnimg.cn/20200506081139496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="5"><li><p>布置中文分词器</p><ol><li><p>解压ik-analyzer-8.3.0.jar<br> (注意需要用unzip没有请下载: yum -y istall unzip zip)</p></li><li><p>unzip ik-analyzer-8.3.0.jar -d ik-analyzer-8.3.0<br>   <img src="https://img-blog.csdnimg.cn/20200506082357405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>进入解压目录<br>cd ik-analyzer-8.3.0<br><img src="https://img-blog.csdnimg.cn/2020050608245755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>执行一下命令 创建classes目录</p><p> mkdir /usr/local/solr/server/solr-webapp/webapp/WEB-INF/classes</p><p>   <img src="https://img-blog.csdnimg.cn/2020050608315691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="5"><li>执行一下命令将这几个文件复制到classes目录<pre><code>cp dict/ dynamicdic.txt ext.dic IKAnalyzer.cfg.xml ik.conf stopword.dic /usr/local/solr/server/solr-webapp/webapp/WEB-INF/classes</code></pre><img src="https://img-blog.csdnimg.cn/20200506083437421.png" alt="在这里插入图片描述"><pre><code>6. 将ik-analyzer-8.3.0.jar 拷贝到lib下</code></pre></li></ol></li></ol></li></ol></li></ol><pre class=" language-linux"><code class="language-linux">cp ik-analyzer-8.3.0.jar /usr/local/solr/server/solr-webapp/webapp/WEB-INF/lib</code></pre><p><img src="https://img-blog.csdnimg.cn/2020050608423656.png" alt="在这里插入图片描述"><br>            7. 进入刚才创建的core的配置文件</p><pre><code>             cd /usr/local/solr/server/solr/demo/conf             vim managed-schema             :/fieldType</code></pre><pre><code>        将下面的配置复制进去保存后退出:/wq</code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text_ik<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>solr.TextField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!----></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>analyzer</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tokenizer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wltea.analyzer.lucene.IKTokenizerFactory<span class="token punctuation">"</span></span> <span class="token attr-name">useSmart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>solr.LowerCaseFilterFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>analyzer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>analyzer</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tokenizer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wltea.analyzer.lucene.IKTokenizerFactory<span class="token punctuation">"</span></span> <span class="token attr-name">useSmart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>solr.LowerCaseFilterFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>analyzer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldType</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200506085659892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>8. 重新启动slor<br>  bin/solr start -force<br>    (vim  /usr/local/solr/bin/solr.in.sh<br>    将SOLR_ULIMIT_CHECKS设置为false，消除WARN<br>    <img src="https://img-blog.csdnimg.cn/20200506095301981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>)</p><p>  访问slor<br> 下面是使用<br> <img src="https://img-blog.csdnimg.cn/20200506094039173.gif" alt="在这里插入图片描述"></p><h3 id="2-部署在tomcat上"><a href="#2-部署在tomcat上" class="headerlink" title="2 部署在tomcat上"></a>2 部署在tomcat上</h3><p> <a href="https://blog.csdn.net/wudinaniya/article/details/81739059">参考</a></p><hr><h3 id="3-从外部导入数据"><a href="#3-从外部导入数据" class="headerlink" title="3 从外部导入数据"></a>3 从外部导入数据</h3><ol><li>用xml方式导入,出现一下情况</li></ol><p><img src="https://img-blog.csdnimg.cn/20200507170633157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>进入new_core下的conf文件下,创建my-data-config.xml文件<br><code>touch my-data-config.xml</code></li><li>编辑此文件<br>vim my-data-config.xml<br><img src="https://img-blog.csdnimg.cn/20200507171251861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将一下数据添加就去<br><img src="https://img-blog.csdnimg.cn/2020050717191347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataConfig</span><span class="token punctuation">></span></span>    &lt;dataSource name="source-materail" type="JdbcDataSource"              driver="com.mysql.jdbc.Driver"  <span class="token comment" spellcheck="true">&lt;!--数据库驱动--></span>              url="jdbc:mysql://127.0.0.1:3306/itripdb"  <span class="token comment" spellcheck="true">&lt;!--连接数据库 : itripdb是要连接的数据库--></span>              user="root"                            <span class="token comment" spellcheck="true">&lt;!--数据库用户名--></span>              password="weifeng123456" />            <span class="token comment" spellcheck="true">&lt;!--数据库密码--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>document</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        entity name -- name是唯一的，用以标识entity  pk  -- entity的主键，它是可选的，但使用“增量导入”的时候是必需。它跟schema.xml中定义的uniqueKey没有必然的联系，但它们可以相同。  query 查询sql语句         field  column -- 数据库字段  name -- managed-schema中的字段    --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itrip_area_dic<span class="token punctuation">"</span></span>  <span class="token attr-name">pk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">query</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select id,name,areaNo from itrip_area_dic <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>id<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>id<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>name<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>name<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>areaNo<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>areaNo<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>document</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataConfig</span><span class="token punctuation">></span></span></code></pre><p><a href="https://www.jianshu.com/p/91a5a0c35475">关于这个文件的配置请参考</a></p><ol start="4"><li><p>编辑managed-schema 将要查询的字段添加进去<br>把需要分词的中文改为中文用中文分词器<br>type=”text_ik”<br><img src="https://img-blog.csdnimg.cn/20200507184929683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>在solrconfig.xml设置<br>把一些代码在xml中加入</p></li></ol><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>requestHandler</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dataimport<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>solr.DataImportHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lst</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaults<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>str</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>my-data-config.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>str</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--&lt;str name="update.chain">uuid&lt;/str>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lst</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>requestHandler</span><span class="token punctuation">></span></span></code></pre><p>  <img src="https://img-blog.csdnimg.cn/20200507185705292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6. 这是重启tomcat重新访问solr<br>  <img src="https://img-blog.csdnimg.cn/20200507185941123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>7. 下面是简单用法<br>    <img src="https://img-blog.csdnimg.cn/20200507191748481.gif" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在windows下的Mongodb安装及简单使用</title>
      <link href="posts/21092.html"/>
      <url>posts/21092.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb安装"><a href="#Mongodb安装" class="headerlink" title="Mongodb安装"></a>Mongodb安装</h1><h2 id="1-mongodb介绍"><a href="#1-mongodb介绍" class="headerlink" title="1  mongodb介绍"></a>1  mongodb介绍</h2><p><img src="https://img-blog.csdnimg.cn/2020042109580290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2下载mongodb"><a href="#2下载mongodb" class="headerlink" title="2下载mongodb"></a>2下载mongodb</h2><p>链接：<a href="https://pan.baidu.com/s/1V2dF8ECKJelg9osaR01LjQ">https://pan.baidu.com/s/1V2dF8ECKJelg9osaR01LjQ</a><br>提取码：hbwm<br>使用的版本为3.4</p><h2 id="3-安装mongodb"><a href="#3-安装mongodb" class="headerlink" title="3 安装mongodb"></a>3 安装mongodb</h2><p>操作系统为win10<br>你的系统如果是 win7 可能需要vc++运行库<br>安装需要vc++ 如果没有会提示无法启动此程序，因为计算机中丢失 VCRUNTIME140.dll”。<br>下载vc++<br>链接：<a href="https://pan.baidu.com/s/1UdkqbkpHs3Fys1-N4HcuZg">https://pan.baidu.com/s/1UdkqbkpHs3Fys1-N4HcuZg</a><br>提取码：ddo7</p><ol><li>运行mongodb-win32-x86_64-2008plus-ssl-v3.4-latest-signed.msi<br><img src="https://img-blog.csdnimg.cn/20200421100612243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击Next  点击 同意协议 然后next<br><img src="https://img-blog.csdnimg.cn/20200421101716639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ol start="3"><li>点击Custom<br><img src="https://img-blog.csdnimg.cn/20200421101832222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Browse 这个是你安装的地址 注意不要有中文<br>调整后点击Next<img src="https://img-blog.csdnimg.cn/20200421101932586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击Install 安装<br><img src="https://img-blog.csdnimg.cn/20200421102256565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击Finish完成<br><img src="https://img-blog.csdnimg.cn/2020042110234768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>进入到安装目录<br><img src="https://img-blog.csdnimg.cn/20200421102520675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>为了方便管理 创建 数据库路径(data目录) ,日志文件(logs目录)和日志文件(mongo.log文件),创建配置文件mongo.conf<br><img src="https://img-blog.csdnimg.cn/20200421103117490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>mongo.conf的配置内容</li></ol></li></ol><pre class=" language-conf"><code class="language-conf">#数据库路径 dbpath=D:\software\MongoDB\data#日志输出文件路径 logpath=D:\software\MongoDB\logs\mongo.log #错误日志采用追加模式 logappend=true #启用日志文件，默认启用 journal=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false quiet=true#端口号 默认为27017 port=27017</code></pre><ol start="9"><li><p>通过执行bin/mongod.exe，使用–install选项来安装服务，使用–config选项来指定之前创建的配置文件。</p><pre class=" language-conf"><code class="language-conf">mongod.exe --config  "D:\software\MongoDB\mongo.conf"  ‐‐install</code></pre><p>注意Mongodb 安装成功会自动添加服务 重启此服务也可以</p><p><img src="https://img-blog.csdnimg.cn/20200421114912607.png" alt="在这里插入图片描述"><br>10 . </p><pre class=" language-cmd"><code class="language-cmd">#启动MongoDB服务net start MongoDB#关闭MongoDB服务net stop MongoDB</code></pre><p><img src="https://img-blog.csdnimg.cn/20200421111452326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><p>启动mongodb服务， 命令执行后，浏览器中输入<a href="http://127.0.0.1:27017看到如下界面即说明启动成功">http://127.0.0.1:27017看到如下界面即说明启动成功</a><br><img src="https://img-blog.csdnimg.cn/20200421111618692.png" alt="在这里插入图片描述"></p><h2 id="安装studio3t"><a href="#安装studio3t" class="headerlink" title="安装studio3t"></a>安装studio3t</h2><p>studio3t是mongodb优秀的客户端工具</p><ol><li>下载<br>链接：<a href="https://pan.baidu.com/s/1sa3CLq0EJv2rhavKQ67kzw">https://pan.baidu.com/s/1sa3CLq0EJv2rhavKQ67kzw</a><br>提取码：fv3u<br>无脑安装就行 点击下一步 中间可以选择安装地址<br>安装完后启动Studio-3T.exe</li><li>点击Connect<br><img src="https://img-blog.csdnimg.cn/20200421112325741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击New 新建连接<br><img src="https://img-blog.csdnimg.cn/20200421112520350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>填写连接信息,这个随意 填写完后点击save<img src="https://img-blog.csdnimg.cn/20200421112731904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击Connect<img src="https://img-blog.csdnimg.cn/20200421112858237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>出现一下画面就是成功了<br><img src="https://img-blog.csdnimg.cn/20200421113000120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><ol><li>基础概念  <img src="https://img-blog.csdnimg.cn/20200421111755138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhb3dlaWZlbmcxMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>简单操作<pre class=" language-txt"><code class="language-txt">一 数据库操作1、查询数据库show dbs 查询全部数据库db 显示当前数据库2、创建数据库命令格式：use DATABASE_NAME例子：use test02  #有test02数据库则切换到此数据库，没有则创建。注意： 新创建的数据库不显示，需要至少包括一个集合。3、删除数据库（慎用！！！）命令格式：db.dropDatabase()例子： 删除test02数据库 先切换数据库：use test02 再执行删除：db.dropDatabase()二 集合集合相当于关系数据库中的表，一个数据库可以创建多个集合，一个集合是将相同类型的文档管理起来。1、创建集合db.createCollection(name, options)name: 新创建的集合名称 options: 创建参数2、删除集合db.collection.drop() 例子： db.student.drop() 删除student集合三 文档mongodb中文档的格式是json格式，下边就是一个文档，包括两个key：_id主键和name{   "_id" : ObjectId("5b2cc4bfa6a44812707739b5"),   "name" : "程序员"}插入命令：db.COLLECTION_NAME.insert(document)每个文档默认以_id作为主键，主键默认类型为ObjectId（对象类型），mongodb会自动生成主键值。例子：db.student.insert({"name":"程序员","age":10})注意：同一个集合中的文档的key可以不相同！但是建议设置为相同的。更新文档命令格式：db.collection.update(  <query>,   <update>,   <options> )query:查询条件，相当于sql语句的where update：更新文档内容 options：选项替换文档将符合条件 "name":"人类"的第一个文档替换为{"name":"程序员","age":10}。db.student.update({"name":"人类"},{"name":"程序员","age":10})</code></pre></li></ol></li></ol><p>$set修改器<br>使用$set修改器指定要更新的key，key不存在则创建，存在则更新。 将符合条件 “name”:”程序”的所有文档更新name和age的值。<br>db.student.update({“name”:”程序”},{$set:{“name”:”程序员”,”age”:10}},{multi:true})<br>multi：false表示更新第一个匹配的文档，true表示更新所有匹配的文档。</p><p>删除文档</p><p>命令格式：<br>db.student.remove(<query>)<br>query：删除条件，相当于sql语句中的where</query></p><p>1、删除所有文档<br>db.student.remove({})<br>2、删除符合条件的文档</p><p>db.student.remove({“name”:”程序”})</p><p>查询文档<br>命令格式：<br>db.collection.find(query, projection)<br>query：查询条件，可不填<br>projection：投影查询key，可不填<br>1、 查询全部</p><p>db.student.find()</p><p>2、查询符合条件的记录</p><p>查询name等为”程序员”的文档。</p><p>db.student.find({“name”:”程序员”})</p><p>3、投影查询<br>只显示name和age两个key，_id主键不显示。<br>db.student.find({“name”:”程序员”},{name:1,age:1,_id:0})</p><pre><code>    更深入了解请参考  MongoDB权威指南.pdf   链接：https://pan.baidu.com/s/1uC-hgizAonbeYuYtbtdX8Q 提取码：oa1b</code></pre>]]></content>
      
      
      <categories>
          
          <category> NoSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的方法传递</title>
      <link href="posts/57604.html"/>
      <url>posts/57604.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的方法传递机制"><a href="#Java中的方法传递机制" class="headerlink" title="Java中的方法传递机制"></a>Java中的方法传递机制</h1><h2 id="1-代码如下"><a href="#1-代码如下" class="headerlink" title="1. 代码如下"></a>1. 代码如下</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        Integer c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        E e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c = "</span> <span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d = "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e = "</span> <span class="token operator">+</span>e<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span>String b2<span class="token punctuation">,</span>Integer c3<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d4<span class="token punctuation">,</span>E e5<span class="token punctuation">)</span><span class="token punctuation">{</span>        a1<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        b2 <span class="token operator">+=</span><span class="token string">"world"</span><span class="token punctuation">;</span>        c3 <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        d4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        e5<span class="token punctuation">.</span>a <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-没调用change方法前个参数情况"><a href="#2-没调用change方法前个参数情况" class="headerlink" title="2 没调用change方法前个参数情况"></a>2 没调用change方法前个参数情况</h2><p>如图所示</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgxODUxNDY2MTUucG5n?x-oss-process=image/format,png" alt="image-20200718185146615"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgxODA2MTU1MTAucG5n?x-oss-process=image/format,png" alt="image-20200718180615510"></p><ul><li>int a 是基本数据类型 又是局部变量 在main方法栈中 值为一</li><li>String b 是引用数据类型 b 中存放的是地址值 指向 常量池中的值</li><li>Integer c 是int的包装类 c 中存放的是地址值 因为200不在-128~127中 所以 在堆中开辟一块空间存放200 c 指向200</li><li>int d 是数组 d中存放的是地址值,在堆中开辟一块空间,存放d对应的值</li><li>e中有一个成员变量 所以 e.a 在堆中开辟一块空间存放 值为10 e.a指向这块空间</li></ul><h2 id="执行change时"><a href="#执行change时" class="headerlink" title="执行change时"></a>执行change时</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgxODU1MzE5NDkucG5n?x-oss-process=image/format,png" alt="image-20200718185531949"></p><p>首先实参向形参传值时,当是基本数据类型时,传递的时数据值,引用数据类型时,传递的是引用地址值</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgxOTA2MTQwOTEucG5n?x-oss-process=image/format,png" alt="image-20200718190614091"></p><h2 id="3-执行chanage的方法-各参数情况"><a href="#3-执行chanage的方法-各参数情况" class="headerlink" title="3 执行chanage的方法 各参数情况"></a>3 执行chanage的方法 各参数情况</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgxOTA3MTMzMTQucG5n?x-oss-process=image/format,png" alt="image-20200718190713314"></p><ul><li><p>a1 = a +1 = 2</p></li><li><p>b2 +=”world” 因为String类型是常量 不可变 拼接后会产生一个新的对象 helloworkd  b2就会指向helloworld</p><p> 同时地址值发生改变0x1001  </p></li><li><p>Integer c 由于Integer是包装类型所以 当c传入的时候 c3 = 201 同时c3的地址值发生改变 0x2001</p></li><li><p>int [] d 传入的时候 数组传递是引用地址值,当d4[0] +=1 的时候 0x3000对应的下标为零的值发生改变 由1变2</p></li><li><p>E 转入的也是地址值 此时 e5指向0x4000 e5.a+=1 红 int a = 11</p><p>情况变成如下图所示</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgyMTUxNTU1NzUucG5n?x-oss-process=image/format,png" alt="image-20200718215155575"></p></li></ul><p>代码执行结果</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTgyMTUzMTA0MjUucG5n?x-oss-process=image/format,png" alt="image-20200718215310425"></p><p>结论</p><ol><li><p>实参是基本数据类型</p><ul><li>传递的是数据值 </li></ul></li><li><p>实参是引用数据类型</p><ul><li>传递地址值</li><li>特殊的类型: String 包装类等对象不可变性</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJpa实体类自动生成</title>
      <link href="posts/470.html"/>
      <url>posts/470.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-Jpa实体类idea自动生成"><a href="#Spring-Data-Jpa实体类idea自动生成" class="headerlink" title="Spring Data Jpa实体类idea自动生成"></a>Spring Data Jpa实体类idea自动生成</h1><h2 id="1-idea连接数据库"><a href="#1-idea连接数据库" class="headerlink" title="1. idea连接数据库"></a>1. idea连接数据库</h2><ol><li><p>点击Database idea右侧</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzQxNDY0NjYucG5n?x-oss-process=image/format,png" alt="image-20200713174146466"></p></li><li><p>点击+ 号-&gt;Data Source -&gt; MySql (这里选择你的数据库)</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzQyMzUzNTcucG5n?x-oss-process=image/format,png" alt="image-20200713174235357"></p></li><li><p>按照提示填写信息</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzQ0NDcxMDIucG5n?x-oss-process=image/format,png" alt="image-20200713174447102"></p></li><li><p>连接成功后即可看到你的数据库情况</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzQ1MzA3MTYucG5n?x-oss-process=image/format,png" alt="image-20200713174530716"></p></li></ol><h2 id="2-建立基本项目-导入依赖"><a href="#2-建立基本项目-导入依赖" class="headerlink" title="2 建立基本项目 导入依赖"></a>2 建立基本项目 导入依赖</h2><p>   <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzQ3NDIxOTcucG5n?x-oss-process=image/format,png" alt="image-20200713174742197"></p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mysql --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- jpa --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="3-修改脚本"><a href="#3-修改脚本" class="headerlink" title="3 修改脚本"></a>3 修改脚本</h2><ol><li><p>任意位置右键 Scripted Extensions -&gt; Go To Scripts Directory</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzQ5MzgwMTUucG5n?x-oss-process=image/format,png" alt="image-20200713174938015"></p><ol start="2"><li><p>打开GeneratePOJOS.groovy 将下面代码替换原来的 根据自己情况可进行修改 看注释</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">import</span> com<span class="token operator">.</span>intellij<span class="token operator">.</span>database<span class="token operator">.</span>model<span class="token operator">.</span>DasTable<span class="token keyword">import</span> com<span class="token operator">.</span>intellij<span class="token operator">.</span>database<span class="token operator">.</span>model<span class="token operator">.</span>ObjectKind<span class="token keyword">import</span> com<span class="token operator">.</span>intellij<span class="token operator">.</span>database<span class="token operator">.</span>util<span class="token operator">.</span>Case<span class="token keyword">import</span> com<span class="token operator">.</span>intellij<span class="token operator">.</span>database<span class="token operator">.</span>util<span class="token operator">.</span>DasUtil<span class="token comment" spellcheck="true">/* * Available context bindings: *   SELECTION   Iterable&lt;DasObject> *   PROJECT     project *   FILES       files helper */</span><span class="token comment" spellcheck="true">//修改为你的实体类的包名</span>packageName <span class="token operator">=</span> <span class="token string">"com.apt.entity;"</span>typeMapping <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)int/</span><span class="token punctuation">)</span>                      <span class="token punctuation">:</span> <span class="token string">"Long"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)float|double|decimal|real/</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"Double"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)bool|boolean/</span><span class="token punctuation">)</span>             <span class="token punctuation">:</span> <span class="token string">"Boolean"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)datetime|timestamp/</span><span class="token punctuation">)</span>       <span class="token punctuation">:</span> <span class="token string">"java.util.Date"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)date/</span><span class="token punctuation">)</span>                     <span class="token punctuation">:</span> <span class="token string">"java.sql.Date"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)time/</span><span class="token punctuation">)</span>                     <span class="token punctuation">:</span> <span class="token string">"java.sql.Time"</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">/(?i)/</span><span class="token punctuation">)</span>                         <span class="token punctuation">:</span> <span class="token string">"String"</span><span class="token punctuation">]</span>FILES<span class="token operator">.</span><span class="token function">chooseDirectoryAndSave</span><span class="token punctuation">(</span><span class="token string">"Choose directory"</span><span class="token punctuation">,</span> <span class="token string">"Choose where to store generated files"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> dir <span class="token operator">-></span>    SELECTION<span class="token operator">.</span>filter <span class="token punctuation">{</span> it <span class="token keyword">instanceof</span> <span class="token class-name">DasTable</span> <span class="token operator">&amp;&amp;</span> it<span class="token operator">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ObjectKind<span class="token operator">.</span>TABLE <span class="token punctuation">}</span><span class="token operator">.</span>each <span class="token punctuation">{</span> <span class="token function">generate</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> dir<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> className <span class="token operator">=</span> <span class="token function">javaName</span><span class="token punctuation">(</span>table<span class="token operator">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> fields <span class="token operator">=</span> <span class="token function">calcFields</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> className <span class="token operator">+</span> <span class="token string">".java"</span><span class="token punctuation">)</span><span class="token operator">.</span>withPrintWriter <span class="token punctuation">{</span> out <span class="token operator">-></span> <span class="token function">generate</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> table<span class="token punctuation">,</span> className<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> table<span class="token punctuation">,</span> className<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> tableName <span class="token operator">=</span> table<span class="token operator">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    out<span class="token operator">.</span>println <span class="token string">"package $packageName"</span>    out<span class="token operator">.</span>println <span class="token string">""</span>    out<span class="token operator">.</span>println <span class="token string">"import lombok.Data;"</span>    out<span class="token operator">.</span>println <span class="token string">""</span>    out<span class="token operator">.</span>println <span class="token string">"import javax.persistence.*;"</span>    out<span class="token operator">.</span>println <span class="token string">"import java.io.Serializable;"</span>    out<span class="token operator">.</span>println <span class="token string">"import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"</span>    out<span class="token operator">.</span>println <span class="token string">""</span>    out<span class="token operator">.</span>println <span class="token string">"@Data"</span>    out<span class="token operator">.</span>println <span class="token string">"@Entity"</span>    out<span class="token operator">.</span>println <span class="token string">"@Table(name = \"$tableName\")"</span>    out<span class="token operator">.</span>println <span class="token string">"@JsonIgnoreProperties({\"handler\", \"hibernateLazyInitializer\"})"</span>    out<span class="token operator">.</span>println <span class="token string">"public class $className  implements Serializable {"</span>    out<span class="token operator">.</span>println <span class="token string">""</span>    out<span class="token operator">.</span>println <span class="token string">"    private static final long serialVersionUID = 1L;"</span>    <span class="token comment" spellcheck="true">// 判断自增</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tableName <span class="token operator">+</span> <span class="token string">"_id"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span>colum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"id"</span><span class="token operator">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span>colum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token operator">.</span>println <span class="token string">"\t@Id"</span>        out<span class="token operator">.</span>println <span class="token string">"\t@GeneratedValue(strategy=GenerationType.IDENTITY)"</span>    <span class="token punctuation">}</span>    fields<span class="token operator">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">.</span>annos <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> out<span class="token operator">.</span>println <span class="token string">"  ${it.annos}"</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">.</span>colum <span class="token operator">!=</span> it<span class="token operator">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token operator">.</span>println <span class="token string">"\t@Column(name = \"${it.colum}\")"</span>        <span class="token punctuation">}</span>        out<span class="token operator">.</span>println <span class="token string">"\tprivate ${it.type} ${it.name};"</span>        out<span class="token operator">.</span>println <span class="token string">""</span>    <span class="token punctuation">}</span>    out<span class="token operator">.</span>println <span class="token string">"}"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">calcFields</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DasUtil<span class="token operator">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fields<span class="token punctuation">,</span> col <span class="token operator">-></span>        <span class="token keyword">def</span> spec <span class="token operator">=</span> Case<span class="token operator">.</span>LOWER<span class="token operator">.</span><span class="token function">apply</span><span class="token punctuation">(</span>col<span class="token operator">.</span><span class="token function">getDataType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">getSpecification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> typeStr <span class="token operator">=</span> typeMapping<span class="token operator">.</span>find <span class="token punctuation">{</span> p<span class="token punctuation">,</span> t <span class="token operator">-></span> p<span class="token operator">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">.</span>value        fields <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>                           name <span class="token punctuation">:</span> <span class="token function">javaName</span><span class="token punctuation">(</span>col<span class="token operator">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           colum<span class="token punctuation">:</span> col<span class="token operator">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           type <span class="token punctuation">:</span> typeStr<span class="token punctuation">,</span>                           annos<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">javaName</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> capitalize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> s <span class="token operator">=</span> str<span class="token operator">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">/(?&lt;=[^\p{IsLetter}])/</span><span class="token punctuation">)</span><span class="token operator">.</span>collect <span class="token punctuation">{</span> Case<span class="token operator">.</span>LOWER<span class="token operator">.</span><span class="token function">apply</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>            <span class="token operator">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">/[^\p{javaJavaIdentifierPart}]/</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">/_/</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    capitalize <span class="token operator">||</span> s<span class="token operator">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> s <span class="token punctuation">:</span> Case<span class="token operator">.</span>LOWER<span class="token operator">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre><code>    3. 选择你要生成的表 可用按shift多选 也可以按ctrl选中某几个 然后 Scripted Extensions -&gt; GeneratePojos.groovy</code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzU1MTgyNjkucG5n?x-oss-process=image/format,png" alt="image-20200713175518269"></p><ol start="4"><li><p>弹出的文件框中选中生成位置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzU2MzUwODEucG5n?x-oss-process=image/format,png" alt="image-20200713175635081"></p><ol start="5"><li><p>生成代码</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZC1pbWFnZXNzLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWcvaW1hZ2UtMjAyMDA3MTMxNzU4MjExNTEucG5n?x-oss-process=image/format,png" alt="image-20200713175821151"></p></li></ol></li></ol></li></ol></li></ol><p>​            </p><p>​            </p>]]></content>
      
      
      <categories>
          
          <category> SpringDataJpa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IntelliJIDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的五种IO模型</title>
      <link href="posts/20613.html"/>
      <url>posts/20613.html</url>
      
        <content type="html"><![CDATA[<h4 id="同步与异步-阻塞和非阻塞"><a href="#同步与异步-阻塞和非阻塞" class="headerlink" title="同步与异步 阻塞和非阻塞"></a>同步与异步 阻塞和非阻塞</h4><ol><li><p>同步与异步</p><p>同步与异步其实是指对CPU时间片的利用,主要是看请求发起方,对消息的获取是主动发起的还是被动通知的.</p><ul><li>如果是主动发起的,一直在等待应答结果(同步阻塞),或者可以处理其他事情,但要不断轮询查看发起的请求是否有应答结果(同步非阻塞)</li><li>如果是由服务方通知的也就是请求方发出请求后,要么一直等待通知(异步阻塞),要么先去干自己的事情(异步非阻塞),当事情处理完成后,服务方会主动通知请求方,它的请求已经完成,这就是异步,异步通知的方式有状态改变,消息通知,或者回调函数来完成,大多数时候采用的都是回调函数</li></ul></li><li><p>阻塞与非阻塞</p><p>阻塞与非阻塞通常是指的针对IO的操作,简单的说,就是我们调用了一个函数后,再等待这个函数返回结果之前,当前的线程是处于挂起状态,还是运行状态,如果是挂起状态,就意味着当前线程什么都不能干,就等着获取结果,这就是同步阻塞,如果仍然是运行状态,就意味着当前线程是可以继续处理其他任务的,就是非阻塞状态</p></li></ol><h4 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h4><ol><li>进程是系统进行资源分配和调度的一个独立单位,进程有独立的地址空间</li><li>线程 是进程的一个实体,是CPU调度和分配的基本单位,它是比进程更小的能独立运行的基本单位,</li><li>一个程序至少有一个进程,一个进程至少有一个线程</li></ol><p>线程执行开销小,但不利于资源的管理和保护,而进程正相反</p><h4 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h4><p>在网络环境下,通俗的讲,将IO分为两步: 第一步是等待 ; 第二步是数据搬迁.</p><p>如果想提高IO效率,主要就是降低等待时间,因此发展出来了五种IO模型,分别是阻塞IO,非阻塞IO,多路复用IO,信号驱动IO,异步IO</p><p>其中前四种都是同步IO,只有最后一种才是异步IO</p><ul><li><p>阻塞IO</p><p>用户进程向系统内核发送请求后,在等待系统内核处理数据的这段时间,线程处于挂起状态,这时当前线程什么都不能干,就等待结果.当数据准备好了后,系统内核,将数据拷贝到用户内存,然后返回结果,用户进程才解决阻塞状态,重新运行起来</p><table><thead><tr><th>特点</th><th>在IO执行的两个阶段(等待数据和拷贝数据)都被阻塞</th></tr></thead><tbody><tr><td>典型应用</td><td>阻塞Socket,  Java BIO</td></tr><tr><td>优点</td><td>进程阻塞挂起不消耗CPU资源,及时响应每个操作. 实现难度低,开发应用较容易,适合并发小的网络应用</td></tr><tr><td>缺点</td><td>不适合并发量大的应用,因为一个请求IO会阻塞进程  需要为每一个请求分配一个处理进程(线程)以及时间响应,系统开销大</td></tr></tbody></table></li></ul><ul><li><p>非阻塞IO</p><p>当用户进程发出请求后,如果内核中的数据还没准备好,那么他不会阻塞用户进程,而是立刻返回一个error,当用户进程判断结果是一个error时,他就知道数据还没准备好,于是它可以再次发送请求 ,就这样不停的轮询直到内核数据准备好了,并且再次收到了用户进程的请求,那么就会把数据拷贝到用户内存,然后返回</p><p>在等待系统内核处理数据的时候,非阻塞IO会不停的轮询查看发起的请求是否有应答结果,但可以去处理其他事情</p><table><thead><tr><th>特点</th><th>用户进程需要不断的主动询问内核(Kernel)数据准备好了没</th></tr></thead><tbody><tr><td>典型应用</td><td>Socket设置NON_BlOCK</td></tr><tr><td>优点</td><td>实现难度低,开发应用相对阻塞IO模型较难</td></tr><tr><td>缺点</td><td>进程轮询(重复)调用,消耗CPU的资源 适合并发量较小且不需要及时响应的网络应用开发</td></tr></tbody></table></li><li><p>多路复用IO模型</p><p>多个进程的IO可以注册到一个复用器(Selector)上,当用户进程调用该Selector,Selector会监听注册进来的所有IO,如果Selector监听所有的IO,在内核上缓冲区上都没有可读的数据时,select调用就会返回,而后select调用进程可以自己或者通知注册到Selector上面的IO再次发起读取IO,读取内核中准备好的数据,多个进程注册IO后,只有一个select调用进程被阻塞</p><table><thead><tr><th>特点</th><th>对于每一个Socket,一般都设置成非阻塞,但是整个用户的进程其实一直都是被阻塞的,只不过进程是被select函数阻塞,而不是被SocketIO阻塞</th></tr></thead><tbody><tr><td>典型引用</td><td>Java NIO , Nginx,</td></tr><tr><td>优点</td><td>专一进程解决多个进程IO的阻塞问题,性能好,Reactor模式 适合高并发服务应用开发,一个进程/线程响应多个请求</td></tr><tr><td>缺点</td><td>实现和开发应用难度较大</td></tr></tbody></table></li><li><p>信号驱动IO</p><p>用户进程预先告知内核,向内核注册一个信号处理函数,然后用户进程返回不阻塞,当内核数据就绪时会发送一个信号给进程,用户进程便在信号处理函数中调用IO读取数据</p><table><thead><tr><th>特点</th><th>并不符合异步IO的要求,只能算是伪异步,并且在实际中并不常用</th></tr></thead><tbody><tr><td>典型应用</td><td>应用场景较少</td></tr><tr><td>优点</td><td>应用场景少,不做总结</td></tr><tr><td>缺点</td><td>实现和开发应用难度大</td></tr></tbody></table></li><li><p>异步IO</p><p>用户进程发起aio_read操作后,给内核传递与read相同的描述符,缓冲区指针,缓冲区大小三个参数及文件偏移,告诉内核整个操作完成时如何通知,用户进程立刻就可以开始做其他的事情,从内核上看,当它收到一个aio_read之后,就会立刻返回,不会对用户进程造成阻塞,内核会等数据准备完成后,然后将数据拷贝到用户内存上,当这一切都完成之后,内核会给用户进程发送一个信号,告诉它aio_read操作完成</p><table><thead><tr><th>特点</th><th>真正实现了异步IO,是五种IO模型中唯一的异步模型</th></tr></thead><tbody><tr><td>典型应用</td><td>Java7 AIO ,高性能服务器应用</td></tr><tr><td>优点</td><td>不阻塞,数据一步到位,采用Proactor模式,非常适合高性能,高并发应用</td></tr><tr><td>缺点</td><td>需要操作系统的底层支持,Linux2.5内核首现,Linux2.6产品的内核标准特性,实现和开发应用难度大</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认证与授权(5)</title>
      <link href="posts/6631.html"/>
      <url>posts/6631.html</url>
      
        <content type="html"><![CDATA[<h1 id="5-微服务之前认证"><a href="#5-微服务之前认证" class="headerlink" title="5 微服务之前认证"></a>5 微服务之前认证</h1><p>前边章节已经实现了用户携带身份令牌和JWT令牌访问微服务，微服务获取jwt并完成授权。 </p><p>当微服务访问微服务，此时如果没有携带JWT则微服务会在授权时报错。</p><h2 id="5-1-将服务添加进授权配置"><a href="#5-1-将服务添加进授权配置" class="headerlink" title="5.1 将服务添加进授权配置"></a>5.1 将服务添加进授权配置</h2><ol><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加配置类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Administrator * @version 1.0 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> securedEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//激活方法上的PreAuthorize注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//公钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"publickey.txt"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义JwtTokenStore，使用jwt令牌</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TokenStore <span class="token function">tokenStore</span><span class="token punctuation">(</span>JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义JJwtAccessTokenConverter，使用jwt令牌</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAccessTokenConverter <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtAccessTokenConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setVerifierKey</span><span class="token punctuation">(</span><span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取非对称加密公钥 Key     * @return 公钥 Key     */</span>    <span class="token keyword">private</span> String <span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Http安全配置，对每个到达系统的http请求链接进行校验</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//所有请求必须认证通过</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//下边的路径放行</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">,</span> <span class="token string">"/swagger-resources/configuration/ui"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-resources"</span><span class="token punctuation">,</span><span class="token string">"/swagger-resources/configuration/security"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-ui.html"</span><span class="token punctuation">,</span><span class="token string">"/webjars/**"</span><span class="token punctuation">,</span><span class="token string">"/course/coursepic/list/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>把公钥放在resource目录下</p><pre class=" language-text"><code class="language-text">-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjTFzj+JN1ioYa/7tvZiQK7nYSzCpBpqN6BYo65GCHrHIl09/HObwtkMgXmjJNoa3tnYj9fajTJKwT20Yzl8hc95zeiZhg9yDRA5DQyom1afI6sURQ4RsxBSrKRjAQqRTCdaBwnkCng0+eVYq5xPI80nqAQIylqk1DWq6R4l91jIk1l6ceA6cbILXSXkZa1RGfsHmPjqM0TG8zkzfD1xe/yyCYgFlENlfw1tlxff/l7cuYV42rGOCqDGMsAbGrz4J50nEXPNvxGAKp21PrDQSikI+YtKlyA9g/4/mV9kSbOuJXsAGuE+ErvFVmCXCzl+JPiGXXaY/lSUVC32VnfV1UQIDAQAB-----END PUBLIC KEY-----</code></pre><p> 微服务直接调用需要携带jwt令牌</p></li></ol><h2 id="5-2-Feign拦截器"><a href="#5-2-Feign拦截器" class="headerlink" title="5.2 Feign拦截器"></a>5.2 Feign拦截器</h2><ol><li><p>定义Feign拦截器</p><p>微服务之前使用feign进行远程调用,采用feign拦截器实现远程调用携带jwt</p><p>在common工程添加依赖</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在Common工程下定义拦截器如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**Feign拦截器 * @author 卫风 * @date 2020/6/10 11:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientInterceptor</span>  <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Called for every request. Add data using methods on the supplied {@link RequestTemplate}.     *     * @param template     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>RequestTemplate template<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletRequestAttributes requestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestAttributes <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            HttpServletRequest request <span class="token operator">=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出当前请求的header,找到jwt令牌</span>            Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>headerNames<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String headerName <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String headerValue <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>headerName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将header向下传递</span>                    template<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>headerName<span class="token punctuation">,</span> headerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在需要用的微服务定义bean</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FeignClientInterceptor <span class="token function">getFeignClientInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FeignClientInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认证与授权(4)</title>
      <link href="posts/35302.html"/>
      <url>posts/35302.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-用户授权业务"><a href="#4-用户授权业务" class="headerlink" title="4 用户授权业务"></a>4 用户授权业务</h1><p>用户授权的业务流程如下:</p><p>​    <img src="https://gitee.com/weifengxiaoye/images/raw/master/mdimage-20200609170450482.png" alt="image-20200609170450482"></p><p>业务流程如下:</p><ol><li><p><strong>用户认证通过,认证服务像浏览器cookie写入token(身份令牌)</strong></p></li><li><p><strong>前端携带token请求用户中心服务获取jwt令牌</strong></p><p>前端获取到jwt令牌解析,并存储在sessionStorage</p></li><li><p><strong>前端携带cookie中的身份令牌及jwt令牌访问资源服务</strong></p><p>前端请求资源服务需要携带两个token 一个是cookie中的身份令牌,一个是http htader中的jwt</p><p>前端请求资源服务在http header上添加jwt请求资源</p></li><li><p><strong>网关校验token的合法性</strong></p><p>用户请求必须携带身份令牌和jwt令牌</p><p>网关校验redis中的user_token的有效期,已过期则要求用户重新登陆</p></li><li><p><strong>资源服务校验jwt令牌的合法性并进行授权</strong></p><p>资源服务校验jwt令牌,完成授权,拥有权限的方法正常执行,没有权限的方法拒绝访问</p></li></ol><h2 id="4-1-方法授权"><a href="#4-1-方法授权" class="headerlink" title="4.1 方法授权"></a>4.1 方法授权</h2><ol><li><p>需求分析</p><p>方法授权要完成的是资源服务根据jwt令牌完成对方法的授权,具体流程如下</p><ul><li><p>生成jwt令牌时在令牌中写入用户所拥有的权限</p><p>我们给每个权限起个名字,例如某个用户拥有如下权限:</p><p>course_find_list : 课程查询</p><p>course_pic_list : 课程图片查询</p></li></ul></li><li><p>在资源服务方法上添加注解 PreAuthOrize ,并指定此方法所需要的权限</p><p>例如下边是课程管理接口方法的授权配置,它就表示要执行这个方法需要拥有course_find_list权限</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/coursebase/list/{page}/{size}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('course_find_list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> QueryResponseResult<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> <span class="token function">findCourseList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> CourseListRequest courseListRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> courseService<span class="token punctuation">.</span><span class="token function">findCourseList</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">,</span>courseListRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>当请求有权限的方法时正常访问</p></li><li><p>当请求没有权限的方法时则拒绝访问</p></li></ol><h2 id="4-2-方法授权实现"><a href="#4-2-方法授权实现" class="headerlink" title="4.2 方法授权实现"></a>4.2 方法授权实现</h2><h3 id="4-2-1-资源服务添加授权控制"><a href="#4-2-1-资源服务添加授权控制" class="headerlink" title="4.2.1 资源服务添加授权控制"></a>4.2.1 资源服务添加授权控制</h3><ol><li>要想在资源服务使用方法授权,首先在资源服务配置授权控制</li><li>添加spring-cloud-starter-oauth2依赖</li><li>拷贝授权配置类ResourceServerConfig</li><li>拷贝公钥</li></ol><h3 id="4-2-2-方法上添加注解"><a href="#4-2-2-方法上添加注解" class="headerlink" title="4.2.2 方法上添加注解"></a>4.2.2 方法上添加注解</h3><p>通常情况下,程序员编写在资源服务的controller方法时会使用注解指定此方法的权限标识</p><ol><li><p>查询课程列表方法</p><p>指定查询课程列表方法需要拥有course_find_list权限</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/coursebase/list/{page}/{size}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('course_find_list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> QueryResponseResult<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> <span class="token function">findCourseList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> CourseListRequest courseListRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> courseService<span class="token punctuation">.</span><span class="token function">findCourseList</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">,</span>courseListRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在资源服务的ResourceServerConfig类似加注解,激活方法上添加注解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Administrator * @version 1.0 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> securedEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//激活方法上的PreAuthorize注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//公钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"publickey.txt"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义JwtTokenStore，使用jwt令牌</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TokenStore <span class="token function">tokenStore</span><span class="token punctuation">(</span>JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义JJwtAccessTokenConverter，使用jwt令牌</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAccessTokenConverter <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtAccessTokenConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setVerifierKey</span><span class="token punctuation">(</span><span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取非对称加密公钥 Key     * @return 公钥 Key     */</span>    <span class="token keyword">private</span> String <span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Http安全配置，对每个到达系统的http请求链接进行校验</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//所有请求必须认证通过</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//下边的路径放行</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">,</span> <span class="token string">"/swagger-resources/configuration/ui"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-resources"</span><span class="token punctuation">,</span><span class="token string">"/swagger-resources/configuration/security"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-ui.html"</span><span class="token punctuation">,</span><span class="token string">"/webjars/**"</span><span class="token punctuation">,</span><span class="token string">"/course/coursepic/list/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/mdimage-20200609190159123.png" alt="image-20200609190159123"></p></li></ol><h2 id="4-3-动态查询用户权限"><a href="#4-3-动态查询用户权限" class="headerlink" title="4.3 动态查询用户权限"></a>4.3 动态查询用户权限</h2><h3 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1 需求分析"></a>4.3.1 需求分析</h3><p>截至目前在测试授权时使用的权限数据时静态数据,正常情况的流程是:</p><ol><li><p>管理员给用户分配权限,权限数据写道数据库中</p></li><li><p>认证服务在进行用户认证是从数据库读取用户的权限数据(动态数据)</p></li></ol><h3 id="4-3-2-权限数据模型"><a href="#4-3-2-权限数据模型" class="headerlink" title="4.3.2 权限数据模型"></a>4.3.2 权限数据模型</h3><p>打卡xc_user数据库,找到下边的表</p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/image-20200609234624244.png" alt="image-20200609234624244"></p><p>这五张表是标准的权限模型</p><p>xc_user: 用户表,存储了系统用户信息,用户类型包括: 学生,老师,管理员</p><p>xc_role: 角色表 存储了系统的角色信息,学生,老师,教学管理员,系统管理员等</p><p>xc_user_role: 用户角色表,一个用户可拥有多个角色,一个角色可被多个用户所拥有</p><p>xc_menu: 模块表 ,记录了菜单及菜单下的权限</p><p>xc_permission: 角色权限表,一个角色可拥有多个权限,一个权限可被多个角色所拥有</p><hr><p>给用户分配权限 :</p><p>向已拥有角色分配权限 步骤： </p><p>确定用户的id </p><p>确定权限的id </p><p>确定用户的角色 </p><p>向角色权限表添加记录 </p><hr><p>添加角色给用户分配权限 步骤  :</p><p>确定用户的id </p><p>确定权限的id </p><p>添加角色 </p><p>向角色权限表添加记录 </p><p>向用户角色关系表添加记录 </p><h3 id="4-3-3-用户中心查询用户权限"><a href="#4-3-3-用户中心查询用户权限" class="headerlink" title="4.3.3 用户中心查询用户权限"></a>4.3.3 用户中心查询用户权限</h3><p>认证服务请求用户中心查询用户信息，用户需要将用户基本信息和用户权限一同返回给认证服务。 </p><p>本小节实现用户查询查询用户权限，并将用户权限信息添加到的用户信息中返回给认证服务。 </p><p>以上需求需要修改如下接口： </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getuserext"</span><span class="token punctuation">)</span><span class="token keyword">public</span> XcUserExt <span class="token function">getUserExt</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserExt</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li><p>定义DAO</p><p>在用户中心服务中编写DAO,实现根据用户id查询权限</p><ol><li><p>定义XcMenuMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/9 12:10 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XcMenuMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据用户id查询用户的权限     * @param userId     * @return     */</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>XcMenu<span class="token operator">></span> <span class="token function">selectPermissionByUserId</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>XcMenuMapper.xml</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xuecheng.ucenter.dao.XcMenuMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol><pre><code>   &lt;select id="selectPermissionByUserId" resultType="com.xuecheng.framework.domain.ucenter.XcMenu" parameterType="java.lang.String"&gt;       SELECT       id,       CODE,       p_id pId,       menu_name menuName,       url,       is_menu isMenu,       LEVEL,       sort,       STATUS,       icon,       create_time createTime,       update_time updateTiem       FROM       xc_menu       WHERE id IN         (SELECT           menu_id         FROM           xc_permission         WHERE role_id IN           (SELECT             role_id           FROM             xc_user_role           WHERE user_id = #{userId}))   &lt;/select&gt;</code></pre>      ```<ol start="2"><li><p>Service</p><p>修改UserService的getUserExt方法,查询用户权限</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据账户查询用户信息     * @param username     * @return     */</span>    <span class="token keyword">public</span> XcUserExt <span class="token function">getUserExt</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据账户查询xcUser信息</span>         XcUser xcUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findXcUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xcUser <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//根据用户id查询用户所属公司id</span>        XcCompanyUser xcCompanyUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xcCompanyUserRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>xcUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询用户的所有权限</span>        List<span class="token operator">&lt;</span>XcMenu<span class="token operator">></span> xcMenus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xcMenuMapper<span class="token punctuation">.</span><span class="token function">selectPermissionByUserId</span><span class="token punctuation">(</span>xcUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去掉用户的公司id</span>        String companyId <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xcCompanyUser<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             companyId <span class="token operator">=</span> xcCompanyUser<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        XcUserExt xcUserExt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XcUserExt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>xcUser<span class="token punctuation">,</span>xcUserExt<span class="token punctuation">)</span><span class="token punctuation">;</span>        xcUserExt<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>companyId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置权限</span>        xcUserExt<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>xcMenus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xcUserExt<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>修改认证服务查询用户权限</p><p>修改认证服务的UserDetailServiceImpl,查询用户的权限,并拼接权限串,讲原理的硬编码权限代码删除</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出身份，如果身份为空说明没有认证</span>        Authentication authentication <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有认证统一采用httpbasic认证，httpbasic中存储了client_id和client_secret，开始认证client_id和client_secret</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>authentication<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ClientDetails clientDetails <span class="token operator">=</span> clientDetailsService<span class="token punctuation">.</span><span class="token function">loadClientByClientId</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>clientDetails<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//密码</span>                String clientSecret <span class="token operator">=</span> clientDetails<span class="token punctuation">.</span><span class="token function">getClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>clientSecret<span class="token punctuation">,</span>AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        XcUserExt userExt <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">getUserExt</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userExt <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//表示用户不存在</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        userext.setUsername("itcast");</span><span class="token comment" spellcheck="true">//        userext.setPassword(new BCryptPasswordEncoder().encode("123"));</span><span class="token comment" spellcheck="true">//        userExt.setPermissions(new ArrayList&lt;XcMenu>());</span>        <span class="token comment" spellcheck="true">//取出正确密码（hash值）</span>        String password <span class="token operator">=</span> userExt<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里暂时使用静态密码</span><span class="token comment" spellcheck="true">//       String password ="123";</span>        <span class="token comment" spellcheck="true">//用户权限，这里暂时使用静态数据，最终会从数据库读取</span>        <span class="token comment" spellcheck="true">//从数据库获取权限</span>        List<span class="token operator">&lt;</span>XcMenu<span class="token operator">></span> permissions <span class="token operator">=</span> userExt<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>permissions <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> user_permission <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permissions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span> user_permission<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        user_permission.add("course_get_list");</span><span class="token comment" spellcheck="true">//        user_permission.add("course_get_baseinfo");</span><span class="token comment" spellcheck="true">//        user_permission.add("course_get_baseinfo");</span><span class="token comment" spellcheck="true">//        user_permission.add("course_find_pic");</span>        String user_permission_string  <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>user_permission<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserJwt userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserJwt</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>                password<span class="token punctuation">,</span>                AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span>user_permission_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUtype</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户类型</span>        userDetails<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所属企业</span>        userDetails<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名称</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUserpic</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUserpic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户头像</span>       <span class="token comment" spellcheck="true">/* UserDetails userDetails = new org.springframework.security.core.userdetails.User(username,                password,                AuthorityUtils.commaSeparatedStringToAuthorityList(""));*/</span><span class="token comment" spellcheck="true">//                AuthorityUtils.createAuthorityList("course_get_baseinfo","course_get_list"));</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="4-3-4-细粒度授权"><a href="#4-3-4-细粒度授权" class="headerlink" title="4.3.4 细粒度授权"></a>4.3.4 细粒度授权</h3><p>   什么是细粒度授权？ </p><p>   细粒度授权也叫数据范围授权，即不同的用户所拥有的操作权限相同，但是能够操作的数据范围是不一样的。一个 </p><p>   例子：用户A和用户B都是教学机构，他们都拥有“我的课程”权限，但是两个用户所查询到的数据是不一样的。</p><p>本项目有哪些细粒度授权？ </p><p>比如： </p><p>我的课程，教学机构只允许查询本教学机构下的课程信息。 </p><p>我的选课，学生只允许查询自己所选课。 </p><p>如何实现细粒度授权？ </p><p>细粒度授权涉及到不同的业务逻辑，通常在service层实现，根据不同的用户进行校验，根据不同的参数查询不同的 </p><p>数据或操作不同的数据。 </p><h4 id="4-3-4-1-需求分析"><a href="#4-3-4-1-需求分析" class="headerlink" title="4.3.4.1 需求分析"></a>4.3.4.1 需求分析</h4><p>1、我的课程查询，细粒度授权过程如下： </p><p>1）获取当前登录的用户Id </p><p>2）得到用户所属教育机构的Id </p><p>3）查询该教学机构下的课程信息 </p><p>最终实现了用户只允许查询自己机构的课程信息。</p><p>2、修改课程管理服务“我的课程”的功能，根据公司Id查询课程，思路如下： </p><p>1）修改Dao，支持根据公司Id 查询课程。 </p><p>2）修改Service，将公司Id传入Dao。 </p><p>3）修改Controller，获取当前用户的公司Id，传给Service。</p><p>3、数据模型分析如下： </p><p>1）课程表 </p><p>在xc_course数据库的course_base 表中添加company_id字段，来表示此课程的归属 </p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/image-20200609234538615.png" alt="image-20200609234538615"></p><p>2）用户企业表 </p><p>在xc_user数据库的xc_company_user表中记录了用户的归属公司信息 </p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/image-20200609234516907.png" alt="image-20200609234516907"></p><p>通过xc_company_user表可得到用户的所属公司Id。</p><p>如何查询某个用户的课程？ </p><p>1、确定用户的Id </p><p>2、根据用户的Id查询用户归属的公司。 </p><p>3、根据公司Id查询该公司下的课程信息 </p><p><strong>Api</strong></p><p>定义我的课程查询接口如下:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 查询我的课程列表     * @param page 页码     * @param size 每页显示数量     * @param courseListRequest     * @return     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询我的课程列表"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> QueryResponseResult<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> <span class="token function">findCourseList</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> CourseListRequest courseListRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>修改dao</strong></p><p>修改CourseMapper.xml的查询课程列表,添加companyId条件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xuecheng.manage_course.dao.CourseMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findCourseBaseById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span>            <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xuecheng.framework.domain.course.CourseBase<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from course_base where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findCourseListPage<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xuecheng.framework.domain.course.ext.CourseInfo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xuecheng.framework.domain.course.request.CourseListRequest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            SELECT               course_base.*,              (SELECT                 pic               FROM                course_pic               WHERE courseid = course_base.id) pic             FROM              course_base             WHERE company_id = #{companyId}     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p><strong>修改service</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 分页查找     *     *     * @param id     * @param page     * @param size     * @param courseListRequest     * @return     */</span>    <span class="token keyword">public</span> QueryResponseResult<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> <span class="token function">findCourseList</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> CourseListRequest courseListRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>courseListRequest <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            courseListRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CourseListRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        courseListRequest<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置分页参数</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分页查询</span>        Page<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> courseListPage <span class="token operator">=</span> courseMapper<span class="token punctuation">.</span><span class="token function">findCourseListPage</span><span class="token punctuation">(</span>courseListRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到查询列表</span>        List<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> result <span class="token operator">=</span> courseListPage<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//总记录数</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> courseListPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询结果集</span>        QueryResult<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> courseInfoQueryResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        courseInfoQueryResult<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>        courseInfoQueryResult<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryResponseResult</span><span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> courseInfoQueryResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>修改Controller</strong></p><p>修改CourseController的findCourseList,向Servic传入companyId</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/coursebase/list/{page}/{size}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    @PreAuthorize("hasAuthority('course_find_list')")</span>    <span class="token keyword">public</span> QueryResponseResult<span class="token operator">&lt;</span>CourseInfo<span class="token operator">></span> <span class="token function">findCourseList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> CourseListRequest courseListRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用工具类取出用户信息</span>        XcOauth2Util xcOauth2Util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XcOauth2Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XcOauth2Util<span class="token punctuation">.</span>UserJwt userJwt <span class="token operator">=</span> xcOauth2Util<span class="token punctuation">.</span><span class="token function">getUserJwtFromHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userJwt <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>UNAUTHENTICATED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当前用户的id</span>        String id <span class="token operator">=</span> userJwt<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> courseService<span class="token punctuation">.</span><span class="token function">findCourseList</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>page<span class="token punctuation">,</span>size<span class="token punctuation">,</span>courseListRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>获取当前用户信息</strong></p><p>要想实现只查询自己的课程信息则需要获取当前用户所属的企业id。 </p><p>1、认证服务在用户认证通过将用户所属公司id等信息存储到jwt令牌中。 </p><p>2、用户请求到达资源服务后，资源服务需要取出header中的jwt令牌，并解析出用户信息。 </p><p>Jwt令牌包括企业id</p><p>资源服务在授权时需要用到用户所属企业ID，需要实现认证服务生成的JWT令牌中包括用户所属公司id信息。 </p><p>查看认证服务UserDetailServiceImpl代码如下：</p><pre class=" language-java"><code class="language-java">        UserJwt userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserJwt</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>                password<span class="token punctuation">,</span>                AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span>user_permission_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUtype</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户类型</span>        userDetails<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所属企业</span>        userDetails<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名称</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUserpic</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUserpic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户头像</span>       <span class="token comment" spellcheck="true">/* UserDetails userDetails = new org.springframework.security.core.userdetails.User(username,                password,                AuthorityUtils.commaSeparatedStringToAuthorityList(""));*/</span><span class="token comment" spellcheck="true">//                AuthorityUtils.createAuthorityList("course_get_baseinfo","course_get_list"));</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span></code></pre><p>通过上边代码的分析得知，认证服务调用XcUserExt userext = userClient.getUserext(username);获取用户信息， </p><p>将userext 中的信息存储到jwt令牌中，在userext 对象中已经包括了companyId公司ID等信息。 </p><p><strong>jwt解析工具类</strong></p><p>在Oauth2Util工具类中,从header中获取jwt令牌,并解析jwt令牌内容</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by mrt on 2018/5/25. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Oauth2Util</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> <span class="token function">getJwtClaimsFromHeader</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//取出头信息</span>        String authorization <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span> <span class="token operator">||</span> authorization<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Bearer"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从Bearer 后边开始取出token</span>        String token <span class="token operator">=</span> authorization<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解析jwt</span>            Jwt decode <span class="token operator">=</span> JwtHelper<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//得到 jwt中的用户信息</span>            String claims <span class="token operator">=</span> decode<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将jwt转为Map</span>            map <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>在XcOauth2Util工具类中,将解析的jwt内容封装成UserJwt对象返回</li></ol><pre class=" language-Java"><code class="language-Java">/** * Created by mrt on 2018/5/25. */public class XcOauth2Util {    public UserJwt getUserJwtFromHeader(HttpServletRequest request){        Map<String, String> jwtClaims = Oauth2Util.getJwtClaimsFromHeader(request);        if(jwtClaims == null || StringUtils.isEmpty(jwtClaims.get("id"))){            return null;        }        UserJwt userJwt = new UserJwt();        userJwt.setId(jwtClaims.get("id"));        userJwt.setName(jwtClaims.get("name"));        userJwt.setCompanyId(jwtClaims.get("companyId"));        userJwt.setUtype(jwtClaims.get("utype"));        userJwt.setUserpic(jwtClaims.get("userpic"));        return userJwt;    }    @Data    public class UserJwt{        private String id;        private String name;        private String userpic;        private String utype;        private String companyId;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认证与授权(3)</title>
      <link href="posts/47588.html"/>
      <url>posts/47588.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-Zuul网关"><a href="#3-Zuul网关" class="headerlink" title="3 Zuul网关"></a>3 Zuul网关</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><p>网关的作用相当与一个过滤器,拦截器,它可以拦截多个系统的请求</p><h2 id="3-2-Zuul介绍"><a href="#3-2-Zuul介绍" class="headerlink" title="3.2 Zuul介绍"></a>3.2 Zuul介绍</h2><p>什么事Zuul?</p><p>Spring Cloud Zuul 是整合Netfilx公司的Zuul开源项目实现的微服务网关,它实现了请求路由,负载均衡,校验过滤等功能</p><p>官方：<a href="https://github.com/Netflflix/zuul">https://github.com/Netflflix/zuul</a> </p><p>什么是网关?</p><p>服务网关是在微服务前边设置一道屏障,请求先到服务网关,网关会对请求进行过滤,校验路由等处理,有了服务网关可以提高微服务的安全性,网关校验请求的合法性,请求不合法将被拦截,拒绝访问</p><p>Zull与Nginx怎么配合使用?</p><p>Zuul与Nginx在实际项目中需要配合使用,如下图,Nginx的作用是反向代理,负载均衡,Zuul的作用的保障微服务的安全访问,拦截微服务请求,校验合法性及负载均衡.</p><p><img src="https://cdn.jsdelivr.net/gh/1783cwf/caowei-images//mdimage-20200609080349474.png" alt="image-20200609080349474"></p><h2 id="3-3搭建网关工程"><a href="#3-3搭建网关工程" class="headerlink" title="3.3搭建网关工程"></a>3.3搭建网关工程</h2><h3 id="3-3-1启动类配置"><a href="#3-3-1启动类配置" class="headerlink" title="3.3.1启动类配置"></a>3.3.1启动类配置</h3><p>注意在启动类上使用@EnableZuulProxy注解标识此工程为Zuul网关,启动类代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Administrator * @version 1.0 * @create 2018-07-17 12:03 **/</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableZuulProxy</span><span class="token comment" spellcheck="true">//此工程是一个zuul网关</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GatewayApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-2路由配置"><a href="#3-3-2路由配置" class="headerlink" title="3.3.2路由配置"></a>3.3.2路由配置</h3><ol><li><p>Zuul网关具有代理的功能,根据请求的url转发到微服务,如下图:</p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/images/mdimage-20200609081241751.png" alt="image-20200609081241751"></p><p>客户端请求网关/api/learning,通过路由转发到/learning</p><p>客户端请求网关/api/course 通过路由转发到/course</p></li><li><p>在appcation.yml中的配置</p><pre class=" language-yml"><code class="language-yml">server:  port: 50201  servlet:    context-path: /apispring:  application:    name: xc-govern-gateway  redis:    host: ${REDIS_HOST:two}    port: ${REDIS_PORT:6379}    timeout: 5000 #连接超时 毫秒    jedis:      pool:        maxActive: 3        maxIdle: 3        minIdle: 1        maxWait: -1 #连接池最大等行时间 -1没有限制    password: 123456eureka:  client:    registerWithEureka: true #服务注册开关    fetchRegistry: true #服务发现开关    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔      defaultZone: ${EUREKA_SERVER:http://localhost:50101/eureka/}  instance:    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中    ip-address: localhost    instance-id: ${spring.application.name}:${server.port} #指定实例idribbon:  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器  MaxAutoRetriesNextServer: 3 #切换实例的重试次数  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false  ConnectTimeout: 5000  #请求连接的超时时间  ReadTimeout: 6000 #请求处理的超时时间zuul:  routes:    manage-course:      path: /course/**      serviceId: xc-service-manage-course #微服务名称,网关会从eureka中获取该服务名称下的服务实例的地址      #url: http://localhost:31200 #也可指定url      strip‐prefix: false #true：代理转发时去掉前缀，false:代理转发时不去掉前缀      sensitiveHeaders: #默认zuul会屏蔽cookie，cookie不会传到下游服务，这里设置为空则取消默认的黑名 单，如果设置了具体的头信息则不会传到下游服务      # ignoredHeaders: Authorization    xc-service-learning:  #路由名称，名称任意，保持所有路由名称唯一      path: /learning/**      serviceId: xc-service-learning #指定服务id，从Eureka中找到服务的ip和端口      strip-prefix: false      sensitiveHeaders:    manage-cms:      path: /cms/**      serviceId: xc-service-manage-cms      strip-prefix: false      sensitiveHeaders:    manage-sys:      path: /sys/**      serviceId: xc-service-manage-cms      strip-prefix: false      sensitiveHeaders:    service-ucenter:      path: /ucenter/**      serviceId: xc-service-ucenter      sensitiveHeaders:      strip-prefix: false    xc-service-manage-order:      path: /order/**      serviceId: xc-service-manage-order      sensitiveHeaders:      strip-prefix: false</code></pre><p>serviceId：推荐使用serviceId，zuul会从Eureka中找到服务id对应的ip和端口。</p></li></ol><p>   strip-prefifix: false #true：代理转发时去掉前缀，false:代理转发时不去掉前缀，例如，为true请 </p><p>   求/course/coursebase/get/..，代理转发到/coursebase/get/，如果为false则代理转发到/course/coursebase/get </p><p>   sensitiveHeaders：敏感头设置，默认会过虑掉cookie，这里设置为空表示不过虑</p><p>   ignoredHeaders：可以设置过虑的头信息，默认为空表示不过虑任何头</p><p>   <a href="http://localhost:50201/api%E6%98%AF%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80%EF%BC%8C%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%88%B0xc-service-manage-course%E6%9C%8D%E5%8A%A1%E3%80%82">http://localhost:50201/api是网关地址，通过路由转发到xc-service-manage-course服务。</a> </p><p>   由于课程管理已经添加了授课拦截，这里为了测试网关功能暂时将“/course/coursepic/list”url排除认证。 </p><p>   在课程管理服务的 ResourceServerConfifig类中添加”/course/coursepic/list/*”,代码如下： </p><h3 id="3-3-3过滤器配置"><a href="#3-3-3过滤器配置" class="headerlink" title="3.3.3过滤器配置"></a>3.3.3过滤器配置</h3><p>Zuul的核心功能就是过滤器,通过过滤器实现请求过滤,身份校验等</p><p><strong>ZuulFilter</strong></p><p>自定义过滤器需要继承ZuulFilter,ZuulFilter是一个抽象类,需要覆盖它的四个方法,如下:</p><ol><li><p>shouldFilter :  返回一个Bookean值,判断该过滤器是否需要执行,返回true表示要执行此过滤器,否则不执行</p></li><li><p>run : 过滤器的业务逻辑</p></li><li><p>filterType : 返回字符串代表过滤器的类型 如下</p><p>pre : 请求在被路由之前执行</p><p>routing : 在路由请求时调用</p><p>post : 在routing 和error过滤器之后调用</p><p>error : 处理请求时发生错误调用</p></li><li><p>filterOrder : 此方法返回整型数值,通过此数值来定义过滤器的执行顺序,数字越小优先级越高</p></li></ol><h3 id="3-3-4身份校验"><a href="#3-3-4身份校验" class="headerlink" title="3.3.4身份校验"></a>3.3.4身份校验</h3><p><strong>需求分析</strong></p><ol><li>从cookie查询用户身份令牌是否存在,不存在则拒绝访问</li><li>从http header查询jwt令牌是否存在,不存在则拒绝访问</li><li>从Redis查询user_token令牌是否过期,过期则拒绝访问</li></ol><p><strong>代码实现</strong></p><ol><li><p>AuthService</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/8 21:33 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从头取出jwt令牌     * @param request     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getJwtFromHeader</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        String authorization <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authorization<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Bearer "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> authorization<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从cookie中取出令牌     * @param request     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getTokenFromCookie</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> cookieMap <span class="token operator">=</span> CookieUtil<span class="token punctuation">.</span><span class="token function">readCookie</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String access_token <span class="token operator">=</span> cookieMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> access_token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询令牌的有效期     * @param access_token     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String access_token<span class="token punctuation">)</span><span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token string">"user_token:"</span> <span class="token operator">+</span> access_token<span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明: 由于令牌存储的时采用String 序列化策略,所以这里用StringRedisTemplate来查询,使用RedisTemplate无法完成查询</p><p>2定义LoginFilter</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/8 11:10 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    AuthService service<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 过滤器类型     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * pre : 请求在路由之前执行         *         * routing: 在路由请求时调用         *         * post : 在routing和error过滤器之后调用         *         * error: 处理请求时发生错误调用         *         */</span>        <span class="token keyword">return</span> <span class="token string">"pre"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 过滤器的序号 ,越小越被优先执行     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回true表示要执行此过滤器</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 过滤器的内容     * 功能 : 过滤所有的请求,判断头部信息是否有Authorization.如果没有则拒绝访问,否则转发到微服务     * @return     * @throws ZuulException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ZuulException <span class="token punctuation">{</span>        RequestContext requestContext <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到request</span>        HttpServletRequest request <span class="token operator">=</span> requestContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到Authorization头</span>        String authorization <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到response</span>        String tokenFromCookie <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getTokenFromCookie</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tokenFromCookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拒绝访问</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">access_denied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从header中取</span>        String jwtFromHeader <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getJwtFromHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>jwtFromHeader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">access_denied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//从redis中取得jwt的过期时间</span>        <span class="token keyword">long</span> expire <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>tokenFromCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expire <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">access_denied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><pre><code>   private void access_denied(){       RequestContext requestContext = RequestContext.getCurrentContext();       //得到request       HttpServletRequest request = requestContext.getRequest();       HttpServletResponse response = requestContext.getResponse();       //拒绝访问       requestContext.setSendZuulResponse(false);       //设置响应的代码       requestContext.setResponseStatusCode(200);       //构建响应信息       ResponseResult responseResult = new ResponseResult(CommonCode.UNAUTHENTICATED);       String string = JSON.toJSONString(responseResult);       requestContext.setResponseBody(string);       //转成json 设置contentType       response.setContentType("application/json;charset=utf-8");   }</code></pre><p>   }</p><pre><code>![image-20200609084450495](https://gitee.com/weifengxiaoye/images/raw/master/images/mdimage-20200609084450495.png)### 3.3.5测试1. 配置代理通过nginx转发到gateway,在 www.xuecheng.com虚拟主机来配置```conf#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events { worker_connections  1024;}http { include       mime.types; default_type  application/octet-stream; sendfile        on; keepalive_timeout  65; #cms页面预览  upstream cms_server_pool{      server 127.0.0.1:31001 weight=10;  }  #静态资源服务      upstream static_server_pool{     server 127.0.0.1:91 weight=10; }  #前端动态门户 upstream dynamic_portal_server_pool{     server 127.0.0.1:10000 weight=10; } #后台搜索（公开api） upstream search_server_pool{     server 127.0.0.1:40100 weight=10; } #认证 upstream auth_server_pool{     server 127.0.0.1:40400 weight=10; } #微服务网关 upstream api_server_pool {     server 127.0.0.1:50201 weight=10; } server{ listen       80; server_name  www.xuecheng.com; ssi on; ssi_silent_errors on; location / {     alias   G:/xcEdu/xcEduUT01/xc-ui-pc-static-portal/;     index  index.html; } #静态资源，包括系统所需要的图片，js、css等静态资源 location /static/img/ {     alias G:/xcEdu/xcEduUT01/xc-ui-pc-static-portal/img/; } location /static/css/ {     alias G:/xcEdu/xcEduUT01/xc-ui-pc-static-portal/css/; } location /static/js/ {     alias G:/xcEdu/xcEduUT01/xc-ui-pc-static-portal/js/; } location /static/plugins/ {     alias G:/xcEdu/xcEduUT01/xc-ui-pc-static-portal/plugins/;     add_header Access‐Control‐Allow‐Origin http://ucenter.xuecheng.com;     add_header Access‐Control‐Allow‐Credentials true;     add_header Access‐Control‐Allow‐Methods GET; } location /static/company/{     proxy_pass http://static_server_pool;     }     location /static/teacher/ {     proxy_pass http://static_server_pool;     }     location /static/stat/ {     proxy_pass http://static_server_pool;     }     location /course/detail/{     proxy_pass http://static_server_pool;     } #页面预览 location /cms/preview/ { proxy_pass http://cms_server_pool/cms/preview/; } #前端门户课程搜索 location ^~ /course/search {     proxy_pass http://dynamic_portal_server_pool; } #后端搜索服务 location /openapi/search/ {     proxy_pass http://search_server_pool/search/; } #分类信息 location /static/category/ {     proxy_pass http://static_server_pool; } #开发环境webpack定时加载此文件 location ^~ /__webpack_hmr {     proxy_pass http://dynamic_portal_server_pool/__webpack_hmr; } #开发环境nuxt访问_nuxt location ^~ /_nuxt/ {     proxy_pass http://dynamic_portal_server_pool/_nuxt/; } #微服务网关 location  /api {      proxy_pass http://api_server_pool; }} server{ listen       91; server_name  localhost; #公司信息 location /static/company/ {     alias   G:/xcEdu/static/company/; } #老师信息 location /static/teacher/ { alias   G:/xcEdu/static/teacher/; } #统计信息 location /static/stat/ { alias   G:/xcEdu/static/stat/; } location /course/detail/ { alias   G:/xcEdu/static/course/detail/; } #分类信息 location /static/category/ {  alias    G:/xcEdu/static/category/; }}#    server{#    listen       80;#    server_name  ucenter.xuecheng.com;##    #认证#    location ^~ /openapi/auth/ {#    proxy_pass http://auth_server_pool/auth/;#    }##    #} # map $http_origin $origin_list{#    default http:www.xuecheng.com;#    "~http://www.xuecheng.com" http://www.xuecheng.com;#    "~http://ucenter.xuecheng.com" http://ucenter.xuecheng.com;#            #} }</code></pre><pre class=" language-conf"><code class="language-conf">#前端教学管理 upstream teacher_server_pool{ server 127.0.0.1:12000 weight=10; }#文件服务 upstream filesystem_server_pool{ server 127.0.0.1:22100 weight=10; }#媒资服务 upstream media_server_pool{ server 127.0.0.1:31400 weight=10; }#学成网教学管理中心 server { listen 80; server_name teacher.xuecheng.com; #个人中心 location / { proxy_pass http://teacher_server_pool; }location /api { proxy_pass http://api_server_pool; }location /filesystem { proxy_pass http://filesystem_server_pool; }#媒资管理 location ^~ /api/media/ { proxy_pass http://media_server_pool/media/; }#认证 location ^~ /openapi/auth/ { proxy_pass http://auth_server_pool/auth/; } }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认证与授权(2)</title>
      <link href="posts/10725.html"/>
      <url>posts/10725.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-用户认证流程分析"><a href="#2-用户认证流程分析" class="headerlink" title="2 用户认证流程分析"></a>2 用户认证流程分析</h1><h2 id="2-1-用户认证流程如下"><a href="#2-1-用户认证流程如下" class="headerlink" title="2.1 用户认证流程如下:"></a>2.1 用户认证流程如下:</h2><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607103126937.png" alt="image-20200607103126937"></p><p>业务流程如下</p><ol><li><p><strong>客户端请求认证服务进行认证</strong></p></li><li><p><strong>认证服务认证通过后向浏览器cookie写入token(身份令牌)</strong></p><p>认证服务请求用户中心查询用户信息</p><p>认证服务请求spring security 申请令牌</p><p>认证服务将token(身份令牌)和jwt令牌存储至redis中.</p><p>认证服务向cookie写入token(身份令牌)</p></li><li><p><strong>前端携带 token请求认证服务获取jwt令牌</strong></p><p>前端获取到jwt令牌并存储在sessionStorage</p><p>前端从jwt令牌中解析用户信息并显示在页面</p></li><li><p><strong>前端携带cookie中的token身份令牌既jwt令牌访问资源服务</strong></p><p>前端请求资源服务需要携带两个token,一个是cookie中的身份令牌,一个是http header 中的jwt令牌</p><p>前端请求资源服务前在http header 上添加jwt请求资源</p></li><li><p><strong>网关校验token的合法性</strong></p><p>用户请求必须携带token身份令牌和jwt令牌</p><p>网关校验redis中token是否合法,已过期则要求用户重新登陆</p></li><li><p>资源服务校验jwt的合法性并完成授权</p><p>资源服务校验jwt令牌,完成授权,拥有权限的方法正常执行,没有权限的方法将拒绝访问</p></li></ol><h2 id="2-2认证服务查询数据库"><a href="#2-2认证服务查询数据库" class="headerlink" title="2.2认证服务查询数据库"></a>2.2认证服务查询数据库</h2><h3 id="2-2-1-需求分析"><a href="#2-2-1-需求分析" class="headerlink" title="2.2.1 需求分析"></a>2.2.1 需求分析</h3><p>认证服务根据数据库中的用户信息去校验用户的身份,既校验账户和密码是否匹配</p><p>认证服务不直接连接数据库,而是通过用户中心服务去查询用户中心数据库</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607160843293.png" alt="image-20200607160843293"></p><p>完整的流程图如下</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607161202611.png" alt="image-20200607161202611"></p><h3 id="2-2-2搭建环境-创建用户中心数据库"><a href="#2-2-2搭建环境-创建用户中心数据库" class="headerlink" title="2.2.2搭建环境 创建用户中心数据库"></a>2.2.2搭建环境 创建用户中心数据库</h3><p>用户中心负责用户管理,包括: 用户信息管理 角色管理 权限管理</p><p>创建xc_user数据库(MySQL)</p><p>导入xc_user.sql</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607161506628.png" alt="image-20200607161506628"></p><p><strong>创建用户中心工程</strong></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607161611889.png" alt="image-20200607161611889"></p><h3 id="2-2-3-查询用户接口"><a href="#2-2-3-查询用户接口" class="headerlink" title="2.2.3 查询用户接口"></a>2.2.3 查询用户接口</h3><h4 id="2-2-3-1Api接口"><a href="#2-2-3-1Api接口" class="headerlink" title="2.2.3.1Api接口"></a>2.2.3.1Api接口</h4><p>用户中心对外提供如下接口:</p><h5 id="响应数据类型"><a href="#响应数据类型" class="headerlink" title="响应数据类型"></a>响应数据类型</h5><p>此接口将来被用来查询用户信息及用户权限信息,所以这里定义扩展类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XcUserExt</span> <span class="token keyword">extends</span> <span class="token class-name">XcUser</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//权限信息</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>XcMenu<span class="token operator">></span> permissions<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//企业信息</span>    <span class="token keyword">private</span> String companyId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"xc_user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"jpa-uuid"</span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string">"uuid"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XcUser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"jpa-uuid"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String salt<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String utype<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userpic<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> String status<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="根据账号查询用户信息"><a href="#根据账号查询用户信息" class="headerlink" title="根据账号查询用户信息"></a>根据账号查询用户信息</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/5 10:43 */</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户中心"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"用户管理中心"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UcenterControllerApi</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"根据用户账户查询用户信息"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> XcUserExt <span class="token function">getUserExt</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h5><p>使用spring data jpa 创建两个表的dao</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/5 10:48 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XcUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>XcUser<span class="token punctuation">,</span>String <span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据账户名查询用户     * @param username     * @return     */</span>    XcUser <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/5 10:48 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XcCompanyUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>XcCompanyUser<span class="token punctuation">,</span>String <span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据用户id查询该用户所属的公司id     * @param userId     * @return     */</span>    XcCompanyUser <span class="token function">findByUserId</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/5 11:09 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> XcUserRepository xcUserRepository<span class="token punctuation">;</span>    <span class="token keyword">final</span> XcCompanyUserRepository xcCompanyUserRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span>XcUserRepository xcUserRepository<span class="token punctuation">,</span> XcCompanyUserRepository xcCompanyUserRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xcUserRepository <span class="token operator">=</span> xcUserRepository<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xcCompanyUserRepository <span class="token operator">=</span> xcCompanyUserRepository<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> XcUser <span class="token function">findXcUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> xcUserRepository<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据账户查询用户信息     * @param username     * @return     */</span>    <span class="token keyword">public</span> XcUserExt <span class="token function">getUserExt</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据账户查询xcUser信息</span>         XcUser xcUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findXcUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xcUser <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//根据用户id查询用户所属公司id</span>        XcCompanyUser xcCompanyUser <span class="token operator">=</span> xcCompanyUserRepository<span class="token punctuation">.</span><span class="token function">findByUserId</span><span class="token punctuation">(</span>xcUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去掉用户的公司id</span>        String companyId <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xcCompanyUser<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             companyId <span class="token operator">=</span> xcCompanyUser<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        XcUserExt xcUserExt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XcUserExt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>xcUser<span class="token punctuation">,</span>xcUserExt<span class="token punctuation">)</span><span class="token punctuation">;</span>        xcUserExt<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>companyId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xcUserExt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/5 15:11 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ucenter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UcenterCOntroller</span> <span class="token keyword">implements</span> <span class="token class-name">UcenterControllerApi</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>     UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getuserext"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> XcUserExt <span class="token function">getUserExt</span><span class="token punctuation">(</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserExt</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-调用查询用户接口"><a href="#3-调用查询用户接口" class="headerlink" title="3 调用查询用户接口"></a>3 调用查询用户接口</h2><h3 id="3-1-创建client"><a href="#3-1-创建client" class="headerlink" title="3.1 创建client"></a>3.1 创建client</h3><p>认证服务需要远程调用用户中心服务查询用户,在认证服务中创建<code>Feign</code>客户端</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/5 15:15 */</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> XcServiceList<span class="token punctuation">.</span>XC_SERVICE_UCENTER<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据账户查询     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ucenter/getuserext"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> XcUserExt <span class="token function">getUserExt</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-UserDetailsServiceImpl"><a href="#3-2-UserDetailsServiceImpl" class="headerlink" title="3.2 UserDetailsServiceImpl"></a>3.2 UserDetailsServiceImpl</h3><blockquote><p>​                      认证服务调用spring security 接口申请令牌,spring security接口会调用UserDetailsServiceImpl从数据库查询用户,如果查询不到则返回null,表示不存在;在UserDetailsServiceImpl中将正确的密码返回,spring security 会自动去比对输入密码的正确性</p></blockquote><ol><li><p>修改UserDetailsServiceImpl的loadUserByUsername方法,调用Ucenter服务的查询接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    ClientDetailsService clientDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserClient userClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出身份，如果身份为空说明没有认证</span>        Authentication authentication <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有认证统一采用httpbasic认证，httpbasic中存储了client_id和client_secret，开始认证client_id和client_secret</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>authentication<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ClientDetails clientDetails <span class="token operator">=</span> clientDetailsService<span class="token punctuation">.</span><span class="token function">loadClientByClientId</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>clientDetails<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//密码</span>                String clientSecret <span class="token operator">=</span> clientDetails<span class="token punctuation">.</span><span class="token function">getClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>clientSecret<span class="token punctuation">,</span>AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        XcUserExt userExt <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">getUserExt</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userExt <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//表示用户不存在</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        userext.setUsername("itcast");</span><span class="token comment" spellcheck="true">//        userext.setPassword(new BCryptPasswordEncoder().encode("123"));</span>        userExt<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>XcMenu<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出正确密码（hash值）</span>        String password <span class="token operator">=</span> userExt<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里暂时使用静态密码</span><span class="token comment" spellcheck="true">//       String password ="123";</span>        <span class="token comment" spellcheck="true">//用户权限，这里暂时使用静态数据，最终会从数据库读取</span>        <span class="token comment" spellcheck="true">//从数据库获取权限</span>        List<span class="token operator">&lt;</span>XcMenu<span class="token operator">></span> permissions <span class="token operator">=</span> userExt<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> user_permission <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permissions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span> user_permission<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        user_permission.add("course_get_baseinfo");</span><span class="token comment" spellcheck="true">//        user_permission.add("course_find_pic");</span>        String user_permission_string  <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>user_permission<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserJwt userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserJwt</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>                password<span class="token punctuation">,</span>                AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span>user_permission_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUtype</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户类型</span>        userDetails<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所属企业</span>        userDetails<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名称</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUserpic</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUserpic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户头像</span>       <span class="token comment" spellcheck="true">/* UserDetails userDetails = new org.springframework.security.core.userdetails.User(username,                password,                AuthorityUtils.commaSeparatedStringToAuthorityList(""));*/</span><span class="token comment" spellcheck="true">//                AuthorityUtils.createAuthorityList("course_get_baseinfo","course_get_list"));</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试,请求<a href="http://localhost:40400/auth/userlogin">http://localhost:40400/auth/userlogin</a> </p><p>观察UserDetailsServiceImpl是否正常请求Ucenter的查询用户接口。</p></li></ol><h3 id="3-3-BCryptPasswordEncoder"><a href="#3-3-BCryptPasswordEncoder" class="headerlink" title="3.3  BCryptPasswordEncoder"></a>3.3  BCryptPasswordEncoder</h3><blockquote><p>  早期使用MD5对密码进行编码,每次算出的MD5值都一样,这样非常不安全,spring security推荐使用BCryptPasswordEncoder对密码加随机盐,每次的Hash值都不一样,安全性高.</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String password <span class="token operator">=</span> <span class="token string">"111111"</span><span class="token punctuation">;</span>        PasswordEncoder passwordEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每个计算出的hash值都不一样</span>            String encode <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//虽然每次计算的密码hash值不一样但是校验是通过的</span>            <span class="token keyword">boolean</span> matches <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行后结果</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607171519554.png" alt="image-20200607171519554"></p><p>使用方式</p><p>在AuthorizationServerConfifig配置类中配置BCryptPasswordEncoder </p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 采用bcrypt对密码进行编码     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-解析申请令牌错误信息"><a href="#4-解析申请令牌错误信息" class="headerlink" title="4 解析申请令牌错误信息"></a>4 解析申请令牌错误信息</h2><p>当账号输入错误信息应该返回用户不存在的信息,当密码错误要返回用户名或密码错误信息,业务流程图如下:</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607173545745.png" alt="image-20200607173545745"></p><p>修改申请令牌的程序解析返回的数据:</p><p>由于restTemplate收到400或401的错误会抛出异常，而spring security针对账号不存在及密码错误会返回400及 </p><p>401，所以在代码中控制针对400或401的响应不要抛出异常。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 申请令牌     * @param username     * @param password     * @param clientId     * @param clientSecret     * @return     */</span>    <span class="token keyword">private</span> AuthToken <span class="token function">applyToken</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String clientId<span class="token punctuation">,</span> String clientSecret<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请求spring Security令牌</span>        <span class="token comment" spellcheck="true">//从eureka中获取认证服务的地址(因为spring security 在认证服务中)</span>        <span class="token comment" spellcheck="true">//从eureka中获取认证服务的一个实例的地址</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>XcServiceList<span class="token punctuation">.</span>XC_SERVICE_UCENTER_AUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String authUrl <span class="token operator">=</span> uri<span class="token operator">+</span><span class="token string">"/auth/oauth/token"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * url  就是申请令牌的url         * method http的方法类型         * requestEntity 请求内容         * responseType 将响应的结果生成的类型         */</span>        <span class="token comment" spellcheck="true">//请求的内容分为两部分</span>        <span class="token comment" spellcheck="true">//1 . header 信息 , 包括了http basic认证信息</span>        MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String httpbasic <span class="token operator">=</span> <span class="token function">httpbasic</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> clientSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span>httpbasic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 包括 : grant_type username password</span>        MultiValueMap<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String <span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String <span class="token operator">>></span> multiValueMapHttpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定restTemplate当遇到400或401响应的时候也不要抛出异常,也要正常返回值</span>        restTemplate<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultResponseErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleError</span><span class="token punctuation">(</span>ClientHttpResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当响应的值为400或401的时候也要正常响应,不要抛出异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//远程调用申请令牌</span>        ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">></span> exchange <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>authUrl<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> multiValueMapHttpEntity<span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map body1 <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>body1 <span class="token operator">==</span> null <span class="token operator">||</span>                body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token operator">==</span>null <span class="token operator">||</span>                body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"refresh_token"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jti"</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解析spring security</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body1<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"error_description"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                String error_description <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"error_description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error_description<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"UserDetailsService returned null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>AuthCode<span class="token punctuation">.</span>AUTH_ACCOUNT_NOTEXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error_description<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"坏的凭证"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>AuthCode<span class="token punctuation">.</span>AUTH_CREDENTIAL_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AuthToken authToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authToken<span class="token punctuation">.</span><span class="token function">setAccess_token</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jti"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authToken<span class="token punctuation">.</span><span class="token function">setRefresh_token</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"refresh_token"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        authToken<span class="token punctuation">.</span><span class="token function">setJwt_token</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607174057201.png" alt="image-20200607174057201"></p><h2 id="5-前端显示当前用户"><a href="#5-前端显示当前用户" class="headerlink" title="5 前端显示当前用户"></a>5 前端显示当前用户</h2><h4 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h4><p>用户登陆成功在页头显示当前登陆的用户名</p><p>流程图如下:</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607174912358.png" alt="image-20200607174912358"></p><ol><li><p>用户请求认证服务,登陆成功</p></li><li><p>用户登陆成功,认证服务向cookie写入身份令牌,向redis中写入user_token(用户令牌及授权jwt令牌)</p></li><li><p>客户端携带cookie中的身份令牌请求认证服务获取jwt令牌</p></li><li><p>客户端解析jwt令牌,并将解析的用户信息存储到session Storage中</p><p>jwt令牌中包括了用户的基本信息,客户端解析jwt令牌即可获取用户信息</p></li><li><p>客户端从session storage中获取用户信息,并在页头显示 </p></li></ol><p>sessionStorage ： </p><p>sessionStorage 是H5的一个会话存储对象，在SessionStorage中保存的数据只在同一窗口或同一标签页中有效， </p><p>在关闭窗口之后将会删除SessionStorage中的数据。 </p><p>seesionStorage的存储方式采用key/value的方式，可保存5M左右的数据（不同的浏览器会有区别）。 </p><h4 id="5-2-jwt查询接口"><a href="#5-2-jwt查询接口" class="headerlink" title="5.2 jwt查询接口"></a>5.2 jwt查询接口</h4><h5 id="5-2-1需求分析"><a href="#5-2-1需求分析" class="headerlink" title="5.2.1需求分析"></a>5.2.1需求分析</h5><p>认证服务对外提供jwt查询接口,流程如下:</p><ol><li>客户端携带cookie中的身份令牌请求认证服务获取jwt</li><li>认证服务根据身份令牌从redis中查询jwt令牌并返回给客户端</li></ol><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><p>在认证模块定义jwt查询接口</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**     * 查询用户jwt令牌     * @return     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询用户jwt令牌"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JwtResult <span class="token function">userJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h5><p>无</p><h5 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h5><p>在AuthService定义方法如下:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 从redis查询令牌     * @param token     * @return     */</span>    <span class="token keyword">public</span> AuthToken <span class="token function">getUserToken</span><span class="token punctuation">(</span>String  token<span class="token punctuation">)</span><span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token string">"user_token:"</span><span class="token operator">+</span>token<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从redis取到令牌信息</span>        String value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> AuthToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getUserToken from redis and execute JSON parseObject error {}"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h5><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 查询用户jwt令牌     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/userjwt"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JwtResult <span class="token function">userJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出cookie中的身份令牌</span>        String tokenFormCookie <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTokenFormCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenFormCookie <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>FAIL<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拿身份令牌从redis中查询jwt令牌</span>        AuthToken userToken <span class="token operator">=</span> authService<span class="token punctuation">.</span><span class="token function">getUserToken</span><span class="token punctuation">(</span>tokenFormCookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userToken<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span>userToken<span class="token punctuation">.</span><span class="token function">getJwt_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将jwt令牌返回给用户</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到身份令牌     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">getTokenFormCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取request</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> CookieUtil<span class="token punctuation">.</span><span class="token function">readCookie</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> map<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ol><li><p>请求/auth/userlogin</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607182719744.png" alt="image-20200607182719744"></p><ol start="2"><li><p>观察cookie是否已存入用户身份令牌。get请求jwt </p><p> <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607182802068.png" alt="image-20200607182802068"></p></li></ol></li></ol><h2 id="6-用户退出"><a href="#6-用户退出" class="headerlink" title="6 用户退出"></a>6 用户退出</h2><h4 id="6-1-需求分析"><a href="#6-1-需求分析" class="headerlink" title="6.1 需求分析"></a>6.1 需求分析</h4><p>操作流程如下:</p><ol><li><p>删除redis中的token</p></li><li><p>删除cookie中的token</p></li></ol><h4 id="6-2-认证服务对外提供退出接口"><a href="#6-2-认证服务对外提供退出接口" class="headerlink" title="6.2 认证服务对外提供退出接口"></a>6.2 认证服务对外提供退出接口</h4><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * 退出  * @return  */</span> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> ResponseResult <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-3-Service"><a href="#6-3-Service" class="headerlink" title="6.3 Service"></a>6.3 Service</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 从redis中删除令牌     * @param uid     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delToken</span><span class="token punctuation">(</span>String uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token string">"user_token:"</span><span class="token operator">+</span>uid<span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="6-4-Controller"><a href="#6-4-Controller" class="headerlink" title="6.4 Controller"></a>6.4 Controller</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 退出     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出身份令牌</span>        String uid <span class="token operator">=</span> <span class="token function">getTokenFormCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除redis中的token</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">delToken</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清楚cookie</span>        <span class="token function">clearCookie</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>CommonCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 清除cookie     * @param uid     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clearCookie</span><span class="token punctuation">(</span>String uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取request</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CookieUtil<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>cookieDomain<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"uid"</span><span class="token punctuation">,</span>uid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="6-5-退出url放行"><a href="#6-5-退出url放行" class="headerlink" title="6.5 退出url放行"></a>6.5 退出url放行</h4><p>认证服务默认都要校验用户的身份信息,这里需要将退出url放行</p><p>在WebSecurityConfifig类中重写 confifigure(WebSecurity web)方法，如下： </p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/userlogin"</span><span class="token punctuation">,</span><span class="token string">"/userlogout"</span><span class="token punctuation">,</span><span class="token string">"/userjwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认证与授权(1)</title>
      <link href="posts/55781.html"/>
      <url>posts/55781.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-Oauth2-JWT"><a href="#Spring-Security-Oauth2-JWT" class="headerlink" title="Spring Security Oauth2 JWT"></a>Spring Security Oauth2 JWT</h1><h1 id="一-用户认证授权"><a href="#一-用户认证授权" class="headerlink" title="一 用户认证授权"></a>一 用户认证授权</h1><h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h2><h3 id="1-1-用户认证与授权"><a href="#1-1-用户认证与授权" class="headerlink" title="1.1 用户认证与授权"></a>1.1 用户认证与授权</h3><p><strong>什么是用户身份认证？</strong> </p><p>用户身份认证即用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问。常见的用户身份认 </p><p>证表现形式有：用户名密码登录，指纹打卡等方式。 </p><p><strong>什么是用户授权？</strong> 有权限的资源将无法访问，这个过程叫用户授权。 </p><h3 id="1-2-单点登陆需求"><a href="#1-2-单点登陆需求" class="headerlink" title="1.2 单点登陆需求"></a>1.2 单点登陆需求</h3><p>实际开发中 项目拥有多个子项目,为了提高用户体验性需要实现用户只认证一次便可以在多个拥有访问权限的系统中访问,这个功能就叫做==单点登陆==</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200609234317582.png" alt="image-20200609234317582"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200609234343740.png" alt="image-20200609234343740"></p><h3 id="1-3-第三方认证需求"><a href="#1-3-第三方认证需求" class="headerlink" title="1.3 第三方认证需求"></a>1.3 第三方认证需求</h3><p>作为互联网项目难免需要访问外部系统的资源,其实用场景如下:</p><p>一个微信用户没有学成在线中注册,本系统可以通过请求微信系统来验证该用户的身份,验证通过后,该用户便可在本系统学习,他的基本流程如下:</p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/image-20200609234431698.png" alt="image-20200609234431698"></p><h2 id="2-用户认证技术方案"><a href="#2-用户认证技术方案" class="headerlink" title="2. 用户认证技术方案"></a>2. 用户认证技术方案</h2><h3 id="2-1-单点登陆技术方案"><a href="#2-1-单点登陆技术方案" class="headerlink" title="2.1 单点登陆技术方案"></a>2.1 单点登陆技术方案</h3><p>分布式系统要实现单点登陆,通常将认证系统独立抽取出来,并且将用户身份信息存储在单独的存储介质,比如 MySQL ,Redis 考虑性能要求,通常存储在Redis中 </p><p>因为Redis的性能十分优越，可以支持每秒十几万次的读/写操作，并且它还支持持久化、集群部署、分布式、主从同步等，Redis在高并发的场景下数据的安全和一致性</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200605225405776.png" alt="image-20200605225405776"></p><p>单点登陆的特点是:</p><ol><li>认证系统为独立的系统</li><li>各子系统通过http或其他协议与认证系统通信,完成用户认证</li><li>用户身份信息存储在Redis集群.</li></ol><p>java中有很多用户认证的框架都可以实现单点登陆</p><ol><li>Apache Shiro</li><li>CAS</li><li>Spring Security CAS</li></ol><h3 id="2-2-Qauth2认证"><a href="#2-2-Qauth2认证" class="headerlink" title="2.2 Qauth2认证"></a>2.2 Qauth2认证</h3><h4 id="2-2-1-Qauth2认证流程"><a href="#2-2-1-Qauth2认证流程" class="headerlink" title="2.2.1 Qauth2认证流程"></a>2.2.1 Qauth2认证流程</h4><blockquote><p>第三方认证技术方案最主要是解决认证协议的通用标准 问题，因为要实现 跨系统认证，各系统之间要遵循一定的 </p><p>接口协议。</p></blockquote><p>OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用OAUTH认 </p><p>证服务，任何服务提供商都可以实现自身的OAUTH认证服务，因而OAUTH是开放的。业界提供了OAUTH的多种实 </p><p>现如PHP、JavaScript，Java，Ruby等各种语言开发包，大大节约了程序员的时间，因而OAUTH是简易的。互联网 </p><p>很多服务如Open API，很多大公司如Google，Yahoo，Microsoft等都提供了OAUTH认证服务，这些都足以说明 </p><p>OAUTH标准逐渐成为开放资源授权的标准。</p><p>Oauth协议目前发展到2.0版本，1.0版本过于复杂，2.0版本已得到广泛应用。</p><p>参考：<a href="https://baike.baidu.com/item/oAuth/7153134?fr=aladdin">https://baike.baidu.com/item/oAuth/7153134?fr=aladdin</a> </p><p>Oauth协议：<a href="https://tools.ietf.org/html/rfc6749">https://tools.ietf.org/html/rfc6749</a> </p><p>下边分析一个Oauth2认证的例子</p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/mdimage-20200605231420051.png" alt="image-20200605231420051"></p><ol><li>用户登陆项目到认证系统选择第三方登陆</li><li>项目认证系统向第三方认证系统发送请求认证信息</li><li>第三方返回给用户授权页面</li><li>用户授权通过</li><li>第三方微信认证颁发授权码给项目认证系统</li><li>项目认证系统通过授权码,申请令牌</li><li>第三方校验授权码通过返回令牌</li><li>项目认证系统通过令牌访问第三方用户信息</li><li>第三方校验令牌合法性 合法则响应用户信息</li><li>项目认证系统展示获取的用户信息</li></ol><p>注意：资源服务器和认证服务器可以是一个服务也可以分开的服务，如果是分开的服务资源服务器通常要请求认证 </p><p>服务器来校验令牌的合法性。</p><p>Oauth2.0认证流程如下：</p><p>引自Oauth2.0协议rfc6749 <a href="https://tools.ietf.org/html/rfc6749">https://tools.ietf.org/html/rfc6749</a></p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/mdimage-20200605232023126.png" alt="image-20200605232023126"></p><p>Oauth2包括以下角色： </p><p>1、客户端 </p><p>本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：###Android客户端、  ###Web客户端（浏览器端）、微信客户端等。</p><p>2、资源拥有者 </p><p>通常为用户，也可以是应用程序，即该资源的拥有者。 </p><p>3、授权服务器（也称认证服务器） </p><p>用来对资源拥有的身份进行认证、对访问资源进行授权。客户端要想访问资源需要通过认证服务器由资源拥有者授 </p><p>权后方可访问。 </p><p>4、资源服务器 </p><p>存储资源的服务器，比如，学成网用户管理服务器存储了学成网的用户信息，学成网学习服务器存储了学生的学习 </p><p>信息，微信的资源服务存储了微信的用户信息等。客户端最终访问资源服务器获取资源信息。 </p><h4 id="2-2-2-Oauth2在本项目的应用"><a href="#2-2-2-Oauth2在本项目的应用" class="headerlink" title="2.2.2 Oauth2在本项目的应用"></a>2.2.2 Oauth2在本项目的应用</h4><p>Oauth2是一个标准的开放的授权协议，应用程序可以根据自己的要求去使用Oauth2，本项目使用Oauth2实现如 </p><p>下目标： </p><ol><li>项目访问第三方系统资源</li><li>外部系统访问项目的资源</li><li>项目前端(客户端)访问项目微服务的资源</li><li>项目微服务之前访问资源,例如微服务A访问微服务B的资源,B访问A的资源</li></ol><h3 id="2-3-Spring-Security-Oauth2认证解决方案"><a href="#2-3-Spring-Security-Oauth2认证解决方案" class="headerlink" title="2.3 Spring Security Oauth2认证解决方案"></a>2.3 Spring Security Oauth2认证解决方案</h3><p>本项目采用 Spring security + Oauth2完成用户认证及用户授权，Spring security 是一个强大的和高度可定制的身 </p><p>份验证和访问控制框架，Spring security 框架集成了Oauth2协议，下图是项目认证架构图：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200605233053249.png" alt="image-20200605233053249"></p><h2 id="3-Spring-Security-Oauth2研究"><a href="#3-Spring-Security-Oauth2研究" class="headerlink" title="3. Spring Security Oauth2研究"></a>3. Spring Security Oauth2研究</h2><h3 id="3-1-目标"><a href="#3-1-目标" class="headerlink" title="3.1 目标"></a>3.1 目标</h3><p>本项目认证服务基于Spring Security Oauth2进行构建，并在其基础上作了一些扩展，采用JWT令牌机制，并自定 </p><p>义了用户身份信息的内容。 本教程的主要目标是学习在项目中集成Spring Security Oauth2的方法和流程，通过 </p><p>spring Security Oauth2的研究需要达到以下目标：</p><ol><li>理解Oauth2的授权码流程及密码认证的流程</li><li>理解spring Security Oauth2的工作流程</li><li>掌握资源服务集成spring Security 框架完成Oauth2认证的流程</li></ol><h3 id="3-2-搭建认证服务"><a href="#3-2-搭建认证服务" class="headerlink" title="3.2 搭建认证服务"></a>3.2 搭建认证服务</h3><p>认证服务架构</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200605234555378.png" alt="image-20200605234555378"></p><h4 id="3-2-1创建springboot项目"><a href="#3-2-1创建springboot项目" class="headerlink" title="3.2.1创建springboot项目"></a>3.2.1创建springboot项目</h4><h5 id="1-在application-yml中配置"><a href="#1-在application-yml中配置" class="headerlink" title="1 在application.yml中配置"></a>1 在application.yml中配置</h5><pre class=" language-yml"><code class="language-yml">server:  port: ${PORT:40400}  servlet:    context-path: /authspring:  application:    name: xc-service-ucenter-auth  redis:    host: ${REDIS_HOST:two}    port: ${REDIS_PORT:6379}    timeout: 5000 #连接超时 毫秒    jedis:      pool:        maxActive: 3        maxIdle: 3        minIdle: 1        maxWait: -1 #连接池最大等行时间 -1没有限制    password: 123456  datasource:    druid:      url: ${MYSQL_URL:jdbc:mysql://root:3306/xc_user?characterEncoding=utf-8}      username: root      password: 1234      driverClassName: com.mysql.jdbc.Driver      initialSize: 5  #初始建立连接数量      minIdle: 5  #最小连接数量      maxActive: 20 #最大连接数量      maxWait: 10000  #获取连接最大等待时间，毫秒      testOnBorrow: true #申请连接时检测连接是否有效      testOnReturn: false #归还连接时检测连接是否有效      timeBetweenEvictionRunsMillis: 60000 #配置间隔检测连接是否有效的时间（单位是毫秒）      minEvictableIdleTimeMillis: 300000  #连接在连接池的最小生存时间（毫秒）auth:  tokenValiditySeconds: 1200  #token存储到redis的过期时间  clientId: XcWebApp  clientSecret: XcWebApp  cookieDomain: localhost  cookieMaxAge: -1encrypt:  key-store:    locatio     n: classpath:/xc.keystore    secret: xuechengkeystore    alias: xckey    password: xuecheng eureka:  client:    registerWithEureka: true #服务注册开关    fetchRegistry: true #服务发现开关    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔      defaultZone: http://localhost:50101/eureka/  instance:    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中    ip-address: ${IP_ADDRESS:localhost}    instance-id: ${spring.application.name}:${server.port} #指定实例idribbon:  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器  MaxAutoRetriesNextServer: 3 #切换实例的重试次数  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false  ConnectTimeout: 50000  #请求连接的超时时间  ReadTimeout: 60000 #请求处理的超时时间</code></pre><p>pom.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xuecheng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xc-framework-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xuecheng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xc-service-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.netflix.feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.18.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${springframework.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h5 id="2-启动类配置"><a href="#2-启动类配置" class="headerlink" title="2 启动类配置"></a>2 启动类配置</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EntityScan</span><span class="token punctuation">(</span><span class="token string">"com.xuecheng.framework.domain.ucenter"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描实体类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.xuecheng.api"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描接口</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"com.xuecheng.framework"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描common下的所有类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UcenterAuthApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>UcenterAuthApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OkHttp3ClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-config配置"><a href="#3-config配置" class="headerlink" title="3 config配置"></a>3 config配置</h5><p><strong>AuthorizationServerConfig</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token keyword">class</span> <span class="token class-name">AuthorizationServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//jwt令牌转换器</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    AuthenticationManager authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    TokenStore tokenStore<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomUserAuthenticationConverter customUserAuthenticationConverter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读取密钥的配置</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"keyProp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> KeyProperties <span class="token function">keyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"keyProp"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> KeyProperties keyProperties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户端配置</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ClientDetailsService <span class="token function">clientDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcClientDetailsService</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>ClientDetailsServiceConfigurer clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        clients<span class="token punctuation">.</span><span class="token function">jdbc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clients</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clientDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* clients.inMemory()                .withClient("XcWebApp")//客户端id                .secret("XcWebApp")//密码，要保密                .accessTokenValiditySeconds(60)//访问令牌有效期                .refreshTokenValiditySeconds(60)//刷新令牌有效期                //授权客户端请求认证服务的类型authorization_code：根据授权码生成令牌，                // client_credentials:客户端认证，refresh_token：刷新令牌，password：密码方式认证                .authorizedGrantTypes("authorization_code", "client_credentials", "refresh_token", "password")                .scopes("app");//客户端范围，名称自定义，必填*/</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//token的存储方法</span><span class="token comment" spellcheck="true">//    @Bean</span><span class="token comment" spellcheck="true">//    public InMemoryTokenStore tokenStore() {</span><span class="token comment" spellcheck="true">//        //将令牌存储到内存</span><span class="token comment" spellcheck="true">//        return new InMemoryTokenStore();</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    @Bean</span><span class="token comment" spellcheck="true">//    public TokenStore tokenStore(RedisConnectionFactory redisConnectionFactory){</span><span class="token comment" spellcheck="true">//        RedisTokenStore redisTokenStore = new RedisTokenStore(redisConnectionFactory);</span><span class="token comment" spellcheck="true">//        return redisTokenStore;</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> TokenStore <span class="token function">tokenStore</span><span class="token punctuation">(</span>JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAccessTokenConverter <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span>CustomUserAuthenticationConverter customUserAuthenticationConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtAccessTokenConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyStoreKeyFactory</span>                <span class="token punctuation">(</span>keyProperties<span class="token punctuation">.</span><span class="token function">getKeyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyProperties<span class="token punctuation">.</span><span class="token function">getKeyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getKeyPair</span><span class="token punctuation">(</span>keyProperties<span class="token punctuation">.</span><span class="token function">getKeyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>keyProperties<span class="token punctuation">.</span><span class="token function">getKeyStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setKeyPair</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置自定义的CustomUserAuthenticationConverter</span>        DefaultAccessTokenConverter accessTokenConverter <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultAccessTokenConverter<span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessTokenConverter<span class="token punctuation">.</span><span class="token function">setUserTokenConverter</span><span class="token punctuation">(</span>customUserAuthenticationConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//授权服务器端点配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthorizationServerEndpointsConfigurer endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*Collection&lt;TokenEnhancer> tokenEnhancers = applicationContext.getBeansOfType(TokenEnhancer.class).values();        TokenEnhancerChain tokenEnhancerChain=new TokenEnhancerChain();        tokenEnhancerChain.setTokenEnhancers(new ArrayList&lt;>(tokenEnhancers));        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();        defaultTokenServices.setReuseRefreshToken(true);        defaultTokenServices.setSupportRefreshToken(true);        defaultTokenServices.setTokenStore(tokenStore);        defaultTokenServices.setAccessTokenValiditySeconds(1111111);        defaultTokenServices.setRefreshTokenValiditySeconds(1111111);        defaultTokenServices.setTokenEnhancer(tokenEnhancerChain);        endpoints                .authenticationManager(authenticationManager)                .userDetailsService(userDetailsService)                        //.tokenStore(tokenStore);                .tokenServices(defaultTokenServices);*/</span>        endpoints<span class="token punctuation">.</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//认证管理器</span>                <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//令牌存储</span>                <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户信息service</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//授权服务器的安全配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthorizationServerSecurityConfigurer oauthServer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        oauthServer.checkTokenAccess("isAuthenticated()");//校验token需要认证通过，可采用http basic认证</span>        oauthServer<span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"isAuthenticated()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  <strong>CustomUserAuthenticationConverter</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUserAuthenticationConverter</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultUserAuthenticationConverter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> <span class="token function">convertUserAuthentication</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserJwt userJwt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>principal <span class="token keyword">instanceof</span>  <span class="token class-name">UserJwt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            userJwt <span class="token operator">=</span> <span class="token punctuation">(</span>UserJwt<span class="token punctuation">)</span> principal<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//refresh_token默认不去调用userdetailService获取用户信息，这里我们手动去调用，得到 UserJwt</span>            UserDetails userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            userJwt <span class="token operator">=</span> <span class="token punctuation">(</span>UserJwt<span class="token punctuation">)</span> userDetails<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> userJwt<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> userJwt<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"utype"</span><span class="token punctuation">,</span>userJwt<span class="token punctuation">.</span><span class="token function">getUtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userpic"</span><span class="token punctuation">,</span>userJwt<span class="token punctuation">.</span><span class="token function">getUserpic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"companyId"</span><span class="token punctuation">,</span>userJwt<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"authorities"</span><span class="token punctuation">,</span> AuthorityUtils<span class="token punctuation">.</span><span class="token function">authorityListToSet</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>WebSecurityConfig</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/userlogin"</span><span class="token punctuation">,</span><span class="token string">"/userlogout"</span><span class="token punctuation">,</span><span class="token string">"/userjwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AuthenticationManager <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        AuthenticationManager manager <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//采用bcrypt对密码进行编码</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-Service"><a href="#4-Service" class="headerlink" title="4 Service"></a>4 Service</h5><p><strong>AuthService</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/4 18:02 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token keyword">final</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token keyword">final</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${auth.tokenValiditySeconds}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> tokenValiditySeconds<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AuthService</span><span class="token punctuation">(</span>LoadBalancerClient loadBalancerClient<span class="token punctuation">,</span> RestTemplate restTemplate<span class="token punctuation">,</span> StringRedisTemplate redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancerClient <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 用户认证申请令牌 将令牌存储到redis     * @param username     * @param password     * @param clientId     * @param clientSecret     * @return     */</span>    <span class="token keyword">public</span> AuthToken <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String clientId<span class="token punctuation">,</span> String clientSecret<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AuthToken authToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> clientId<span class="token punctuation">,</span> clientSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authToken <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>AuthCode<span class="token punctuation">.</span>AUTH_LOGIN_APPLYTOKEN_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//用户身份的令牌</span>        String access_token <span class="token operator">=</span> authToken<span class="token punctuation">.</span><span class="token function">getAccess_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储到redis</span>        <span class="token comment" spellcheck="true">//存储到redis中的内容</span>        String content <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveToken</span><span class="token punctuation">(</span>access_token<span class="token punctuation">,</span> content<span class="token punctuation">,</span> tokenValiditySeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>            ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>AuthCode<span class="token punctuation">.</span>AUTH_LOGIN_TOKEN_SAVEFAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> authToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 存储到redis     * @param access_token 用户身份令牌     * @param content 内容就是authtoken对象的内容     * @param ttl 过期时间     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">saveToken</span><span class="token punctuation">(</span>String access_token<span class="token punctuation">,</span>String content<span class="token punctuation">,</span><span class="token keyword">long</span> ttl<span class="token punctuation">)</span><span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token string">"user_token:"</span> <span class="token operator">+</span> access_token<span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>ttl<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        Long expire <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expire <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            expire <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> expire <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 申请令牌     * @param username     * @param password     * @param clientId     * @param clientSecret     * @return     */</span>    <span class="token keyword">private</span> AuthToken <span class="token function">applyToken</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String clientId<span class="token punctuation">,</span> String clientSecret<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//请求spring Security令牌</span>        <span class="token comment" spellcheck="true">//从eureka中获取认证服务的地址(因为spring security 在认证服务中)</span>        <span class="token comment" spellcheck="true">//从eureka中获取认证服务的一个实例的地址</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>XcServiceList<span class="token punctuation">.</span>XC_SERVICE_UCENTER_AUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String authUrl <span class="token operator">=</span> uri<span class="token operator">+</span><span class="token string">"/auth/oauth/token"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * url  就是申请令牌的url         * method http的方法类型         * requestEntity 请求内容         * responseType 将响应的结果生成的类型         */</span>        <span class="token comment" spellcheck="true">//请求的内容分为两部分</span>        <span class="token comment" spellcheck="true">//1 . header 信息 , 包括了http basic认证信息</span>        MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String httpbasic <span class="token operator">=</span> <span class="token function">httpbasic</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> clientSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span>httpbasic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 包括 : grant_type username password</span>        MultiValueMap<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String <span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String <span class="token operator">>></span> multiValueMapHttpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定restTemplate当遇到400或401响应的时候也不要抛出异常,也要正常返回值</span>        restTemplate<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultResponseErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleError</span><span class="token punctuation">(</span>ClientHttpResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当响应的值为400或401的时候也要正常响应,不要抛出异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//远程调用申请令牌</span>        ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">></span> exchange <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>authUrl<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> multiValueMapHttpEntity<span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map body1 <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>body1 <span class="token operator">==</span> null <span class="token operator">||</span>                body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token operator">==</span>null <span class="token operator">||</span>                body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"refresh_token"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jti"</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解析spring security</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body1<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"error_description"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                String error_description <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"error_description"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error_description<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"UserDetailsService returned null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>AuthCode<span class="token punctuation">.</span>AUTH_ACCOUNT_NOTEXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error_description<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"坏的凭证"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ExceptionCast<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>AuthCode<span class="token punctuation">.</span>AUTH_CREDENTIAL_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AuthToken authToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authToken<span class="token punctuation">.</span><span class="token function">setAccess_token</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jti"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authToken<span class="token punctuation">.</span><span class="token function">setRefresh_token</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"refresh_token"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        authToken<span class="token punctuation">.</span><span class="token function">setJwt_token</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>body1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到basic编码     * @param clientId     * @param clientSecret     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">httpbasic</span><span class="token punctuation">(</span>String clientId<span class="token punctuation">,</span>String clientSecret<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将客户端id和客户端密码拼接,按"客户端id,客户段密码"</span>        String string <span class="token operator">=</span> clientId<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>clientSecret<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行base64编码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> Base64Utils<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Basic "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从redis查询令牌     * @param token     * @return     */</span>    <span class="token keyword">public</span> AuthToken <span class="token function">getUserToken</span><span class="token punctuation">(</span>String  token<span class="token punctuation">)</span><span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token string">"user_token:"</span><span class="token operator">+</span>token<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从redis取到令牌信息</span>        String value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> AuthToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getUserToken from redis and execute JSON parseObject error {}"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从redis中删除令牌     * @param uid     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delToken</span><span class="token punctuation">(</span>String uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> <span class="token string">"user_token:"</span><span class="token operator">+</span>uid<span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UserDetailsServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    ClientDetailsService clientDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserClient userClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取出身份，如果身份为空说明没有认证</span>        Authentication authentication <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有认证统一采用httpbasic认证，httpbasic中存储了client_id和client_secret，开始认证client_id和client_secret</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>authentication<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            ClientDetails clientDetails <span class="token operator">=</span> clientDetailsService<span class="token punctuation">.</span><span class="token function">loadClientByClientId</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>clientDetails<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//密码</span>                String clientSecret <span class="token operator">=</span> clientDetails<span class="token punctuation">.</span><span class="token function">getClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>clientSecret<span class="token punctuation">,</span>AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        XcUserExt userExt = userClient.getUserExt(username);</span><span class="token comment" spellcheck="true">//        if(userExt == null){</span><span class="token comment" spellcheck="true">//            //表示用户不存在</span><span class="token comment" spellcheck="true">//           return null;</span><span class="token comment" spellcheck="true">//        }</span>         XcUserExt userExt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XcUserExt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userext<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userext<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userExt<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>XcMenu<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出正确密码（hash值）</span>        <span class="token comment" spellcheck="true">//        String password = userExt.getPassword();</span>        <span class="token comment" spellcheck="true">//这里暂时使用静态密码</span>       String password <span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户权限，这里暂时使用静态数据，最终会从数据库读取</span>        <span class="token comment" spellcheck="true">//从数据库获取权限</span>        List<span class="token operator">&lt;</span>XcMenu<span class="token operator">></span> permissions <span class="token operator">=</span> userExt<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> user_permission <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permissions<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span> user_permission<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        user_permission.add("course_get_baseinfo");</span><span class="token comment" spellcheck="true">//        user_permission.add("course_find_pic");</span>        String user_permission_string  <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>user_permission<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserJwt userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserJwt</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>                password<span class="token punctuation">,</span>                AuthorityUtils<span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span>user_permission_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUtype</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户类型</span>        userDetails<span class="token punctuation">.</span><span class="token function">setCompanyId</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getCompanyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所属企业</span>        userDetails<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名称</span>        userDetails<span class="token punctuation">.</span><span class="token function">setUserpic</span><span class="token punctuation">(</span>userExt<span class="token punctuation">.</span><span class="token function">getUserpic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户头像</span>       <span class="token comment" spellcheck="true">/* UserDetails userDetails = new org.springframework.security.core.userdetails.User(username,                password,                AuthorityUtils.commaSeparatedStringToAuthorityList(""));*/</span><span class="token comment" spellcheck="true">//                AuthorityUtils.createAuthorityList("course_get_baseinfo","course_get_list"));</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UserJwt</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserJwt</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userpic<span class="token punctuation">;</span>    <span class="token keyword">private</span> String utype<span class="token punctuation">;</span>    <span class="token keyword">private</span> String companyId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserJwt</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数据库sql</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606074407101.png" alt="image-20200606074407101"></p><p>链接：<a href="https://pan.baidu.com/s/1k9T0-ZgAw9iOFUZkhWw6Hw">https://pan.baidu.com/s/1k9T0-ZgAw9iOFUZkhWw6Hw</a><br>提取码：xpv5</p><h3 id="3-3-Oauth2授权模式"><a href="#3-3-Oauth2授权模式" class="headerlink" title="3.3 Oauth2授权模式"></a>3.3 Oauth2授权模式</h3><h4 id="3-3-1-Oauth授权模式"><a href="#3-3-1-Oauth授权模式" class="headerlink" title="3.3.1 Oauth授权模式"></a>3.3.1 Oauth授权模式</h4><p>Oauth有以下授权模式</p><p>授权码模式（Authorization Code） 隐式授权模式（Implicit） 密码模式（Resource Owner Password </p><p>Credentials） 客户端模式（Client Credentials） </p><p>其中授权码模式和密码模式应用较多</p><h4 id="3-3-2-授权码流程"><a href="#3-3-2-授权码流程" class="headerlink" title="3.3.2 授权码流程"></a>3.3.2 授权码流程</h4><p>上边例举的第三方登陆使用的就是授权码模式,流程如下:</p><ol><li>客户端请求第三方授权</li><li>用户(资源拥有者)同意给客户端授权</li><li>客户端获取到授权码,请求认证服务器获取令牌</li><li>认证服务器向客户端响应令牌</li><li>客户端请求资源服务器的资源,资源服务校验令牌合法性,完成授权</li><li>资源服务器返回受保护资源</li></ol><h4 id="3-3-3-申请授权码"><a href="#3-3-3-申请授权码" class="headerlink" title="3.3.3 申请授权码"></a>3.3.3 申请授权码</h4><p>请求认证服务获取授权码:</p><p>Get请求:</p><pre class=" language-url"><code class="language-url">localhost:40400/auth/oauth/authorize? client_id=XcWebApp&response_type=code&scop=app&redirect_uri=http://localhost</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606115848406.png" alt="image-20200606115848406"></p><p>输入账号和密码，点击Login。 </p><p>Spring Security接收到请求会调用UserDetailsService接口的loadUserByUsername方法查询用户正确的密码。 </p><p>当前导入的基础工程中将正确的密码硬编码为“123”，所以这里账号随意输入，密码输入123即可认证通过。 </p><p>首先跳转到登录页面：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606115912102.png" alt="image-20200606115912102"></p><p>输入账号和密码，点击Login。 </p><p>Spring Security接收到请求会调用UserDetailsService接口的loadUserByUsername方法查询用户正确的密码。 </p><p>当前导入的基础工程中将正确的密码硬编码为“123”，所以这里账号随意输入，密码输入123即可认证通过。</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606115944289.png" alt="image-20200606115944289"></p><h4 id="3-3-4-申请令牌"><a href="#3-3-4-申请令牌" class="headerlink" title="3.3.4 申请令牌"></a>3.3.4 申请令牌</h4><p>拿到授权码后，申请令牌。 </p><p>Post请求：<a href="http://localhost:40400/auth/oauth/token">http://localhost:40400/auth/oauth/token</a> </p><p>参数如下： </p><p>grant_type：授权类型，填写authorization_code，表示授权码模式 </p><p>code：授权码，就是刚刚获取的授权码，注意：授权码只使用一次就无效了，需要重新申请。 </p><p>redirect_uri：申请授权码时的跳转url，一定和申请授权码时用的redirect_uri一致。 </p><p>此链接需要使用 http Basic认证。 </p><p>什么是http Basic认证？ </p><p>http协议定义的一种认证方式，将客户端id和客户端密码按照“客户端ID:客户端密码”的格式拼接，并用base64编 </p><p>码，放在header中请求服务端，一个例子： </p><p>Authorization：Basic WGNXZWJBcHA6WGNXZWJBcHA=WGNXZWJBcHA6WGNXZWJBcHA= 是用户名:密码的base64编码。 </p><p>认证失败服务端返回 401 Unauthorized </p><p>以上测试使用postman完成： </p><p>http basic认证： </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606120126561.png" alt="image-20200606120126561"></p><p>Post请求参数： </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606120241440.png" alt="image-20200606120241440"></p><p>点击发送： </p><p>申请令牌成功：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606120301806.png" alt="image-20200606120301806"></p><p>access_token：访问令牌，携带此令牌访问资源 </p><p>token_type：有MAC Token与Bearer Token两种类型，两种的校验算法不同，RFC 6750建议Oauth2采用 Bearer </p><p>Token（<a href="http://www.rfcreader.com/#rfc6750%EF%BC%89%E3%80%82">http://www.rfcreader.com/#rfc6750）。</a> </p><p>refresh_token：刷新令牌，使用此令牌可以延长访问令牌的过期时间。 </p><p>expires_in：过期时间，单位为秒。 </p><p>scope：范围，与定义的客户端范围一致。</p><h4 id="3-3-5资源服务授权"><a href="#3-3-5资源服务授权" class="headerlink" title="3.3.5资源服务授权"></a>3.3.5资源服务授权</h4><h5 id="3-3-5-1-资源服务授权流程"><a href="#3-3-5-1-资源服务授权流程" class="headerlink" title="3.3.5.1 资源服务授权流程"></a>3.3.5.1 资源服务授权流程</h5><p>资源服务拥有要访问的受保护资源，客户端携带令牌访问资源服务，如果令牌合法则可成功访问资源服务中的资 </p><p>源，如下图： </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606165444813.png" alt="image-20200606165444813"></p><ol><li>客户端请求认证服务申请令牌</li><li>认证服务生成令牌,认证服务采用非对称加密算法,使用私钥生成令牌</li><li>客户携带令牌访问资源服务,客户端在Http header 中添加: Authorization : Bearer 令牌</li><li>资源服务请求认证服务校验令牌的有效性,资源服务接收到令牌,使用公钥校验令牌的合法性</li><li>令牌有效,资源服务向客户端响应资源信息</li></ol><ul><li><p>认证服务生成令牌采用非对称加密算法,认证服务采用私钥加密生成令牌,对外向资源服务提供公钥,资源服务使用公钥来检验令牌的合法性</p><p>将公钥拷贝到publickey.txt文件中,将此文件拷贝到资源服务工程的classpath下</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606171201404.png" alt="image-20200606171201404"></p><p>添加依赖</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ul><p>  Config包下ResourceServerConfig类配置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Administrator * @version 1.0 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> securedEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//激活方法上的PreAuthorize注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//公钥</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"publickey.txt"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义JwtTokenStore，使用jwt令牌</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TokenStore <span class="token function">tokenStore</span><span class="token punctuation">(</span>JwtAccessTokenConverter jwtAccessTokenConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义JJwtAccessTokenConverter，使用jwt令牌</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAccessTokenConverter <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtAccessTokenConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setVerifierKey</span><span class="token punctuation">(</span><span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取非对称加密公钥 Key     * @return 公钥 Key     */</span>    <span class="token keyword">private</span> String <span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Http安全配置，对每个到达系统的http请求链接进行校验</span>    <span class="token comment" spellcheck="true">//通过下边的配置虽然可以访问swagger-ui，但是无法进行单元测试，除非去掉认证的配置或在上边配置中添加所有 请求均放行（"/**"）。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//所有请求必须认证通过</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//下边的路径放行</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/v2/api-docs"</span><span class="token punctuation">,</span> <span class="token string">"/swagger-resources/configuration/ui"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-resources"</span><span class="token punctuation">,</span><span class="token string">"/swagger-resources/configuration/security"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-ui.html"</span><span class="token punctuation">,</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>请求没有携带令牌则报错</p><p>get <a href="http://localhost:31200/course/coursepic/list/4028e58161bd3b380161bd3bcd2f0000">http://localhost:31200/course/coursepic/list/4028e58161bd3b380161bd3bcd2f0000</a> </p><p>{ </p><p>​    “error”: “unauthorized”, </p><p>​    “error_description”: “Full authentication is required to access this resource” </p><p>}</p><p>请求时携带令牌： </p><p>在http header中添加 Authorization： Bearer 令牌 </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606171331627.png" alt="image-20200606171331627"></p><p>当输入错误的令牌也无法正常访问资源。</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606171350215.png" alt="image-20200606171350215"></p><h3 id="3-4-Oauth2密码模式授权"><a href="#3-4-Oauth2密码模式授权" class="headerlink" title="3.4 Oauth2密码模式授权"></a>3.4 Oauth2密码模式授权</h3><p>密码模式（Resource Owner Password Credentials）与授权码模式的区别是申请令牌不再使用授权码，而是直接 </p><p>通过用户名和密码即可申请令牌。 </p><p>测试如下： </p><p>Post请求：<a href="http://localhost:40400/auth/oauth/token">http://localhost:40400/auth/oauth/token</a> </p><p>参数： </p><p>grant_type：密码模式授权填写password </p><p>username：账号 </p><p>password：密码 </p><p>并且此链接需要使用 http Basic认证。 </p><p><img src="https://gitee.com/weifengxiaoye/images/raw/master/images/mdimage-20200606171603725.png" alt="image-20200606171603725"></p><p>注意：当令牌没有过期时同一个用户再次申请令牌则不再颁发新令牌。</p><h3 id="3-4-校验令牌"><a href="#3-4-校验令牌" class="headerlink" title="3.4 校验令牌"></a>3.4 校验令牌</h3><p>Spring Security Oauth2提供校验令牌的端点，如下： </p><p>Get: <a href="http://localhost:40400/auth/oauth/check_token?token=">http://localhost:40400/auth/oauth/check_token?token=</a> </p><p>参数： </p><p>token：令牌 </p><p>使用postman测试如下：</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606171657798.png" alt="image-20200606171657798"></p><p>exp：过期时间，long类型，距离1970年的秒数（new Date().getTime()可得到当前时间距离1970年的毫秒数）。 </p><p>user_name： 用户名 </p><p>client_id：客户端Id，在oauth_client_details中配置 </p><p>scope：客户端范围，在oauth_client_details表中配置 </p><p>jti：与令牌对应的唯一标识 </p><p>companyId、userpic、name、utype、id：这些字段是本认证服务在Spring Security基础上扩展的用户身份信息 </p><h3 id="3-4-刷新令牌"><a href="#3-4-刷新令牌" class="headerlink" title="3.4 刷新令牌"></a>3.4 刷新令牌</h3><p>刷新令牌是当令牌快过期时重新生成一个令牌，它于授权码授权和密码授权生成令牌不同，刷新令牌不需要授权码 </p><p>也不需要账号和密码，只需要一个刷新令牌、客户端id和客户端密码。</p><p>测试如下： </p><p>Post：<a href="http://localhost:40400/auth/oauth/token">http://localhost:40400/auth/oauth/token</a> </p><p>参数：</p><p>grant_type： 固定为 refresh_token </p><p>refresh_token：刷新令牌（注意不是access_token，而是refresh_token）</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606171832882.png" alt="image-20200606171832882"></p><p>刷新令牌成功，会重新生成新的访问令牌和刷新令牌，令牌的有效期也比旧令牌长。 </p><p>刷新令牌通常是在令牌快过期时进行刷新。</p><h3 id="3-6JWT研究"><a href="#3-6JWT研究" class="headerlink" title="3.6JWT研究"></a>3.6JWT研究</h3><h4 id="3-6-1JWT介绍"><a href="#3-6-1JWT介绍" class="headerlink" title="3.6.1JWT介绍"></a>3.6.1JWT介绍</h4><p>在介绍JWT之前先看一下传统校验令牌的方法，如下图： </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606172559369.png" alt="image-20200606172559369"></p><p>传统授权方法的问题是用户每次请求资源服务，资源服务都需要携带令牌访问认证服务去校验令牌的合法性，并根 </p><p>据令牌获取用户的相关信息，性能低下。 </p><p>解决： </p><p>使用JWT的思路是，用户认证通过会得到一个JWT令牌，JWT令牌中已经包括了用户相关的信息，客户端只需要携带 </p><p>JWT访问资源服务，资源服务根据事先约定的算法自行完成令牌校验，无需每次都请求认证服务完成授权。 </p><p>JWT令牌授权过程如下图： </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606172856043.png" alt="image-20200606172856043"></p><p>什么是JWT?</p><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于 </p><p>在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公 </p><p>钥/私钥对来签名，防止被篡改。 </p><p>官网：<a href="https://jwt.io/">https://jwt.io/</a> </p><p>标准：<a href="https://tools.ietf.org/html/rfc7519">https://tools.ietf.org/html/rfc7519</a> </p><p>JWT令牌的优点： </p><p>1、jwt基于json，非常方便解析。 </p><p>2、可以在令牌中自定义丰富的内容，易扩展。 </p><p>3、通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。 </p><p>4、资源服务使用JWT可不依赖认证服务即可完成授权。 </p><p>缺点： </p><p>１、JWT令牌较长，占存储空间比较大。</p><h5 id="3-6-1-1令牌结构"><a href="#3-6-1-1令牌结构" class="headerlink" title="3.6.1.1令牌结构"></a>3.6.1.1令牌结构</h5><p>通过学习JWT令牌结构为自定义JWT打好基础</p><p>JWT令牌由三部分组成,每部分中间使用点(  .  ) 分隔,比如 : xxxx.yyyy.zzzz</p><ul><li><p>Header</p><p>头部包括令牌的类型(既JWT ) 及使用的哈希算法 (如 HMAC SHA256或 RSA)</p><p>一个例子如下:</p><p>下边是Header部分的内容</p><p>{ </p><p>​    “alg”: “HS256”, </p><p>​    “typ”: “JWT” </p></li></ul><p>​        }</p><p>​        将上边的内容使用Base64Url编码，得到一个字符串就是JWT令牌的第一部分。 </p><ul><li><p>Payload </p><pre><code> 第二部分是负载，内容也是一个json对象，它是存放有效信息的地方，它可以存放jwt提供的现成字段，比 </code></pre><p>如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。 </p><p>此部分不建议存放敏感信息，因为此部分可以解码还原原始内容。 </p><p>最后将第二部分负载使用Base64Url编码，得到一个字符串就是JWT令牌的第二部分。</p><p>一个例子：</p></li></ul><p>​            { </p><p>​                “sub”: “1234567890”, </p><p>​                “name”: “456”, </p><p>​                “admin”: true </p><p>​        }</p><ul><li><p>Signature </p><p>第三部分是签名，此部分用于防止jwt内容被篡改。 </p><p>这个部分使用base64url将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用header中声明 </p><p>签名算法进行签名。 </p><p>一个例子：</p><p>HMACSHA256( </p><p>base64UrlEncode(header) + “.” + </p><p>base64UrlEncode(payload), </p><p>secret)</p></li></ul><p>   base64UrlEncode(header)：jwt令牌的第一部分。 </p><p>   base64UrlEncode(payload)：jwt令牌的第二部分。 </p><p>   secret：签名所使用的密钥。 </p><h5 id="3-6-1-2-JWT生成私钥和公钥"><a href="#3-6-1-2-JWT生成私钥和公钥" class="headerlink" title="3.6.1.2 JWT生成私钥和公钥"></a>3.6.1.2 JWT生成私钥和公钥</h5><p>Spring Security 提供对JWT的支持，本节我们使用Spring Security 提供的JwtHelper来创建JWT令牌，校验JWT令牌等操作。</p><p>JWT令牌生成采用非对称加密算法 </p><ol><li><p>生成密钥证书</p><p>下边命令生成密钥证书,采用RSA算法每个证书包含公钥和私钥</p><pre class=" language-cmd"><code class="language-cmd">keytool -genkeypair -alias gulikey -keyalg RSA -keypass 123456 -keystore guli.keystore -storepass test1234</code></pre></li></ol><p>   Keytool 是一个java提供的证书管理工具 </p><p>   -alias：密钥的别名 </p><p>   -keyalg：使用的hash算法 </p><p>   -keypass：密钥的访问密码 </p><p>   -keystore：密钥库文件名，test.keystore保存了生成的证书 </p><p>   -storepass：密钥库的访问密码 </p><p>   根据提示输入即可</p><p>   <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606211321821.png" alt="image-20200606211321821"></p><p>   <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606211347446.png" alt="image-20200606211347446"></p><ol start="2"><li><p>查询证书信息</p><pre class=" language-cmd"><code class="language-cmd">#keytool -list -keystore 密钥库文件名keytool -list -keystore guli.keystore</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606211541252.png" alt="image-20200606211541252"></p></li><li><p>删除别名</p><pre class=" language-cmd"><code class="language-cmd">#keytool -delete -alias (密钥别名) -keystore 密钥库文件名keytool -delete -alias testkey -keystore test.keystore</code></pre></li><li><p>导出公钥</p><p>openssl是一个加解密工具包，这里使用openssl来导出公钥信息。</p><p>链接：<a href="https://pan.baidu.com/s/1VlpBAJDJLVusB522QDOj2A">https://pan.baidu.com/s/1VlpBAJDJLVusB522QDOj2A</a><br>提取码：00zc<br>下载安装后 配置path环境变量后即可 不行就重启下电脑</p><p>进入test.keystore文件所在目录执行如下命令：</p><pre class=" language-cmd"><code class="language-cmd">keytool -list -rfc --keystore .\guli.keystore | openssl x509 -inform pem -pubkey</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606212558261.png" alt="image-20200606212558261"></p><p>下面这一段内容就是公钥</p><pre class=" language-txt"><code class="language-txt">-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArc5gzgDy/ubSBkFlrd3WHt00KJbliu2j/AXkIUQR7CNYIJbYz1mjK1FAJs+Mh1TdzuIGdSaylACmkOGt58KYOFWurscBn9a4UWgXy+W6mF8q2zWflxdywrybj/p3FpnHJGHumSasHZ7M65hn/AeW5muyuwlsvrqrBmFCmbl/GO8AFEIeUgDSorZGOp87CY7rKbrybfqJpxiMEAq0OHJ5vXxyqrasrBk5S/OepDN5ff0Ds9A7KBrv+l33FL4ue0xKUfl+6KmQm6Pp5JJc0zWRNi44IHBzE003eCTb/Clm9U2t2cGJXHRQSLCmV7vAnCdg0Vc0h5x9bMVNP4Poq8NXLwIDAQAB-----END PUBLIC KEY-----</code></pre><pre class=" language-guli.txt"><code class="language-guli.txt">-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4YdHBudqE4Mybb//gnw7CejDXeWoxdxOs7OewTIx9G2xHu1wOlM4MHO3thOSRaL7nSzfjxzyR3d7UVpjCD1V9JfnjZFbv3SnAsJPFcKCSyreqCUW7FCZVRzoUFzOir+G0moTjQxtDJ65EfduuK56A+pS7MCG0olKZhK5ThL0Fbp0J7GKMLbbLf0TvkpBTjMMISsp3vKr3enfubY3leS6pKbWzepBho8wKlEc4Hpz2G+0uCasvGSbcwIqwYVzfpY49DrLFjj6k49Sq3n8zANfY+IEy+0bJnm7f4OGWczRZESegDRLj5flxmwc3fy9Ya0KghFB8UeHIAXVzhqfYPnbPQIDAQAB-----END PUBLIC KEY-----</code></pre></li></ol><pre><code>  将上面的公钥拷贝到文本文件中,合并为一行 (因为空格有换行符,会导致错误)</code></pre><h5 id="3-6-1-3-生成jwt令牌"><a href="#3-6-1-3-生成jwt令牌" class="headerlink" title="3.6.1.3 生成jwt令牌"></a>3.6.1.3 生成jwt令牌</h5><p>​      使用一项技术之前先测试下,测试jwt令牌的生成与验证</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJwt</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建jwt令牌</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//密钥库文件</span>        String keystore <span class="token operator">=</span> <span class="token string">"test.keystore"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥库的密码</span>        String keystore_password <span class="token operator">=</span> <span class="token string">"test1234"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥库文件路径</span>        ClassPathResource classPathResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>keystore<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥别名</span>        String alias  <span class="token operator">=</span> <span class="token string">"testkey"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥的访问密码</span>        String key_password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥工厂</span>        KeyStoreKeyFactory keyStoreKeyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyStoreKeyFactory</span><span class="token punctuation">(</span>classPathResource<span class="token punctuation">,</span>keystore_password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//密钥对（公钥和私钥）</span>        KeyPair keyPair <span class="token operator">=</span> keyStoreKeyFactory<span class="token punctuation">.</span><span class="token function">getKeyPair</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> key_password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取私钥</span>        RSAPrivateKey aPrivate <span class="token operator">=</span> <span class="token punctuation">(</span>RSAPrivateKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jwt令牌的内容</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"weifeng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String bodyString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成jwt令牌</span>        Jwt jwt <span class="token operator">=</span> JwtHelper<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bodyString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RsaSigner</span><span class="token punctuation">(</span>aPrivate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成jwt令牌编码</span>        String encoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606220221451.png" alt="image-20200606220221451"></p><p>验证jwt令牌</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//校验jwt令牌</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testVerify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//公钥</span>        String publickey <span class="token operator">=</span> <span class="token string">"-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArc5gzgDy/ubSBkFlrd3WHt00KJbliu2j/AXkIUQR7CNYIJbYz1mjK1FAJs+Mh1TdzuIGdSaylACmkOGt58KYOFWurscBn9a4UWgXy+W6mF8q2zWflxdywrybj/p3FpnHJGHumSasHZ7M65hn/AeW5muyuwlsvrqrBmFCmbl/GO8AFEIeUgDSorZGOp87CY7rKbrybfqJpxiMEAq0OHJ5vXxyqrasrBk5S/OepDN5ff0Ds9A7KBrv+l33FL4ue0xKUfl+6KmQm6Pp5JJc0zWRNi44IHBzE003eCTb/Clm9U2t2cGJXHRQSLCmV7vAnCdg0Vc0h5x9bMVNP4Poq8NXLwIDAQAB-----END PUBLIC KEY-----"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jwt令牌</span>        String jwtString <span class="token operator">=</span> <span class="token string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoid2VpZmVuZyJ9.rLjbfU4ipnhxTjMJvnsp4Fpr79hKOS33EW12GY0IOKo335vHV7ifL9i-D93w6_etXSSdIaOSFcqPgBvmZ-PEHDJP31hvtVNIlVMsqUulruNR5PnD1ElopuW38EI7wQw5C9jc3gvb0t02B4znVBLjmP3mm9IIMmMYleBkVBkBsMrmHNShc3FJxZq0eo_jEu4uBpL5JDN02bnLuHQI339QHgJmS7oggkAwTqAlHP1R7qB7MwLL4T409maakQXjOlTlrlUyMpU-rD-FH6mpZlxozyttuVrPweKNdpyFzeFnD0IHOpkCWMD-1mkQ6DbxlGh1Bo78CQNu5TnsaIp2ae2aSg"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//校验jwt令牌</span>        Jwt jwt <span class="token operator">=</span> JwtHelper<span class="token punctuation">.</span><span class="token function">decodeAndVerify</span><span class="token punctuation">(</span>jwtString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RsaVerifier</span><span class="token punctuation">(</span>publickey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿到jwt令牌中自定义的内容</span>        String claims <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606223725331.png" alt="image-20200606223725331"></p><h2 id="4-认证接口开发"><a href="#4-认证接口开发" class="headerlink" title="4 认证接口开发"></a>4 认证接口开发</h2><p>用户登陆的流程图如下</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200606231131193.png" alt="image-20200606231131193"></p><p>执行流程:</p><ol><li><p>用户登陆,请求认证服务</p></li><li><p>认证服务通过,生成jwt令牌,将jwt令牌及相关信息写入redis,并且将身份令牌写入cookie</p></li><li><p>用户访问资源页面,带着cookie到网关</p></li><li><p>用户从cookie获取token,并查询redis校验token,如果token不存在则拒绝访问,否则放行</p></li><li><p>用户退出,请求认证服务,清除redis中的token,并且删除cookie中的token</p><p>使用redis存储用户的身份令牌有一下作用</p><ol><li>实现用户退出注销功能,服务端清除令牌后,即使客户端请求携带token也是无效的</li><li>由于jwt令牌过长不宜存储在cookie中,所以将jwt存储在redis,有客户端请求服务端获取并在客户端存储</li></ol></li></ol><h2 id="4-1-认证服务"><a href="#4-1-认证服务" class="headerlink" title="4. 1 认证服务"></a>4. 1 认证服务</h2><h4 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h4><p>认证服务需要实现的功能如下:</p><ol><li><p>登陆接口</p><p>前端post提交账号,密码,用户身份校验通过,生成令牌,并将令牌存储到redis</p><p>将令牌写入cookie</p></li><li><p>退出接口</p><p>校验当前用户的身份为合法并且为已登陆状态</p><p>将令牌从reids删除</p><p>删除cookie中的令牌</p></li></ol><p>   ==<strong>业务流程如下</strong>==</p><p>   <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607090915871.png" alt="image-20200607090915871"></p><h4 id="4-1-2-Api接口"><a href="#4-1-2-Api接口" class="headerlink" title="4.1.2 Api接口"></a>4.1.2 Api接口</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/4 16:22 */</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户认证"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"用户认证接口"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthControllerApi</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 登陆     * @param loginRequest     * @return     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"登陆"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> LoginResult <span class="token function">login</span> <span class="token punctuation">(</span>LoginRequest loginRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 退出     * @return     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询用户jwt令牌     * @return     */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"查询用户jwt令牌"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JwtResult <span class="token function">userJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-3配置参数"><a href="#4-1-3配置参数" class="headerlink" title="4.1.3配置参数"></a>4.1.3配置参数</h4><p>application.yml中配置参数</p><pre class=" language-yml"><code class="language-yml">auth:  tokenValiditySeconds: 1200  #token存储到redis的过期时间  clientId: XcWebApp  clientSecret: XcWebApp  cookieDomain: localhost  cookieMaxAge: -1</code></pre><h4 id="4-1-4申请令牌测试"><a href="#4-1-4申请令牌测试" class="headerlink" title="4.1.4申请令牌测试"></a>4.1.4申请令牌测试</h4><p>为了不破坏Spring Security 的代码,我们在Service方法中通过RestTemplate请求spring Security 所暴露的申请令牌接口来申请令牌,下边是测试代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/4 17:00 */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>XcServiceList<span class="token punctuation">.</span>XC_SERVICE_UCENTER_AUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String authUrl <span class="token operator">=</span> uri<span class="token operator">+</span><span class="token string">"/auth/oauth/token"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * url  就是申请令牌的url         * method http的方法类型         * requestEntity 请求内容         * responseType 将响应的结果生成的类型         */</span>        <span class="token comment" spellcheck="true">//请求的内容分为两部分</span>          <span class="token comment" spellcheck="true">//1 . header 信息 , 包括了http basic认证信息</span>        MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String httpbasic <span class="token operator">=</span> <span class="token function">httpbasic</span><span class="token punctuation">(</span><span class="token string">"XcWebApp"</span><span class="token punctuation">,</span> <span class="token string">"XcWebApp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span>httpbasic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 包括 : grant_type username password</span>        MultiValueMap<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String <span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"12322"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String <span class="token operator">>></span> multiValueMapHttpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定restTemplate当遇到400或401响应的时候也不要抛出异常,也要正常返回值</span>        restTemplate<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultResponseErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleError</span><span class="token punctuation">(</span>ClientHttpResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当响应的值为400或401的时候也要正常响应,不要抛出异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//远程调用申请令牌</span>        ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">></span> exchange <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>authUrl<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> multiValueMapHttpEntity<span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map body1 <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到basic编码    * @param clientId     * @param clientSecret     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">httpbasic</span><span class="token punctuation">(</span>String clientId<span class="token punctuation">,</span>String clientSecret<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将客户端id和客户端密码拼接,按"客户端id,客户段密码"</span>       String string <span class="token operator">=</span> clientId<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>clientSecret<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//进行base64编码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> Base64Utils<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Basic "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-1-5service"><a href="#4-1-5service" class="headerlink" title="4.1.5service"></a>4.1.5service</h4><p>调用认证服务申请令牌,并将令牌存储到redis</p><ol><li><p>AuthToken</p><p>创建AuthToken模型类,存储申请的令牌,包括身份令牌,刷新令牌,jwt令牌</p><p>身份令牌：用于校验用户是否认证 </p><p>刷新令牌：jwt令牌快过期时执行刷新令牌 </p><p>jwt令牌：用于授权</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthToken</span> <span class="token punctuation">{</span>    String access_token<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问token</span>    String refresh_token<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新token</span>    String jwt_token<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jwt令牌</span><span class="token punctuation">}</span></code></pre><p>申请令牌的service方法如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/6/4 18:02 */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token keyword">final</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token keyword">final</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${auth.tokenValiditySeconds}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> tokenValiditySeconds<span class="token punctuation">;</span></code></pre></li></ol><pre><code>   public AuthService(LoadBalancerClient loadBalancerClient, RestTemplate restTemplate, StringRedisTemplate redisTemplate) {       this.loadBalancerClient = loadBalancerClient;       this.restTemplate = restTemplate;       this.redisTemplate = redisTemplate;   }   /**    * 用户认证申请令牌 将令牌存储到redis    * @param username    * @param password    * @param clientId    * @param clientSecret    * @return    */   public AuthToken login(String username, String password, String clientId, String clientSecret) {       AuthToken authToken = this.applyToken(username, password, clientId, clientSecret);       if (authToken == null) {           ExceptionCast.cast(AuthCode.AUTH_LOGIN_APPLYTOKEN_FAIL);       }       //用户身份的令牌       String access_token = authToken.getAccess_token();       //存储到redis       //存储到redis中的内容       String content = JSON.toJSONString(authToken);       boolean token = this.saveToken(access_token, content, tokenValiditySeconds);       if (!token){           ExceptionCast.cast(AuthCode.AUTH_LOGIN_TOKEN_SAVEFAIL);       }       return authToken;   }   /**    * 存储到redis    * @param access_token 用户身份令牌    * @param content 内容就是authtoken对象的内容    * @param ttl 过期时间    * @return    */   private boolean saveToken(String access_token,String content,long ttl){       String key = "user_token:" + access_token;       redisTemplate.boundValueOps(key).set(content,ttl, TimeUnit.SECONDS);       Long expire = redisTemplate.getExpire(key, TimeUnit.SECONDS);       if (expire == null){           expire = 0L;       }       return expire &gt; 0;   }   /**    * 申请令牌    * @param username    * @param password    * @param clientId    * @param clientSecret    * @return    */   private AuthToken applyToken(String username, String password, String clientId, String clientSecret){       //请求spring Security令牌       //从eureka中获取认证服务的地址(因为spring security 在认证服务中)       //从eureka中获取认证服务的一个实例的地址       ServiceInstance serviceInstance = loadBalancerClient.choose(XcServiceList.XC_SERVICE_UCENTER_AUTH);       URI uri = serviceInstance.getUri();       String authUrl = uri+"/auth/oauth/token";       /**        * url  就是申请令牌的url        * method http的方法类型        * requestEntity 请求内容        * responseType 将响应的结果生成的类型        */       //请求的内容分为两部分       //1 . header 信息 , 包括了http basic认证信息       MultiValueMap&lt;String, String&gt; headers = new LinkedMultiValueMap&lt;&gt;();       String httpbasic = httpbasic(clientId, clientSecret);       headers.add("Authorization",httpbasic);       //2. 包括 : grant_type username password       MultiValueMap&lt;String ,String &gt; body = new LinkedMultiValueMap&lt;&gt;();       body.add("grant_type","password");       body.add("username",username);       body.add("password",password);       HttpEntity&lt;MultiValueMap&lt;String,String &gt;&gt; multiValueMapHttpEntity = new HttpEntity&lt;&gt;(body,headers);       //指定restTemplate当遇到400或401响应的时候也不要抛出异常,也要正常返回值       restTemplate.setErrorHandler(new DefaultResponseErrorHandler(){           @Override           public void handleError(ClientHttpResponse response) throws IOException {               //当响应的值为400或401的时候也要正常响应,不要抛出异常               if (response.getRawStatusCode() != 400 &amp;&amp; response.getRawStatusCode() != 401) {                   super.handleError(response);               }           }       });       //远程调用申请令牌       ResponseEntity&lt;Map&gt; exchange = restTemplate.exchange(authUrl, HttpMethod.POST, multiValueMapHttpEntity, Map.class);       Map body1 = exchange.getBody();       if (body1 == null ||               body1.get("access_token")==null ||               body1.get("refresh_token") == null ||               body1.get("jti")==null){           //解析spring security           if (body1!=null &amp;&amp; body1.get("error_description")!=null){               String error_description = (String) body1.get("error_description");               if (error_description.contains("UserDetailsService returned null")){                   ExceptionCast.cast(AuthCode.AUTH_ACCOUNT_NOTEXISTS);               }else if (error_description.contains("坏的凭证")){                   ExceptionCast.cast(AuthCode.AUTH_CREDENTIAL_ERROR);               }           }       return null;       }       AuthToken authToken = new AuthToken();       authToken.setAccess_token((String)body1.get("jti"));       authToken.setRefresh_token((String)body1.get("refresh_token") );       authToken.setJwt_token((String)body1.get("access_token"));       return authToken;   }   /**    * 得到basic编码    * @param clientId    * @param clientSecret    * @return    */   private String httpbasic(String clientId,String clientSecret){       //将客户端id和客户端密码拼接,按"客户端id,客户段密码"       String string = clientId+":"+clientSecret;       //进行base64编码       byte[] encode = Base64Utils.encode(string.getBytes());       return "Basic "+new String(encode);   }   /**    * 从redis查询令牌    * @param token    * @return    */   public AuthToken getUserToken(String  token){       String key = "user_token:"+token;       //从redis取到令牌信息       String value = redisTemplate.opsForValue().get(key);       try {           return JSON.parseObject(value, AuthToken.class);       } catch (Exception e) {           log.error("getUserToken from redis and execute JSON parseObject error {}",e.getMessage());           return null;       }   }   /**    * 从redis中删除令牌    * @param uid    */   public void delToken(String uid) {       String key = "user_token:"+uid;       redisTemplate.delete(key);   }</code></pre><p>   }</p><pre><code> #### 4.1.6 Controller```java/** * @author 卫风 * @date 2020/6/4 18:01 */@RestController@RequestMapping("/")public class AuthController implements AuthControllerApi {    @Value("${auth.clientId}")    String clientId;    @Value("${auth.clientSecret}")    String clientSecret;    @Value("${auth.cookieDomain}")    String cookieDomain;    @Value("${auth.cookieMaxAge}")    int cookieMaxAge;    final AuthService authService;    public AuthController(AuthService authService) {        this.authService = authService;    }    /**     * 登陆     *     * @param loginRequest     * @return     */    @Override    @PostMapping("/userlogin")    public LoginResult login(LoginRequest loginRequest) {        if (loginRequest == null || StringUtils.isEmpty(loginRequest.getUsername())  ){            ExceptionCast.cast(AuthCode.AUTH_ACCOUNT_NOTEXISTS);        }        if (StringUtils.isEmpty(loginRequest.getPassword())){            ExceptionCast.cast(AuthCode.AUTH_PASSWORD_NONE);        }        //申请令牌        String username = loginRequest.getUsername();        String password = loginRequest.getPassword();        AuthToken authToken = authService.login(username,password,clientId,clientSecret);        String access_token = authToken.getAccess_token();        //将令牌存储到cookie        this.saveCookie(access_token);        return new LoginResult(CommonCode.SUCCESS,access_token);    }    /**     * 退出     *     * @return     */    @Override    public ResponseResult logout() {        //取出身份令牌        String uid = getTokenFormCookie();        //删除redis中的token        this.authService.delToken(uid);        //清楚cookie        clearCookie(uid);        return new ResponseResult(CommonCode.SUCCESS);    }    /**     * 清除cookie     * @param uid     */    private void clearCookie(String uid) {        //获取request        HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();        CookieUtil.addCookie(response,cookieDomain,"/","uid",uid,0,false);    }    /**     * 查询用户jwt令牌     *     * @return     */    @Override    @GetMapping("/userjwt")    public JwtResult userJwt() {        //取出cookie中的身份令牌        String tokenFormCookie = this.getTokenFormCookie();        if (tokenFormCookie == null){            return new JwtResult(CommonCode.FAIL,null);        }        //拿身份令牌从redis中查询jwt令牌        AuthToken userToken = authService.getUserToken(tokenFormCookie);        if (userToken!=null){            return new JwtResult(CommonCode.SUCCESS,userToken.getJwt_token());        }        //将jwt令牌返回给用户        return null;    }    /**     * 将令牌存储到cookie     * @param token     */    private void saveCookie(String  token){        //获取request        HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();        CookieUtil.addCookie(response,cookieDomain,"/","uid",token,cookieMaxAge,false);    }    /**     * 得到身份令牌     * @return     */    private String getTokenFormCookie(){        //获取request        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();        Map&lt;String, String&gt; map = CookieUtil.readCookie(request, "uid");        if ( map!=null &amp;&amp; map.get("uid")!=null){            return map.get("uid");        }        return null;    }}</code></pre><h4 id="4-1-7登陆url放行"><a href="#4-1-7登陆url放行" class="headerlink" title="4.1.7登陆url放行"></a>4.1.7登陆url放行</h4><p>认证服务默认都有校验用户的身份信息,这里需要将登陆url方行</p><p>在WebSecurityConfig类中重写configure(WebSecurity web)方法</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/userlogin"</span><span class="token punctuation">,</span><span class="token string">"/userlogout"</span><span class="token punctuation">,</span><span class="token string">"/userjwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="4-1-8测试认证接口"><a href="#4-1-8测试认证接口" class="headerlink" title="4.1.8测试认证接口"></a>4.1.8测试认证接口</h4><p>使用postman测试： </p><p>Post请求：<a href="http://localhost:40400/auth/userlogin">http://localhost:40400/auth/userlogin</a> </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607101137460.png" alt="image-20200607101137460"></p><h4 id="4-3-9测试写入Cookie"><a href="#4-3-9测试写入Cookie" class="headerlink" title="4.3.9测试写入Cookie"></a>4.3.9测试写入Cookie</h4><p>cookie最终会写到xuecheng.com域名下,可通过nginx代理进行认证,测试cookie是否写成功</p><ol><li><p>配置nginx代理</p><p>在ucenter.xuecheng.com下配置代理路径</p><pre class=" language-conf"><code class="language-conf">\#认证 location ^~ /openapi/auth/ { proxy_pass http://auth_server_pool/auth/; }</code></pre><p>添加</p><pre class=" language-conf"><code class="language-conf">1. \#认证服务    upstream auth_server_pool{    server 127.0.0.1:40400 weight=10;    }</code></pre></li><li><p>请求: <a href="http://ucenter.xuecheng.com/openapi/auth/userlogin">http://ucenter.xuecheng.com/openapi/auth/userlogin</a> </p><p>观察cookie写入结果</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200607101513075.png" alt="image-20200607101513075"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="posts/40991.html"/>
      <url>posts/40991.html</url>
      
        <content type="html"><![CDATA[<p>环境 : 阿里云服务器 centos7</p><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><p><strong>Docker为什么会出现?</strong></p><p>一款产品:开发–上线 两套环境 -&gt;应用环境,应用配置.</p><p>开发 —- 运维 问题:我在我的电脑上可以运行! 版本更新导致服务不可用,对于运维来说考验十分大</p><p>开发即运维!</p><p>环境配置十分麻烦,每个机器都要部署环境(集群Redis,ES,Hadoop…) 费时费力</p><p>发布一个项目 (jar + (Redis MySQL jdk ES)) ,项目能不能带上环境安装打包?</p><p>之前在服务器配置一个应用的环境Redis MySQL jdk ES Hadoop , 配置超麻烦,不能跨平台</p><p>Windows开发,发布到Linux上.</p><p>传统:开发打包成jar ,运维来做环境部署.</p><p>现在:开发打包部署上线,一套流程做完.</p><p>比如一个安卓应用 java – apk – 发布 (应用商店) –张三使用apk – 安装即可用</p><p>java – jar (环境) – 打包项目带上环境 (镜像) –(Docker仓库:商店) — 下载我们发布的镜像 – 直接运行即可<br><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200519093951171.png" alt="image-20200519093951171"></p><p>Docker的思想来自于集装箱</p><p>JRE – 多个应用 (端口冲突) – 原来都是交叉的</p><p>隔离:Docker核心思想–&gt;打包装箱. 每个箱子是互相隔离的</p><p>Docker给以上的问题,提出了解决方案.</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200519094046607.png" alt="image-20200519094046607"></p><p><strong>虚拟机技术缺点:</strong></p><p>1, 资源占用十分多</p><p>2, 冗余步骤多</p><p>3, 启动很慢</p><p><strong>容器化技术</strong></p><p>容器化技术并不是模拟一个完整的操作系统</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200519094232528.png" alt="image-20200519094232528"></p><p><strong>比较Docker和虚拟机技术的不同:</strong></p><ul><li><p>传统虚拟机，虚拟出一条硬件，运行一个 完整的操作系统，然后在这个系统上安装和运行软件-</p></li><li><p>容器内的应用直接运行在宿主机的内容， 容器是没有自己的内核的,也没有虚拟我们的硬件,所以就轻便了</p></li><li><p>每个容器间是相互隔离的,每个容器内部都有一个属于自己的文件系统,互不影响</p></li></ul><h5 id="应用更快速的交付和部署"><a href="#应用更快速的交付和部署" class="headerlink" title="应用更快速的交付和部署"></a>应用更快速的交付和部署</h5><p>传统:一堆帮助文档,安装程序</p><p>Docker:打包镜像发布测试,一键运行</p><h5 id="更便捷的升级和扩缩容"><a href="#更便捷的升级和扩缩容" class="headerlink" title="更便捷的升级和扩缩容"></a>更便捷的升级和扩缩容</h5><p>使用了Docker之后,我们部署应用就和搭积木一样</p><p>项目打包为一个镜像,水平扩展服务器A,服务器B</p><h5 id="更简单的系统运维系统"><a href="#更简单的系统运维系统" class="headerlink" title="更简单的系统运维系统"></a>更简单的系统运维系统</h5><p>在容器化之后,我们的开发,测试环境都是高度一致的.</p><h5 id="更高效的计算资源利用"><a href="#更高效的计算资源利用" class="headerlink" title="更高效的计算资源利用"></a>更高效的计算资源利用</h5><p>1核2g的服务器 可以同时运行几十个tomcat?!!!</p><p>Docker是内核级别的虚拟化,可以在一个物理机上运行很多的容器实例</p><p>服务器的性能可以被压榨到极致!</p><p>Docker安装 请参考视频  </p><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=6">狂神说</a></p><h2 id="1-Docker的常用命令"><a href="#1-Docker的常用命令" class="headerlink" title="1 Docker的常用命令"></a>1 Docker的常用命令</h2><h3 id="1-1帮助命令"><a href="#1-1帮助命令" class="headerlink" title="1.1帮助命令"></a>1.1帮助命令</h3><hr><pre class=" language-shell"><code class="language-shell"># docker   看docker版本docker version #docker    信息docker info#docker    万能命令docker 命令  --help</code></pre><p>帮助文档地址 : <a href="https://docs.docker.com/engine/reference/commandline/docker/###">https://docs.docker.com/engine/reference/commandline/docker/###</a></p><h3 id="1-2镜像命令"><a href="#1-2镜像命令" class="headerlink" title="1.2镜像命令"></a>1.2镜像命令</h3><hr><h4 id="1-2-1-查看镜像"><a href="#1-2-1-查看镜像" class="headerlink" title="1.2.1 查看镜像"></a>1.2.1 查看镜像</h4><pre class=" language-shell"><code class="language-shell"># 查看本机所有本地镜像docker images#解释REPOSITORY  镜像的仓库源TAG         镜像的标签IMAGE ID     镜像的IDCREATED        镜像的创建时间SIZE        镜像的大小# 命令的可选项  -a, --all            列出所有镜像  -q, --quiet          只显示镜像的ID</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516202139615.png" alt="image-20200516202537614"></p><h4 id="1-2-2搜索镜像"><a href="#1-2-2搜索镜像" class="headerlink" title="1.2.2搜索镜像"></a>1.2.2搜索镜像</h4><pre class=" language-shel"><code class="language-shel"># 搜索镜像docker search  镜像#可选项 通过收藏来过滤s--filter=STARS=3000 # 搜索的镜像就STARS大于3000以上的</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516202537614.png" alt="image-20200516202139615"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516203032925.png" alt="image-20200516203251174"></p><h4 id="1-2-3下载镜像"><a href="#1-2-3下载镜像" class="headerlink" title="1.2.3下载镜像"></a>1.2.3下载镜像</h4><pre class=" language-shell"><code class="language-shell">#下载镜像  docker pull 镜像名[:tag] [root@weifeng demo]# docker pull mysqlUsing default tag: latest         #如果没指定版本会下载最新的latest: Pulling from library/mysql# afb6ec6fdc1c: Pull complete        #分层下载 docker image的核心联合文件系统0bdc5971ba40: Pull complete      97ae94a2c729: Pull complete f777521d340e: Pull complete 1393ff7fc871: Pull complete a499b89994d9: Pull complete 7ebe8eefbafe: Pull complete 597069368ef1: Pull complete ce39a5501878: Pull complete 7d545bca14bf: Pull complete 0f5f78cccacb: Pull complete 623a5dae2b42: Pull complete Digest: sha256:beba993cc5720da07129078d13441745c02560a2a0181071143e599ad9c497faStatus: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest # 真实地址# 下面两个命令是一个意思docker pull mysql docker pull docker.io/library/mysql:latest#指定版本下载[root@weifeng demo]# docker pull mysql:5.7</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516203251174.png" alt="image-20200516203032925"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516204044043.png" alt="image-20200516204044043"></p><h4 id="1-2-4删除镜像"><a href="#1-2-4删除镜像" class="headerlink" title="1.2.4删除镜像"></a>1.2.4删除镜像</h4><pre class=" language-shell"><code class="language-shell">#通过id删除 docker rmi -f 镜像id[root@weifeng demo]# docker rmi -f b84d68d0a7db</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516205103306.png" alt="image-20200516205103306"></p><pre class=" language-shel"><code class="language-shel">#批量删除docker rmi -f $(docker images -aq)</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516205607709.png" alt="image-20200516222709710"></p><h3 id="1-3-容器命令"><a href="#1-3-容器命令" class="headerlink" title="1.3 容器命令"></a>1.3 容器命令</h3><hr><p><strong>说明: 有了镜像才可以创建容器,使用linux镜像来学习</strong></p><h4 id="1-3-1-运行容器"><a href="#1-3-1-运行容器" class="headerlink" title="1.3.1 运行容器"></a>1.3.1 运行容器</h4><pre class=" language-shell"><code class="language-shell">#下载centos镜像docker pull centos</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516210126742.png" alt="image-20200516205607709"></p><pre class=" language-she"><code class="language-she"># 运行镜像docker run  [可选参数] images# 参数说明--name="Name"      容器名字  tomcat1 tomcat2 用了区分容器-d              后台方式运行-it                使用交互方式运行,进入容器查看内容#注意 p(小写)  P(大写)-p                指定容器的端口   -p  8080:8080        -p        ip:主机端口:容器端口        -p      主机端口: 容器端口(常用)        -p      容器端口-P                指定随机端口    #测试 启动并进入容器[root@weifeng demo]# docker run -it centos /bin/bash[root@211e4bb80345 /]# ls  # 查看内部容器的centosbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517081501113.png" alt="image-20200517081501113"></p><h4 id="1-3-2退出容器"><a href="#1-3-2退出容器" class="headerlink" title="1.3.2退出容器"></a>1.3.2退出容器</h4><pre class=" language-shel"><code class="language-shel"># 退出 后容器停止[root@211e4bb80345 /]# exit# 容器不停止退出Ctrl+P+Q    </code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517084823536.png" alt="image-20200517082048104"></p><h4 id="1-3-3列出运行的容器"><a href="#1-3-3列出运行的容器" class="headerlink" title="1.3.3列出运行的容器"></a>1.3.3列出运行的容器</h4><pre class=" language-shell"><code class="language-shell">#docker ps 命令    # 当前正在运行的容器-a  #列出当前正在运行的容器+带出历史运行过的容器    -n=?#列出最近创建的容器    -p  #只显示容器的编号#列出运行的容器[root@weifeng demo]# docker ps#列出[root@weifeng demo]# docker ps -a#列出最近创建的容器 n后面数字可选[root@weifeng demo]# docker ps -a -n=1#只显示容器的编号[root@weifeng demo]# docker ps -aq</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516212245171.png" alt="image-20200516211552967"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516212550075.png" alt="image-20200516212019240"></p><h4 id="1-3-4-删除容器"><a href="#1-3-4-删除容器" class="headerlink" title="1.3.4 删除容器"></a>1.3.4 删除容器</h4><pre class=" language-shell"><code class="language-shell">#删除指定容器 运行中的不能删 如果强制删除 需要加 -f 参数(docker rm -f 容器id)docker rm 容器ID #删除所有容器docker rm -f $(docker ps -aq)</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516213054612.png" alt="image-20200516212245171"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516213405704.png" alt="image-20200516213054612"></p><h4 id="1-3-5-启动和停止容器的操作"><a href="#1-3-5-启动和停止容器的操作" class="headerlink" title="1.3.5 启动和停止容器的操作"></a>1.3.5 启动和停止容器的操作</h4><pre class=" language-shell"><code class="language-shell"># 启动容器docker start 容器ID</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516214229497.png" alt="image-20200516214229497"></p><pre class=" language-shell"><code class="language-shell">#停止正在运行容器docker stop 容器ID</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516214350489.png" alt="image-20200516213405704"></p><pre class=" language-shell"><code class="language-shell">docker restart  容器ID     #重启容器docker kill     容器ID     #强制停止当前容器</code></pre><h3 id="1-4常用的其他命令"><a href="#1-4常用的其他命令" class="headerlink" title="1.4常用的其他命令"></a>1.4常用的其他命令</h3><h4 id="1-4-1-后台启动容器"><a href="#1-4-1-后台启动容器" class="headerlink" title="1.4.1 后台启动容器"></a>1.4.1 后台启动容器</h4><pre class=" language-shell"><code class="language-shell"># 命令  docker run -d 镜像名[root@weifeng demo]# docker run -d centosc29b4906c418eb979e3dd111015508eca9e520cb08e6df51d5b41c5af2ab73c0[root@weifeng demo]# docker ps# 问题docker ps 发现 centos 停止了# 常见的坑,docker 容器使用后台运行 必须要有一个前台进程,否则docker就会自动停止</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516214800095.png" alt="image-20200516222104870"></p><h4 id="1-4-2-查看日志"><a href="#1-4-2-查看日志" class="headerlink" title="1.4.2 查看日志"></a>1.4.2 查看日志</h4><pre class=" language-shell"><code class="language-shell">docker logs -f             :跟踪日志输出--since     :显示某个开始时间的所有日志-t             :显示时间戳--tail         :仅列出最新N条容器日志#例子 运行容器 循环打印hello[root@weifeng demo]# docker run -d centos /bin/bash -c "while true;do echo hello;sleep 1;done"#显示日志 docker logs -tf --tail 10 容器ID[root@weifeng demo]# docker logs -tf --tail 10 40123a87d3a1</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516220201792.png" alt="image-20200516214350489"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516222104870.png" alt="image-20200516214800095"></p><h4 id="1-4-3查看容器中进程ID"><a href="#1-4-3查看容器中进程ID" class="headerlink" title="1.4.3查看容器中进程ID"></a>1.4.3查看容器中进程ID</h4><pre class=" language-shell"><code class="language-shell"># docker top 容器IDdocker top 40123a87d3a1</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200516222709710.png"></p><h4 id="1-4-4查看镜像-容器元数据"><a href="#1-4-4查看镜像-容器元数据" class="headerlink" title="1.4.4查看镜像|容器元数据"></a>1.4.4查看镜像|容器元数据</h4><pre class=" language-shell"><code class="language-shell">#查看容器元数据docker inspect 容器ID[root@weifeng ~]# docker ps -aqaa6357c78b8f40123a87d3a1763aa3e14833b9d4012f2b7237c3a8b11187c29b4906c418bbdd3d3fe2ff[root@weifeng ~]# docker inspect aa6357c78b8f[    {        "Id": "aa6357c78b8f51a724642f82c6fb329c4548dc8d4cae8644698f62bbd7573c09",        "Created": "2020-05-17T00:14:35.849665997Z",        "Path": "/bin/bash",        "Args": [],        "State": {            "Status": "exited",            "Running": false,            "Paused": false,            "Restarting": false,            "OOMKilled": false,            "Dead": false,            "Pid": 0,            "ExitCode": 0,            "Error": "",            "StartedAt": "2020-05-17T00:14:36.695023294Z",            "FinishedAt": "2020-05-17T00:18:06.576675345Z"        },    .....略]</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517083115608.png" alt="image-20200517083115608"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517084334731.png" alt="image-20200517084334731"></p><h4 id="1-4-5进入当前运行的容器"><a href="#1-4-5进入当前运行的容器" class="headerlink" title="1.4.5进入当前运行的容器"></a>1.4.5进入当前运行的容器</h4><pre class=" language-shell"><code class="language-shell">#我们通常都是使用后台的方式运行容器,有时需要进入容器,修改一些配置# 命令 方式一 docker exec -it 容器id   bashShell # 方式二[root@weifeng ~]# docker attach 容器ID#两种区别docker exec     #进入容器后开启一个新的终端,可以在里面操作(常用)docker attach   #进入容器正在执行的终端,不会启动新的进程</code></pre><p>方式一</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517085123029.png" alt="image-20200517084823536"></p><p>方式二</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517082048104.png" alt="image-20200517085123029"></p><h4 id="1-4-6从容器内拷贝文件到主机上"><a href="#1-4-6从容器内拷贝文件到主机上" class="headerlink" title="1.4.6从容器内拷贝文件到主机上"></a>1.4.6从容器内拷贝文件到主机上</h4><pre class=" language-shell"><code class="language-shell">docker cp 容器id:容器内文件路径   目的主机路径#查看运行的容器[root@weifeng ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESc7c90ac66437        centos              "/bin/bash"         18 minutes ago      Up 39 seconds                           angry_cohen#进入容器[root@weifeng ~]# docker attach c7c90ac66437[root@c7c90ac66437 home]# lsmy.java[root@c7c90ac66437 home]# read escape sequence#拷贝到/home文件下[root@weifeng ~]# docker cp c7c90ac66437:/home/my.java /home[root@weifeng ~]# lsauto_disk.sh  bt-uninstall.sh  demo  install.sh  softwore[root@weifeng ~]# cd /home/[root@weifeng home]# lscao  my.java  redis  www#拷贝式一个手动过程,之后可以通过 -v 卷的技术,可以实现文件自动同步</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517090747714.png" alt="image-20200517090747714"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517091953964.png" alt="image-20200517091953964"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517092923812.png" alt="image-20200517092923812"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517092953977.png" alt="image-20200517092953977"></p><p>docker 的命令是非常多的 ,上面只是最常用的命令</p><h2 id="2-Docker-的练习"><a href="#2-Docker-的练习" class="headerlink" title="2 Docker 的练习"></a>2 Docker 的练习</h2><blockquote><p>Docker安装nginx </p></blockquote><h3 id="2-1-安装nginx"><a href="#2-1-安装nginx" class="headerlink" title="2.1 安装nginx"></a>2.1 安装nginx</h3><ol><li><p>搜索镜像 search 建议去dockerhub搜索 可以看到==详细信息==</p><p>dockerHub地址:<a href="https://hub.docker.com/">docker仓库地址</a></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517094141117.png" alt="image-20200517094141117"></p></li><li><p>docker pull nginx</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517094220484.png" alt="image-20200517095240897"></p></li><li><p>步骤</p><pre class=" language-shell"><code class="language-shell">[root@weifeng ~]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              9beeba249f3e        29 hours ago        127MBcentos              latest              470671670cac        4 months ago        237MB#后台启动nginx 起名 nginx01 暴露端口号为20884(注意此端口需要你的服务器开放了此端口)# -d 后台运行# --name 给容器命名# -p 宿主机端口:容器内部端口[root@weifeng ~]# docker run -d --name nginx01 -p:20884:80 nginx6abddc1ce2eed5ecf4a1ae52026191c2d1a27c24c743b63e8c66379c450ba831[root@weifeng ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES6abddc1ce2ee        nginx               "nginx -g 'daemon of…"   7 seconds ago       Up 6 seconds        0.0.0.0:20884->80/tcp   nginx01c7c90ac66437        centos              "/bin/bash"              56 minutes ago      Up 38 minutes                               angry_cohen#测试[root@weifeng ~]# curl localhost:20884<!DOCTYPE html><html><head><title>Welcome to nginx!</title><style>    body {        width: 35em;        margin: 0 auto;        font-family: Tahoma, Verdana, Arial, sans-serif;    }</style></head><body><h1>Welcome to nginx!</h1><p>If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.</p><p>For online documentation and support please refer to<a href="http://nginx.org/">nginx.org</a>.<br/>Commercial support is available at<a href="http://nginx.com/">nginx.com</a>.</p><p><em>Thank you for using nginx.</em></p></body></html>#进入容器[root@weifeng ~]# docker exec -it nginx01 /bin/bashroot@6abddc1ce2ee:/# whereis nginxnginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@6abddc1ce2ee:/# cd /etc/nginx/ root@6abddc1ce2ee:/etc/nginx# llbash: ll: command not foundroot@6abddc1ce2ee:/etc/nginx# lsconf.d        koi-utf  mime.types  nginx.conf   uwsgi_paramsfastcgi_params    koi-win  modules     scgi_params  win-utfroot@6abddc1ce2ee:/etc/nginx# </code></pre></li></ol><p>   端口暴露的概念</p><p>   <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517095240897.png" alt="image-20200517101822590"></p><h3 id="2-2安装tomcat"><a href="#2-2安装tomcat" class="headerlink" title="2.2安装tomcat"></a>2.2安装tomcat</h3><pre class=" language-shell"><code class="language-shell">#官方的命令 容器用完就删 做测试可以用docker run -it --rm tomcat:9.0#下载在启动[root@weifeng ~]# docker pull tomcat:9.09.0: Pulling from library/tomcatDigest: sha256:ce753be7b61d86f877fe5065eb20c23491f783f283f25f6914ba769fee57886bStatus: Image is up to date for tomcat:9.0docker.io/library/tomcat:9.0#启动[root@weifeng ~]# docker run -d -p 20885:8080 --name tomcat01 tomcatUnable to find image 'tomcat:latest' locallylatest: Pulling from library/tomcatDigest: sha256:ce753be7b61d86f877fe5065eb20c23491f783f283f25f6914ba769fee57886bStatus: Downloaded newer image for tomcat:latest17aefd39887d6a5adbd1cd272957da8bc0344c2a12912ba92179c4906c3c19b0#进入容器[root@weifeng ~]# docker exec -it tomcat01 /bin/bashroot@17aefd39887d:/usr/local/tomcat# lsBUILDING.txt     LICENSE  README.md     RUNNING.txt  conf  logs        temp     webapps.distCONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  work#问题 1.linux命令少了 2.没有webapps  #原因 阿里云镜像默认是最小的镜像,所以不必要的都剔除了 保证最小可运行的环境root@17aefd39887d:/usr/local/tomcat# cd webappsroot@17aefd39887d:/usr/local/tomcat/webapps# lsroot@17aefd39887d:/usr/local/tomcat/webapps# # 注意 因为webapps里面没有文件 所以外部访问404#解决root@17aefd39887d:/usr/local/tomcat# lsBUILDING.txt     LICENSE  README.md     RUNNING.txt  conf  logs        temp     webapps.distCONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  work#进入到webapps.dist目录root@17aefd39887d:/usr/local/tomcat# cd webapps.dist/root@17aefd39887d:/usr/local/tomcat/webapps.dist# lsROOT  docs  examples  host-manager  managerroot@17aefd39887d:/usr/local/tomcat/webapps.dist# cd ../# 将webapps.dist目录下的文件拷贝到webapps目录下root@17aefd39887d:/usr/local/tomcat# cp -r webapps.dist/* webappsroot@17aefd39887d:/usr/local/tomcat# cd webappsroot@17aefd39887d:/usr/local/tomcat/webapps# lsROOT  docs  examples  host-manager  managerroot@17aefd39887d:/usr/local/tomcat/webapps# </code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517101119304.png" alt="image-20200517094220484"></p><p>解决</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517101822590.png" alt="image-20200517101119304"></p><h3 id="2-3-安装Elasticsearch和Kibana"><a href="#2-3-安装Elasticsearch和Kibana" class="headerlink" title="2.3 安装Elasticsearch和Kibana"></a>2.3 安装Elasticsearch和Kibana</h3><pre class=" language-shell"><code class="language-shell">#es暴露的端口很多#es十分的耗内存#es的数据一般要放置到安全目录!挂载# --net somentwork ?网络配置#启动 docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2#启动了 liunx就卡住了 不建议这样用 服务器配置高的随意 我的直接卡住了docker stats 查看</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517112227788.png" alt="image-20200517112227788"></p><pre class=" language-shell"><code class="language-shell">#es是十分耗内存的 启动可以增加内存的限制,修改配置文件 -e 环境配置修改docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m"  elasticsearch:7.6.2#再次查看(注意 这个命令的容器和之前的容器名相同了 把之前的删掉就行了)#启动后就运行的快了</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517112725309.png" alt="image-20200517112725309"></p><pre class=" language-shel"><code class="language-shel">#查看[root@weifeng ~]# curl localhost:9200</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517112951781.png" alt="image-20200517112951781"></p><h3 id="2-4-Docker可视化"><a href="#2-4-Docker可视化" class="headerlink" title="2.4 Docker可视化"></a>2.4 Docker可视化</h3><ul><li><p> portainer (先用这个)</p></li><li><p>Rancher(CI/CD再用)</p><p>protainer</p></li></ul><p>Docker 图形化界面管理工具!提供一个后台面板供我们操作!</p><pre class=" language-shell"><code class="language-shell">docker run -d -p 8088:9000 \--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517114400004.png" alt="image-20200517114400004"></p><p>访问8088 第一次加载会很慢 等待即可</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517114542057.png" alt="image-20200517114542057"></p><p>自己设置密码即可 密码长度大于八位</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517114847613.png" alt="image-20200517114847613"></p><h2 id="3-Docker镜像讲解"><a href="#3-Docker镜像讲解" class="headerlink" title="3 Docker镜像讲解"></a>3 Docker镜像讲解</h2><h3 id="3-1镜像是什么"><a href="#3-1镜像是什么" class="headerlink" title="3.1镜像是什么"></a>3.1镜像是什么</h3><hr><p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=19">推荐看视频理解</a></p><p>镜像是一种轻量级,可执行的独立软件包,用来打包软件运行环境和基于环境开发的软件,它包含运行某个软件所需的所有内容,包括代码,运行时,库,环境变量和配置文件.</p><p>==所有的应用,直接打包docker镜像,就可以直接跑起来!==</p><p>如何得到镜像:</p><ul><li>从远程仓库下载</li><li>朋友拷贝给你</li><li>自己制作一个镜像  Docker FIle</li></ul><h3 id="3-2-Docker镜像加载原理"><a href="#3-2-Docker镜像加载原理" class="headerlink" title="3.2 Docker镜像加载原理"></a>3.2 Docker镜像加载原理</h3><blockquote><p><strong>UnionFS（联合文件系统）</strong></p></blockquote><p>UnionFS联合文件系统是一种分层的，轻量级并且高性能的文件系统，它最大的特点就是可以支持对文件的修改作为一次提交来一层层放叠加，同时可以将不同的目录挂载到同一个虚拟文件系统下（unite several directiories into a single virtual filesystem。UnionFS联合文件系统是Docker镜像的基础，镜像可以通过分层来继承，基于基础镜像可以制作成各种应用镜像。</p><p>特性: 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517122110497.png" alt="image-20200517122110497"></p><p>虚拟机式分钟级别,容器是秒级!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517123848049.png" alt="image-20200517123848049"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517123912388.png" alt="image-20200517123912388"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517124717173.png" alt="image-20200517124717173"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517124848144.png" alt="image-20200517124848144"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517125134360.png" alt="image-20200517125134360"></p><h3 id="3-3-commit镜像"><a href="#3-3-commit镜像" class="headerlink" title="3.3 commit镜像"></a>3.3 commit镜像</h3><pre class=" language-shell"><code class="language-shell">docker commit 提交容器成为一个新的副本docker commit -m="提交的描述信息" -a="作者" 容器id 目标镜像名:[TAG]</code></pre><p>测试</p><pre class=" language-shell"><code class="language-shell">#启动默认的tomcatdocker run -it -p 8080:8080 tomcat /bin/bash#发现这个默认的tomcat是没有webapps应用 ,镜像的原因 官方的镜像默认webapps 是没有文件的#手动拷贝进去#将修改后的容器 通过commit 提交为一个镜像! 以后就可以使用修改后的镜像了[root@weifeng ~]# docker commit -a="卫风" -m="add webapps" 482f029ecab1 tomcat02:1.0</code></pre><p>自己创建镜像</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517131314251.png" alt="image-20200517131314251"></p><pre><code>如果你想要保存当前容器的状态,就可以通过commit来提交,来获得一个镜像类似于虚拟机的快照 </code></pre><h2 id="4-容器数据卷"><a href="#4-容器数据卷" class="headerlink" title="4 容器数据卷"></a>4 容器数据卷</h2><h3 id="4-1什么是数据卷"><a href="#4-1什么是数据卷" class="headerlink" title="4.1什么是数据卷"></a>4.1什么是数据卷</h3><p><strong>docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像!<br>数据?如果都在容器中,那么我们容器删除,数据就会丢失! ==需求: 数据可以持久化==</p><p>MySQL,容器删了,删库跑路! ==需求: Mysql 数据可以存储在本地!==</p><p>容器之间可以有一个数据共享的技术! Docker容器中产生的数据,同步到本地!</p><p>这就是卷技术! 目录的挂载,将我们的容器内的目录挂载到Liunx上面</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517150018789.png" alt="image-20200517150018789"></p><p>==总结:容器化的持久化和同步操作,容器间也可以数据共享的!==</p><h3 id="4-2使用数据卷"><a href="#4-2使用数据卷" class="headerlink" title="4.2使用数据卷"></a>4.2使用数据卷</h3><hr><blockquote><p>方式一:直接使用命令来挂载 -v</p></blockquote><pre class=" language-shell"><code class="language-shell">docker run -it -v 主机目录:容器内目录#测试[root@weifeng test]# docker run -it -v /home/test/:/home centos /bin/bash</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517164859601.png" alt="image-20200517164859601"></p><pre class=" language-shell"><code class="language-shell">查看容器元数据docker inspect 容器id[root@weifeng test]# docker inspect 5c1c442d3e5a#找到mounts可以看到挂载</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517165806157.png" alt="image-20200517165806157"></p><pre class=" language-shell"><code class="language-shell">#测试在容器内部的操作会自动同步到容器外挂载的目录 类似vue双向绑定</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/image-20200517170226227.png" alt="image-20200517170226227"></p><ol><li>停止容器</li><li>在宿主机上修改文件</li><li>启动容器</li><li>容器内的数据依旧是同步的</li></ol><p>==好处: 我们以后修改只需要在本地修改即可,容器会自动同步!==</p><h3 id="4-3-安装MySql"><a href="#4-3-安装MySql" class="headerlink" title="4.3 安装MySql"></a>4.3 安装MySql</h3><p>MySQL的数据库持久化的问题</p><pre class=" language-shell"><code class="language-shell">#下载mysql[root@weifeng test]# docker pull mysql:5.7</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517191940298.png" alt="image-20200517191940298"></p><pre class=" language-shell"><code class="language-shell">#运行容器 ,需要做数据挂载 配置mysql的账户密码#官方   docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag#实际运行的命令 根据情况自己修改即可# -d    后台运行# -p    端口映射# -v    卷映射 可以配置多个# -e    环境配置# -name 容器名字  [root@weifeng ~]# docker run -d -p 28885:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517194600589.png" alt="image-20200517194600589"></p><p>通过外部访问成功</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517195006784.png" alt="image-20200517195006784"></p><p>用sqlyog创建数据库 会同步到宿主机挂载的目录下</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517202230902.png" alt="image-20200517202230902"></p><p>==此时就算把容器删除,挂载到本地的数据卷依旧没有丢失,这就实现了容器数据持久化功能!==</p><h3 id="4-4-具名和匿名挂载"><a href="#4-4-具名和匿名挂载" class="headerlink" title="4.4 具名和匿名挂载"></a>4.4 具名和匿名挂载</h3><pre class=" language-shell"><code class="language-shell">#匿名挂载-v容器 容器内路径!docker run -d -p --name nginx01 -v /etc/nainx nginx#查看所有的volume的情况[root@weifeng test]# docker volume lsDRIVER              VOLUME NAMElocal             45a74152a07762e29e08569ada14eddeda23afc717be8d6a18d7326960926ad4#这里发现,这就是匿名挂载,我们在 -v 里只写了容器内的路径,没有写容器外的路径#具名挂载[root@weifeng test]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx3aab8c7c6c12f7e8a86956e347fa38a38b6c13c3b632298b9324a4a3df6b3bba[root@weifeng test]# docker volume lsDRIVER              VOLUME NAMElocal               juming-nginx# 通过 -v 卷名:容器内路径# 查看这个卷</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdmdimage-20200517214405786.png" alt="image-20200517214405786"></p><p>所有的docker容器内的卷,没有指定目录的情况下 都是在    ==/var/lib/docker/volume/***(卷名)/data==</p><p>我们通过具名挂载可以方便的找到我们的一个卷 推荐使用具名挂载</p><pre class=" language-shell"><code class="language-shell">#如何确定是具名挂载还是匿名挂载,还是指定路劲挂载-v 容器内路劲              #匿名挂载-v 卷名:容器内路劲           #具名挂载-v /宿主机路劲:容器内路径  #指定路劲挂载#扩展 通过 -v 容器内路径:ro或者rw 改变读写权限#ro    readonly   只读#rw       readwrite  可读可写# 一旦这个设置了容器权限,容器对我们挂载出来的内容就有限定了![root@weifeng _data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx###或者[root@weifeng _data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx# ro   只有看到ro就说明这个路劲只能通过宿主机来操作,容器内部是无法操作!</code></pre><blockquote><p>方式二</p></blockquote><pre class=" language-vim"><code class="language-vim">一 创建一个dockerfie文件 <span class="token punctuation">,</span>名字可以随机 建议 Dockerfile#通过这个脚本可以生成镜像<span class="token punctuation">,</span>镜像是一层一层的<span class="token punctuation">,</span>脚本一个个的命令<span class="token punctuation">,</span>每个命令都是一层FROM centosVOLUME   <span class="token punctuation">[</span><span class="token string">"volume01"</span><span class="token punctuation">,</span><span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD echo <span class="token string">"------end-------"</span>CMD <span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>bash           </code></pre><pre class=" language-shell"><code class="language-shell">[root@weifeng docker-test-volume]# docker build -f  dockerfile1 -t my/centos:1.0  .#这里的每个命令就是镜像的一层</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517220927641.png" alt="image-20200517220927641"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517221018688.png" alt="image-20200517221018688"></p><pre class=" language-shell"><code class="language-shell">#启动自己生成的镜像</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517221721086.png" alt="image-20200517221721086"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517222111054.png" alt="image-20200517222111054"></p><p>查看一些卷挂载的路劲</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517222027977.png" alt="image-20200517222027977"></p><p>测试一下刚才的文件是否同步出去了!</p><p>这种方式我们未来使用的十分多,因为我们通常会构建自己的镜像!</p><p>假设构建镜像的时候没有挂载卷,要手动镜像挂载 -v 卷名:容器内路径</p><h3 id="4-5数据卷容器"><a href="#4-5数据卷容器" class="headerlink" title="4.5数据卷容器"></a>4.5数据卷容器</h3><hr><p>多个mysql同步数据!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517222858750.png" alt="image-20200517222858750"></p><pre class=" language-shell"><code class="language-shell">#启三个容器[root@weifeng ~]# docker run -it --name docker1 f76d77329573[root@weifeng ~]# docker run -it --name docker02 --volumes-from docker1 f76d77329573[root@weifeng ~]# docker run -it --name docker03 --volumes-from docker1 f76d77329573</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517223254740.png" alt="image-20200517223254740"></p><p>进去docker01目录下创建文件</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517225023111.png" alt="image-20200517225023111"></p><p>不停止退出进去docker02 和docker03 分别查看</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517225216735.png" alt="image-20200517225216735"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517225253117.png" alt="image-20200517225253117"></p><p>此时发现另两个容器也有docker01文件</p><p>docker01文件同步到docker02和docker03容器</p><p>只要有一个容器存在数据依旧可以访问</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200517225901121.png" alt="image-20200517225901121"></p><p>多个mysql实现数据共享</p><pre class=" language-shell"><code class="language-shell">[root@weifeng ~]# docker run -d -p 28885:3306 -v /etc/mysql/conf.d -v /var/lib/mysql  -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7[root@weifeng ~]# docker run -d -p 28885:3306 -v /etc/mysql/conf.d -v /var/lib/mysql  -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 volumes-form mysql01 mysql:5.7#这个时候可以实现两个容器数据同步!</code></pre><p>结论:</p><p>容器之前配置信息的传递,数据容器的生命周期 一直持续倒没有容器使用为止</p><p>但是一旦你持久化到了本地,这个时候,本地的数据库是不会删除的!</p><h2 id="5-初始Dockerfile"><a href="#5-初始Dockerfile" class="headerlink" title="5 初始Dockerfile"></a>5 初始Dockerfile</h2><h3 id="5-1自定义镜像"><a href="#5-1自定义镜像" class="headerlink" title="5.1自定义镜像"></a>5.1自定义镜像</h3><p>Dockerfile就是用来构建docker 镜像的构建文件! 就是命令脚本</p><p>构建步骤:</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像(DockerHub,阿里云镜像仓库!)</li></ol><p>查看官方怎么做的?</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518080207913.png" alt="image-20200518080207913"></p><p>点击版本信息 以centos7 为例</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518080412344.png" alt="image-20200518080412344"></p><p>很多官方的镜像都是基础包,很多功能没有,我们通常会自己搭建自己的镜像!</p><p>官方既然可以制作镜像,那我们也可以!</p><h3 id="5-2DockerFile构建过程"><a href="#5-2DockerFile构建过程" class="headerlink" title="5.2DockerFile构建过程"></a>5.2DockerFile构建过程</h3><p><strong>基础知识</strong></p><ol><li>每个保留关键字(指令)都是必须是大写字母</li><li>执行从上到下顺序执行</li><li>#表示注释</li><li>每一个指令都会创建一个新的镜像层,并提交!</li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518081202603.png" alt="image-20200518081202603"></p><p>dockerfile是面向开发的,我们以后发布项目,做镜像,就需要编写dockerFile文件,这个文件十分简单</p><p>Docker镜像逐渐成为企业交付的标准,必须要掌握!</p><ul><li>DockerFile       :    构建文件,定义了一个一切的步骤,源代码</li><li>DocekrImages :    通过DockerFile构建生成的镜像,最终发布运行的产品</li><li>Docker容器       :      容器就是镜像运行起来提供服务器</li></ul><h3 id="5-3-学习dockerFile的指令"><a href="#5-3-学习dockerFile的指令" class="headerlink" title="5.3 学习dockerFile的指令"></a>5.3 学习dockerFile的指令</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdmdimage-20200518081112404.png" alt="image-20200518081112404"></p><pre class=" language-shell"><code class="language-shell">FROM            # 基础镜像,一起从这里开始构建MAINTAINER         # 镜像是谁写的,姓名+邮箱RUN                # 镜像构建的时候需要运行的命令ADD                # 编译镜像时复制文件到镜像中,比如添加个tomcat镜像WORKDIR            # 镜像的工作目录VOLUME            # 挂载的目录EXPOSE            # 暴露端口配置CMD                # 指定这个容器启动的时候要运行的命令,只有最后一个会生效,且可被替代ENTRYPOINT        # 指定这个容器启动的时候要运行的命令,可以追加命令ONBUILD            # 当构建一个被继承的 DockerFile 这个时候就会运行ONBUILD 的指令,触发指令COPY            # 类似ADD, 将我们的文件拷贝到镜像中ENY                # 构建的时候设置环境变量</code></pre><h3 id="5-4-实战测试"><a href="#5-4-实战测试" class="headerlink" title="5.4 实战测试"></a>5.4 实战测试</h3><hr><p>Docker Hub中 99% </p><p>镜像都是从这个基础镜像过来的 FROM scratch 然后配置需要的软件和配置来进行的构建</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518083835353.png" alt="image-20200518083835353"></p><blockquote><p>创建一个自己的CentOS镜像</p></blockquote><p> 编写dockerFile文件</p><p>  vim mydockerfile</p><pre class=" language-vim"><code class="language-vim">FROM centosMAINTAINER weifeng<span class="token operator">&lt;</span><span class="token number">1783246945</span>@qq<span class="token operator">.</span><span class="token builtin">com</span><span class="token operator">></span>ENV MYPATH  <span class="token operator">/</span>usr<span class="token operator">/</span>localWORKDIR $MYPATHRUN yum <span class="token operator">-</span><span class="token keyword">y</span> install <span class="token keyword">vim</span> RUN yum <span class="token operator">-</span><span class="token keyword">y</span> install net<span class="token operator">-</span>toolsEXPOSE <span class="token number">80</span>CMD echo $MYPATHCMD echo <span class="token string">"------end-----"</span>CMD <span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>bash     </code></pre><p>通过这个镜像构建镜像</p><pre class=" language-shell"><code class="language-shell">#命令 docker build -f dockerfile文件路径 -t 镜像名:[tag][root@weifeng dockerfile]# docker build -f mydockerfile -t mycentos:0.1 .#最后成功标识Successfully built d97c9630e08eSuccessfully tagged mycentos:0.1# 进行测试</code></pre><p>对比 : 之前的工作目录默认是根目录,没有ifconfig  和 vim</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518090743960.png" alt="image-20200518090743960"></p><p>自己创建的镜像</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518090833741.png" alt="image-20200518090833741"></p><p>我们可以列出本地镜像的变更历史</p><pre class=" language-shell"><code class="language-shell"># 命令 docker history 镜像id[root@weifeng dockerfile]# docker history d97c9630e08e</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518092657224.png" alt="image-20200518092657224"></p><p>我们平时拿到一个镜像可以研究它是怎么做的</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><pre class=" language-shell"><code class="language-shell">CMD                # 指定这个容器启动的时候要运行的命令,只有最后一个会生效,且可被替代ENTRYPOINT        # 指定这个容器启动的时候要运行的命令,可以追加命令</code></pre><p>测试CMD</p><pre class=" language-shell"><code class="language-shell">#建dockerfile文件vim cmd-test#内容FROM centosCMD ["ls","-a"]#执行构建[root@weifeng dockerfile]# docker build -f cmdtest -t cmdtest .#成功之后直接执行构建后的镜像[root@weifeng dockerfile]# docker run c63eb140ebc4#发现ls-a 生效了....dockerenvbindevetchomeliblib64lost+foundmediamnt# 测试追加个命令 [root@weifeng dockerfile]# docker run c63eb140ebc4 -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\": executable file not found in $PATH": unknown.[root@weifeng dockerfile]# # 因为cmd 的情况下 -l 替换了 CMD["ls","a"]命令, -l 不是命令所以报错!</code></pre><p>测试 ENTRYPOINT</p><pre class=" language-shell"><code class="language-shell">#创建dockerfile文件vim vim dockerfile-cmd-entrypoint#编写内容FROM centosENTRYPOINT ["ls","-a"]#保存后退出 进行构建 注意 后面的  . 不要忘了[root@weifeng dockerfile]# docker build -f dockerfile-cmd-entrypoint -t entrypoint-test .# 构建完运行此镜像[root@weifeng dockerfile]# docker run bd8100b2acff# 输出结果....dockerenvbindevetchome# 现在后面加 -l 进行测试[root@weifeng dockerfile]# docker run bd8100b2acff -l# 结果 我们的追加命令 是直接ENTRYPOINT 命令下的total 56drwxr-xr-x   1 root root 4096 May 18 02:02 .drwxr-xr-x   1 root root 4096 May 18 02:02 ..-rwxr-xr-x   1 root root    0 May 18 02:02 .dockerenvlrwxrwxrwx   1 root root    7 May 11  2019 bin -> usr/bindrwxr-xr-x   5 root root  340 May 18 02:02 devdrwxr-xr-x   1 root root 4096 May 18 02:02 etcdrwxr-xr-x   2 root root 4096 May 11  2019 homelrwxrwxrwx   1 root root    7 May 11  2019 lib -> usr/lib</code></pre><p>Dockerfile 中很多命令都十分相似,我们需要了解它们的区别,我们最好的学习就是对比他们然后测试效果!</p><h3 id="5-5-实战-Tomcat镜像"><a href="#5-5-实战-Tomcat镜像" class="headerlink" title="5.5 实战: Tomcat镜像"></a>5.5 实战: Tomcat镜像</h3><ol><li><p>准备镜像文件tomcat压缩包,jdk的压缩包!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518102907702.png" alt="image-20200518102907702"></p></li><li><p>编写dockerfile文件,官方命名 ==Dockerfile==  ,build 就会自动寻找这个文件,就不需要-f 指定docker file 文件路径</p><pre class=" language-shell"><code class="language-shell">FROM centos                                                                                                                      MAINTAINER weifeng<1783246945@qq.com>COPY readme.txt /usr/local/readme.txtADD jdk-8u241-linux-x64.tar.gz /usr/local/ADD apache-tomcat-9.0.35.tar.gz /usr/local/RUN yum -y install vim ENV MYPATH /usr/localWORKDIR $MYPATH</code></pre></li></ol><p>   ENV JAVA_HOME /usr/local/jdk1.8.0_241<br>   ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>   ENV CATALTNA_HOME /usr/local/apache-tomcat-9.0.35<br>   ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.35<br>   ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALTNA_HOME/bin</p><p>   EXPOSE 8080<br>   CMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.35/bin/logs/catalina.out</p><pre><code>3. 执行构建```shell[root@weifeng tomcat]# docker build -t diytomcat .</code></pre><p>   <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518105902315.png" alt="image-20200518105902315"></p><p>   <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518105939336.png" alt="image-20200518105939336"></p><ol start="4"><li><p>运行</p><pre class=" language-shell"><code class="language-shell">[root@weifeng tomcat]# docker run -d -p 9090:8080 --name mytomcat -v /home/cao/build/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test -v /home/cao/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.35/logs diytomcat</code></pre></li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518110438999.png" alt="image-20200518110438999"></p><ol start="5"><li><p>进入运行中的容器 访问测试</p><pre class=" language-shell"><code class="language-shell">[root@weifeng tomcat]# docker exec -it 5605928525ea /bin/bash</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518110741705.png" alt="image-20200518110741705"></p></li><li><p>发布项目</p></li></ol><p>因为之前挂载了 所以此时只要把文件 放到 挂载目录 就可以实时 发布了</p><p>容器外</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518112750265.png" alt="image-20200518112750265"></p><p>容器内</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518112813676.png" alt="image-20200518112813676"></p><p>访问后 发现可以访问</p><p>我们以后开发的步骤:需要掌握DockerFile的编写! 我们之后的一切都是使用docker镜像来发布运行!</p><h3 id="5-6发布自己的镜像"><a href="#5-6发布自己的镜像" class="headerlink" title="5.6发布自己的镜像"></a>5.6发布自己的镜像</h3><h4 id="5-6-1-发布到DOckerHub"><a href="#5-6-1-发布到DOckerHub" class="headerlink" title="5.6.1 发布到DOckerHub"></a>5.6.1 发布到DOckerHub</h4><ol><li><p>地址  <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>(需要自己注册个账号)</p></li></ol><ol start="2"><li><p>确定这个账号可以登陆</p></li><li><p>在我们服务器上提交自己的镜像</p></li><li><p>通过命令行登陆</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518150444105.png" alt="image-20200518150444105"></p><pre class=" language-shell"><code class="language-shell">docker login -u (用户名)   #回车后输入密码</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518151129890.png" alt="image-20200518151129890"></p></li><li><p>提交镜像</p><pre class=" language-shell"><code class="language-shell"># docker push <作者>/<镜像名>:版本号[root@weifeng ~]# docker push weifeng/diytomcat:1.0#出现问题The push refers to repository [docker.io/weifeng/diytomcat]An image does not exist locally with the tag: weifeng/diytomcat# 原因及解决 当前镜像没有版本 # docker tag 镜像id <作者用户名>/<镜像>:版本号[root@weifeng ~]# docker push 用户名/tomcat:1.0</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518153748485.png" alt="image-20200518153748485"></p><p>提交的时候也是按照镜像的层级进行提交</p></li></ol><h4 id="5-6-2发布阿里云镜像"><a href="#5-6-2发布阿里云镜像" class="headerlink" title="5.6.2发布阿里云镜像"></a>5.6.2发布阿里云镜像</h4><ol><li><p>登陆阿里云</p></li><li><p>找到容器镜像服务</p></li><li><p>创建命名空间 点击创建就可以了(注意一个账户只能创建三个命名空间)</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518155534388.png" alt="image-20200518155534388"></p></li><li><p>创建镜像仓库 点击创建镜像仓库 一步一步创建即可</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518155800689.png" alt="image-20200518155800689"></p><p>填写完信息记得选本地仓库</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518155928224.png" alt="image-20200518155928224"></p><p>这就是创建成功</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518160026789.png" alt="image-20200518160026789"></p><p>示例</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518160333767.png" alt="image-20200518160333767"></p><p>根据步骤一步一步来即可</p><p>主要参考官方文档</p></li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518164129430.png" alt=" "></p><h2 id="6-Docker网络"><a href="#6-Docker网络" class="headerlink" title="6. Docker网络"></a>6. Docker网络</h2><h3 id="6-1-理解网络Docker0网络"><a href="#6-1-理解网络Docker0网络" class="headerlink" title="6.1 理解网络Docker0网络"></a>6.1 理解网络Docker0网络</h3><p>清空所有环境</p><blockquote><p>测试</p></blockquote><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518165250457.png" alt="image-20200518165250457"></p><p>三个网络</p><pre class=" language-shell"><code class="language-shell"># 问题 , docker 是如何处理容器网络访问的?</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518165427193.png" alt="image-20200518165427193"></p><pre class=" language-shell"><code class="language-shell">[root@weifeng ~]# docker run -d -P --name tomcat01 tomcat# 启动容器 查看容器内部的网络地址 ip addr[root@weifeng ~]# docker exec -it tomcat01 ip addr# 发现容器启动的时候得到一个 eth0@if55 地址 ,docker分配的[root@weifeng ~]# ping 172.17.0.2# 发现可以ping 通docker容器内部</code></pre><p><img src="upload%5Cimage-20200518170303001.png" alt="image-20200518170303001"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518170521670.png" alt="image-20200518170521670"></p><blockquote><p>原理</p></blockquote><p>1.我们每启动一个docker容器 ,docker 就会给docker容器分配一个ip 我们只要安装了docker,就会有一个网卡docker0</p><p>桥接模式, 使用的技术是 evth-pair技术</p><p>再次测试ip addr 发现多了一个网卡 </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518171207937.png" alt="image-20200518171207937"></p><ol start="2"><li>在启动一个tomcat02  发现有多了一对网卡</li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518171643398.png" alt="image-20200518171643398"></p><pre class=" language-shell"><code class="language-shell"># 我们发现这个容器带来的网卡 都是一对一对的# evth-pair 就是一对的虚拟设备接口,他们都是成对成对出现的,一端连接协议,一端彼此连接# 正因为有这个特性, evth-pair 充当一个桥梁,连接各种虚拟网络设备# OpenStac Docker 容器之间的连接,OVS 的连接 都是使用evth-pair 技术</code></pre><ol start="3"><li><p>我们测试下 tomcat01 和 tomcat02 可不可以ping通</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518180136961.png" alt="image-20200518180136961"></p><p>结论 : 容器和容器之间是可以ping通的</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518181906765.png" alt="image-20200518181906765"></p><p>结论: tomcat01 和 tomcat02 是公用的一个路由器,docker0</p><p>所有的容器不指定网络的情况下,都是docker0路由,docker会给我们的容器分配一个默认的可用IP</p><p>docker使用的是Linux的桥接,宿主机中是一个docker的网桥 docker0  (最多可以分配65535个)</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518182721586.png" alt="image-20200518182721586"></p><p>Docker 中的所有的网络接口都是虚拟的,虚拟的转发效率高!</p><p>(比如: 内网传递)</p><p>只有容器删除,对应的一对网桥就没了!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518215053533.png" alt="image-20200518215053533"></p></li></ol><h3 id="6-2-–link"><a href="#6-2-–link" class="headerlink" title="6.2 –link"></a>6.2 –link</h3><blockquote><p>思考一个场景,我们编写了一个微服务,database url=ip  , 项目不重启,数据库ip换掉了,我们希望可以处理这个问题,可以名字来访问容器?</p></blockquote><pre class=" language-shell"><code class="language-shell">[root@weifeng ~]# docker exec -it tomcat02 ping tomcat01ping: tomcat01: Name or service not known#如何可以解决呢?#docker run -d -P --name tomcat03 --link tomcat02 tomcat#docker exec -it tomcat03 ping tomcat0264 bytes from tomcat02 (172.17.0.3): icmp_seq=53 ttl=64 time=0.091 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=54 ttl=64 time=0.091 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=55 ttl=64 time=0.095 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=56 ttl=64 time=0.086 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=57 ttl=64 time=0.091 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq=58 ttl=64 time=0.085 ms#反向可以ping通吗?[root@weifeng ~]# docker exec -it tomcat2 ping tomcat03Error: No such container: tomcat2[root@weifeng ~]# # </code></pre><p>探究</p><pre class=" language-shell"><code class="language-shell"> # 列出docker网络ip docker network ls  # 查看name是brige的元数据  docker network inspect networkID docker network inspect 08f69d91fc03</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518214454748.png" alt="image-20200518214454748"></p><p>其实这个tomcat03就是在本地配置了tomcat02的配置</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518215622256.png" alt="image-20200518215622256"></p><p> 本质探究: –link 就是我们hosts配置中增加了一个 172.17.0.4   tomcat02 的映射</p><p>我们现在玩Docker 已经不建议使用docker0!</p><p>docker0问题 : 它不支持容器名连接访问!</p><h3 id="6-3-自定义网络"><a href="#6-3-自定义网络" class="headerlink" title="6.3 自定义网络"></a>6.3 自定义网络</h3><blockquote><p>查看所有的docker网络</p></blockquote><pre class=" language-shell"><code class="language-shell">[root@weifeng ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE08f69d91fc03        bridge              bridge              localf1d04511057a        host                host                local99e79746af60        none                null                local</code></pre><p>网络模式</p><p>bridge      :     桥接  docker </p><p>none        :       不配置网络</p><p>host         :          和宿主机共享网络</p><p>container:        容器网络连接联通!(用的少,局限大!)</p><p>测试</p><pre class=" language-shell"><code class="language-shell"># 把之前的容器都删掉 净化网络环境[root@weifeng ~]# docker rm -f $(docker ps -aq)# 查看网络[root@weifeng ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE08f69d91fc03        bridge              bridge              localf1d04511057a        host                host                local99e79746af60        none                null                local#我们之间启动的命令 默认有 --net bridge  这个就是我们的docker0[root@weifeng ~]# docker run -d -P --name tomcat01 - tomcat[root@weifeng ~]# docker run -d -P --name tomcat01 --net bridge tomcat#docker 特点 , 默认 ,域名不能访问 --link 可以打通容器#我们可以自定义一个网卡  自定义一个网络# --driver  bridge# --subnet 192.168.0.0/16# --gateway 192.168.0.1[root@weifeng ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet1c058a8b2e667f10b51a61a2639e15da2904073240e10538eb206ac6b7501d68[root@weifeng ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE08f69d91fc03        bridge              bridge              localf1d04511057a        host                host                local1c058a8b2e66        mynet               bridge              local99e79746af60        none                null                local# 查看自己创建的网络元数据docker network inspect mynet</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518222030659.png" alt="image-20200518222030659"></p><pre class=" language-shell"><code class="language-shell"># 用自己创建的网络运行tomcat容器[root@weifeng ~]# docker run -d -P --name tomcat01 --net mynet tomcat[root@weifeng ~]# docker run -d -P --name tomcat02 --net mynet tomcat</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518222212425.png" alt="image-20200518222212425"></p><pre class=" language-shell"><code class="language-shell">#再次测试 现在不使用--link 也可以ping名字了[root@weifeng ~]# docker exec -it tomcat01 ping tomcat02PING tomcat02 (192.168.0.3) 56(84) bytes of data.64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.088 ms64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.099 ms64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.085 ms64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=4 ttl=64 time=0.092 ms64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=5 ttl=64 time=0.093 ms</code></pre><p>我们自定义的网络docker 都已经帮我们维护了对应的关系,推荐我们平时这样使用网络!</p><p>好处:</p><p>redis  : 不同的集群使用不同的网络,保证集群是安全和健康的</p><p>mysql: 不同的集群使用不同的网络,保证集群是安全和健康的</p><h3 id="6-4-网络联通"><a href="#6-4-网络联通" class="headerlink" title="6.4 网络联通"></a>6.4 网络联通</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518223528284.png" alt="image-20200518223528284"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518223629036.png" alt="image-20200518223629036"></p><pre class=" language-shell"><code class="language-shell">#测试打通 tomcat01 和 1[root@weifeng ~]# docker network connect mynet tomcat1#查看元数据[root@weifeng ~]# docker network inspect mynet#连通后就是将tomcat01 放到了mynet网络下</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518224305678.png" alt="image-20200518224305678"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518224605478.png" alt="image-20200518224605478"></p><p>结论 : 假设要跨网络操作别人,就需要使用docekr network connect 连通 !</p><h3 id="6-5-部署Redis集群"><a href="#6-5-部署Redis集群" class="headerlink" title="6.5 部署Redis集群"></a>6.5 部署Redis集群</h3><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200518224936079.png" alt="image-20200518224936079"></p><pre class=" language-shell"><code class="language-shell">#shell脚本#创建网卡docker network create redis --subnet 172.38.0.0/16# 创建六个节点for port in $(seq 1 6);\do \mkdir -p /mydata/redis/node-${port}/conftouch /mydata/redis/node-${port}/conf/redis.confcat <<EOF>/mydata/redis/node-${port}/conf/redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1${port}cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone# 启动[root@weifeng ~]## 一次性启动docker run -p 637${port}:6379 -p 1637${port}:16379 --name redis-${port} \-v /mydata/redis/node-${port}/data:/data \-v /mydata/redis/node-${port}/conf/redis.conf:/etc/redis/redis.comf \-d --net redis --ip 172.38.0.1${port} redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf: \# 一个一个启动# 开启1docker run -p 6371:6379 -p 16371:16379 --name redis-1 -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf -v /mydata/redis/node-1/data:/data -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf# 开启2 docker run -p 6372:6379 -p 16372:16379 --name redis-2 -v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf -v /mydata/redis/node-2/data:/data -d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf# 开启3 这个只要把外面的端口改下就好 比如 6372:6379 改为 6373:6379 把涉及的改掉即可 docker run -p 6373:6379 -p 16373:16379 --name redis-3 -v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf -v /mydata/redis/node-3/data:/data -d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf # 后面的依次类推即可 #进入rdis-1 创建集群redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</code></pre><p>docker搭建redis集群完成!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200519084740551.png" alt="image-20200519084740551"></p><p>使用docker之后,所有的技术都会变得简单</p><h3 id="6-6-spirng-boot-微服务打包成Docker镜像"><a href="#6-6-spirng-boot-微服务打包成Docker镜像" class="headerlink" title="6.6 spirng boot 微服务打包成Docker镜像"></a>6.6 spirng boot 微服务打包成Docker镜像</h3><ol><li>构建spring boot项目</li><li>打包应用</li><li>编写dockerfile</li><li>构建镜像</li><li>发布运行</li></ol><p>以后我们使用了Docker之后,给别人交付的就是一个镜像即可!</p><h2 id="7-Docker-Compost"><a href="#7-Docker-Compost" class="headerlink" title="7 Docker Compost"></a>7 Docker Compost</h2><h2 id="8-Docker-Swarm"><a href="#8-Docker-Swarm" class="headerlink" title="8 Docker Swarm"></a>8 Docker Swarm</h2><h2 id="9-CI-CD-之Jenkins"><a href="#9-CI-CD-之Jenkins" class="headerlink" title="9 CI/CD 之Jenkins"></a>9 CI/CD 之Jenkins</h2>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus</title>
      <link href="posts/46045.html"/>
      <url>posts/46045.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><p><strong>需要的基础:Mybatis Spring SpringMVC</strong> </p><p>为什么要学? MybatisPlus可以解决我们大量的工作的时间</p><p>JPA  tk-mapper  MyBatisPlus</p><blockquote><p>简介</p></blockquote><p>是什么? </p><p>官网   <a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a>    Mybatis Plus  , 简化Mybatis!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526161950969.png" alt="image-20200526161950969"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526162144874.png" alt="image-20200526162144874"></p><blockquote><p>特性</p></blockquote><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求,以后简单的CRUD操作,它不用自己编写了</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用(自动帮你生成代码)</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>使用第三方组件:</p><ol><li><p>导入对应的依赖</p></li><li><p>研究依赖如何配置</p></li><li><p>代码如何编写</p></li><li><p>提高扩展技术能力</p></li></ol><blockquote><p>步骤 </p></blockquote><ol><li><p>创建数据库 ==mybatis_plus==</p></li><li><p>创建user表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 真实开发中,version(乐观锁) , deleted(逻辑删除) , gmt_create , gem_modified</span></code></pre></li><li><p>编写项目,初始化项目  使用Spring boot初始化</p></li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526163612972.png" alt="image-20200526163612972"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526163711404.png" alt="image-20200526163711404"></p><ol start="4"><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--导入数据库驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Lombok--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--导入Mybatis-plus--></span>        <span class="token comment" spellcheck="true">&lt;!--Mybatis-plus并不是spring boot官方的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>说明:  我们使用mybatis-plus 可以节省我们大量的代码,尽量不要同时导入mybatis和mybatis-plus!</p></li><li><p>连接数据库! 这一步和mybatis相同!</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 主要 MySQL 5 和 MySQL 8 有不同点  这里使用的是MySQL 8 *** 代表数据库地址</span><span class="token attr-name">spring</span><span class="token punctuation">:</span><span class="token attr-name">  datasource</span><span class="token punctuation">:</span><span class="token attr-name">    username</span><span class="token punctuation">:</span> <span class="token attr-value">root</span><span class="token attr-name">    password</span><span class="token punctuation">:</span> <span class="token attr-value">1234</span><span class="token attr-name">    url</span><span class="token punctuation">:</span> <span class="token attr-value">jdbc:mysql://locathost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">    driver-class-name</span><span class="token punctuation">:</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre></li><li><p>==传统方式 pojo-dao (连接mybatis,配置mapper.xml 文件) -service-controller==</p></li><li><p>使用了mybatis-plus之后</p><ul><li><p>pojo</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 主键ID     */</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 姓名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 年龄     */</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 邮箱     */</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><ul><li><p>mapper接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**在对应的mapper实现基本的接口 * @author 卫风 * @date 2020/5/26 17:08 */</span><span class="token annotation punctuation">@Repository</span>  <span class="token comment" spellcheck="true">//代表持久层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有的CRUD 操作已经完成了</span>    <span class="token comment" spellcheck="true">//你不用像以前一样配置一大堆文件了!</span><span class="token punctuation">}</span></code></pre></li><li><p>注意要在主启动类上去扫描我们的mapper包下的所有接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.apt.mapper"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//扫描我们的mapper文件夹</span></code></pre></li><li><p>使用 , 在测试类中测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybatisPlusApplicationTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//继承了baseMapper 所有的方法都来自父类 我们也可以编写自己的扩展方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数是一个Wrapper ,条件构造器 ,这里我们先用 null 查询全部用户</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果 和基本项目结构</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526172535772.png" alt="image-20200526172535772"></p></li></ul><pre><code> &gt;思考问题? 1. SQL谁帮我们写的? MyBatis-Plus 2. 方法哪里来的?   MyBatis-Plus 都写好了</code></pre><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p>我们所有的sql现在是不可见的,我们希望知道它是怎末执行的,所以我们必须要看日志!</p><pre class=" language-yml"><code class="language-yml">#配置日志mybatis-plus:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526173537067.png" alt="image-20200526173537067"></p><p>配置完日志后,后面的学习就需要注意这个自动生成的SQL ,就会喜欢上Mybatis-Plus!</p><h2 id="CRUD-扩展"><a href="#CRUD-扩展" class="headerlink" title="CRUD 扩展"></a>CRUD 扩展</h2><h3 id="Insert-插入"><a href="#Insert-插入" class="headerlink" title="Insert 插入"></a>Insert 插入</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//测试插入</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"卫风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1783246945@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insert <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//帮我们自动生成id</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//受影响的行数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发现id会自动回填</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526175303365.png" alt="image-20200526175303365"></p><blockquote><p>数据库插入的默认值为: 全局的唯一id</p></blockquote><h3 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h3><blockquote><p>默认ID :  IdType.ID_WORKER  全局唯一id</p></blockquote><p>分布式系统唯一id 生成 : <a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><p><strong>雪花算法 :</strong> </p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0 可以保证几乎全球唯一!</p><blockquote><p>主键自增</p></blockquote><p>我们需要配置主键自增:</p><ol><li>实体类字段上  @TableId(type = IdType.AUTO)</li><li>数据库字段一定要是自增!</li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526180945616.png" alt="image-20200526180945616"></p><ol start="3"><li><p>再次测试插入即可!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526181305975.png" alt="image-20200526181305975"></p></li></ol><blockquote><p>其余的源码解释</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> IdType <span class="token punctuation">{</span>    <span class="token function">AUTO</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//数据库id自增</span>    <span class="token function">NONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//未设置主键</span>    <span class="token function">INPUT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//手动输入</span>    <span class="token function">ID_WORKER</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//默认的全局唯一id</span>    <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//全局唯一id uuid</span>    <span class="token function">ID_WORKER_STR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ID_WORKER 字符串表示法</span><span class="token punctuation">}</span></code></pre><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过条件自动拼接动态sql</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"卫风--test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1265218753394700291L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1783246@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意 updateById 但是参数是一个对象</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526182904450.png" alt="image-20200526182904450"></p><p>所有的sql都是自动帮你动态配置的!</p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>创建时间 修改时间 ! 这些个操作都是自动化完成的,我们不希望手动更新!</p><p>阿里巴巴开发手册: 所有的数据库表 : gmt_create,gmt_modified 几乎所有的表都要配置上! 而且要自动化!</p><blockquote><p>方式一 : 数据库级别(工作中不允许你修改数据库)</p></blockquote><ol><li>在表中新增字段 create_time ,update_time</li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526184910254.png" alt="image-20200526184910254"></p><ol start="2"><li><p>测试插入方法,我们需要先把实体类同步</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Date creatTime<span class="token punctuation">;</span><span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span></code></pre></li><li><p>再次更新查看结构即可</p></li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526185851862.png" alt="image-20200526185851862"></p><blockquote><p>方式二 : 代码级别</p></blockquote><ol><li><p>第一个删除数据库的默认值,更新操作!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526190137000.png" alt="image-20200526190137000"></p></li><li><p>实体类的字段上属性上增加注解</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 字段添加填充内容 */</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span></code></pre><ol start="3"><li>编写处理器来处理</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**一定不要忘记把处理器加到IOC容器中! * @author 卫风 * @date 2020/5/26 19:05 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandLer</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 插入元对象字段填充（用于插入时对公共字段的填充）     *     * @param metaObject 元对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新元对象字段填充（用于更新时对公共字段的填充）     *     * @param metaObject 元对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li><p>测试插入</p></li><li><p>测试更新,观察时间即可!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526201602118.png" alt="image-20200526201602118"></p></li></ol><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>在面试过程中,我们经常会被问到乐观锁,悲观锁!</p><blockquote><p>乐观锁: 顾名思义十分乐观,它总认为不会出现问题,无论干什么都不去上锁! 如果出现问题,再次更新值测试</p><p>悲观锁: 顾名思义十分悲观,它认为总是出现问题,无论干什么都会上锁! 再去操作!</p></blockquote><p>乐观锁机制</p><p>乐观锁实现方式：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><pre class=" language-sql"><code class="language-sql">乐观锁 : <span class="token number">1</span> 先查询<span class="token punctuation">,</span>获得版本号 version <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">--a</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'update'</span><span class="token punctuation">,</span>version <span class="token operator">=</span> version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">--b 线程抢先完成, 这个时候 version = 2 ,会导致 a  修改失败</span></code></pre><blockquote><p>测试一下mybatis-plus乐观锁插件</p></blockquote><ol><li><p>给数据库增加字段!  </p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526205212854.png" alt="image-20200526205212854"></p></li><li><p>我们实体类加对应的字段</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span> <span class="token comment" spellcheck="true">//乐观锁注解</span><span class="token keyword">private</span> Integer version<span class="token punctuation">;</span></code></pre><ol start="3"><li><p>注册组件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author 卫风 * @date 2020/5/26 20:55 */</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//配置类</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.apt.mapper"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//扫描我们的mapper文件夹</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注册乐观锁插件     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试一下!</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//测试乐观锁成功</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimisticLockerInterceptor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 . 查询用户信息</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 修改用户信息</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"卫风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1783246945@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 执行更新操作</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试乐观锁失败</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOptimisticLockerInterceptor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 . 查询用户信息</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 修改用户信息</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"卫风11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1783246945@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟另外一个线程执行了插队操作</span>        User user1 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"卫风22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"1783246945@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 执行更新操作  如果没有乐观锁 就会覆盖查到线程的值</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526210833418.png" alt="image-20200526210833418"></p></li></ol><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 测试批量查询! */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSelectByBathId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 按条件查询map */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSelectByBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"卫风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p><strong>分页在网站使用的十分之多!</strong></p><ol><li>原始的 limit 进行分页</li><li>pageHelper第三方插件</li><li>mybatis-plus内置了分页插件</li></ol><blockquote><p>如何使用!</p></blockquote><ol><li><p>配置拦截器组件即可!</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页插件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>直接使用page对象即可!</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *测试分页查询 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 参数一 : 当前页</span>    <span class="token comment" spellcheck="true">// 参数二 : 页面大小</span>    <span class="token comment" spellcheck="true">// 使用了分页插件之后,所有的分页操作也变得简单了!</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><ol><li><p>根据id删除记录</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试删除 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1265218753394700291L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 通过id批量删除 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testDeleteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1265218753394700296L<span class="token punctuation">,</span>1265218753394700295L<span class="token punctuation">,</span>1265218753394700294L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 通过map删除 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testDeleteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"卫风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>我们在工作中遇到的逻辑删除!</p><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><blockquote><p>物理删除 : 从数据库中直接移除</p><p>逻辑删除 : 在数据库中没有被移除,而是通过一个变量来让他失效!</p></blockquote><p><strong>管理员可以查看被删除的记录!防止数据的丢失,类似于回收站!</strong></p><p>测试一下 : </p><ol><li><p>在数据库中增加一个deleted 字段</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526224115852.png" alt="image-20200526224115852"></p></li><li><p>实体类中增加属性</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 逻辑删除 */</span><span class="token annotation punctuation">@TableLogic</span><span class="token keyword">private</span>  Integer deleted<span class="token punctuation">;</span></code></pre></li><li><p>配置!</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 逻辑删除组件 * @return */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-yml"><code class="language-yml"># 配置逻辑删除mybatis-plus:  global-config:    db-config:      logic-delete-value: 1 # 逻辑已删除值(默认为 1)      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)</code></pre><ol start="4"><li><p>测试一下删除</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526225247992.png" alt="image-20200526225247992"></p><p>记录依旧在数据库 但是值却已经变了</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526225359649.png" alt="image-20200526225359649"></p><p>​    <img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200526225508752.png" alt="image-20200526225508752"></p><p>以上的所有CRUD操作及其扩展操作 ,我们都必须精通掌握! 会大大提高你的工作和写项目的效率!</p></li></ol></li></ol><h3 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h3><p>我们平时的开发中,会遇到一些慢sql,测试!  druid….</p><p>作用 : 性能分析拦截器，用于输出每条 SQL 语句及其执行时间</p><p>MP也提供性能分析插件,如果超过这个时间就停止运行!</p><ol><li><p>导入插件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SQL执行效率插件 */</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 dev test 环境开启</span><span class="token keyword">public</span> PerformanceInterceptor <span class="token function">performanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PerformanceInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  ms 设置sql执行的最大时间  如果超过则不执行</span>    interceptor<span class="token punctuation">.</span><span class="token function">setMaxTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否会格式化</span>    interceptor<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>记住,要做spring boot中配置环境为 dev 或者 test!</p></li><li><p>测试使用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//参数是一个Wrapper ,条件构造器 ,这里我们先用 null 查询全部用户</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只要超过规定的时间就会抛出异常!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527073144104.png" alt="image-20200527073144104"></p></li></ol><p>使用性能分析插件可以帮助我们提高效率!</p><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p>十分重要 : Wrapper</p><p>我们写一下复杂的sql就可以使用他来替代!</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527073829611.png" alt="image-20200527073829611"></p><ol><li><p>测试一</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询name不为空的用户, 并且邮箱不为空的用户,年龄大于等于12</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper            <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>测试二</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询名字 卫风</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"卫风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询一个数据 , 出现多个数据使用list 或者 map</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>测试三</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询年龄在20~30 岁之间的用户</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询一个数据 , 出现多个数据使用list 或者 map</span>    Integer integer <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>测试四</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模糊查询</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//名字中不包含e的  以t开头的</span>    wrapper<span class="token punctuation">.</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527075819597.png" alt="image-20200527075819597"></p></li><li><p>测试五</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模糊查询</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//id 在子查询中查出来</span>    wrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"select id from user where id &lt; 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527080157743.png" alt="image-20200527080157743"></p><ol start="6"><li><p>测试六</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过id进行排序 desc 降序  asc  升序</span>    wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li></ol><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527080810416.png" alt="image-20200527080810416"></p><p>其余的看官方文档练习即可</p><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置文件生成位置</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置作者</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"卫风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否打开输出目录</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去Service的I前缀</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实体属性 Swagger2 注解</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// dsc.setSchemaName("public");</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据库类型</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//父包名。如果为空，将下面子包名必须写全部， 否则就只需写子包名</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.apt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置要映射的表名  参数可以为多个</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启lombok注解</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置逻辑删除</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置自动填充配置  国际命名 规范是  创建时间 : gmt_create  修改时间 : gmt_modified</span>        TableFill createTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill updateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//乐观锁</span>        strategy<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//strategy.setTablePrefix(pc.getModuleName() + "_");</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// mpg.setTemplateEngine(new FreemarkerTemplateEngine());</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这样就可以自动生成代码 其他的根据自己情况修改即可 注意 他这个会生成在项目路径下</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527093849342.png" alt="image-20200527093849342"></p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527093633609.png" alt="image-20200527093633609"></p><p>可能会报一下错误</p><p><img src="https://md-imagess.oss-cn-beijing.aliyuncs.com/img/mdimage-20200527092659676.png" alt="image-20200527092659676"></p><p>原因mp默认的模板引擎是 velocity</p><p>导入对应的依赖即可 注意 你的模板引擎如果设置为别的 导入对应的依赖即可 官网有详细的自定义模板引擎方法 参考即可</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
